namespace std::array;
    enum Slice<T> {
        S(T[], int, int),
    }
    let<T> find_index: T[], (T -> bool) -> std::prelude::Option<int> = (|arr, f| std::array::find_map_enumerated::<T, int>(arr, (|i, x| if f(x) { std::prelude::Option::Some::<int>(i) } else { std::prelude::Option::None::<int> })));
    let<T1, T2> find_map: T1[], (T1 -> std::prelude::Option<T2>) -> std::prelude::Option<T2> = (|arr, f| std::array::find_map_enumerated::<T1, T2>(arr, (|_, x| f(x))));
    let<T1, T2> find_map_enumerated: T1[], (int, T1 -> std::prelude::Option<T2>) -> std::prelude::Option<T2> = (|arr, f| std::array::find_internal::find_map_enumerated::<T1, T2>(arr, 0, std::array::len::<T1>(arr), f));
    let<T1, T2> fold: T1[], T2, (T2, T1 -> T2) -> T2 = (|arr, initial, folder| std::utils::fold::<T1, T2>(std::array::len::<T1>(arr), (|i| arr[i]), initial, folder));
    let<T> len: T[] -> int = [];
    let<T1, T2> map: T1[], (T1 -> T2) -> T2[] = (|arr, f| std::array::new::<T2>(std::array::len::<T1>(arr), (|i| f(arr[i]))));
    let<T1, T2> map_enumerated: T1[], (int, T1 -> T2) -> T2[] = (|arr, f| std::array::new::<T2>(std::array::len::<T1>(arr), (|i| f(i, arr[i]))));
    let<T> new: int, (int -> T) -> T[] = (|length, f| std::utils::fold::<T, T[]>(length, f, [], (|acc, e| acc + [e])));
    let<T: FromLiteral + Mul> product: T[] -> T = (|arr| std::array::fold::<T, T>(arr, 1, (|a, b| a * b)));
    let<T> set_element: T[], int, T -> T[] = (|arr, i, x| {
        let _: () = std::check::assert(i < std::array::len::<T>(arr), (|| "Index out of bounds"));
        std::array::map_enumerated::<T, T>(arr, (|j, y| if i == j { x } else { y }))
    });
    let<T> slice_pop: std::array::Slice<T> -> (std::array::Slice<T>, std::prelude::Option<T>) = (|s| match s {
        std::array::Slice::S(_, _, 0) => (s, std::prelude::Option::None::<T>),
        std::array::Slice::S(arr, start, l) => (std::array::Slice::S::<T>(arr, start, l - 1), std::prelude::Option::Some::<T>(arr[start + l - 1])),
    });
    let<T> sort: T[], (T, T -> bool) -> T[] = (|arr, lt| std::array::internal::sort::<T>(std::array::to_slice::<T>(arr), lt));
    let<T> split_slice_half: std::array::Slice<T> -> (std::array::Slice<T>, std::array::Slice<T>) = (|s| match s {
        std::array::Slice::S(arr, start, l) => {
            let half_len: int = l / 2;
            (std::array::Slice::S::<T>(arr, start, half_len), std::array::Slice::S::<T>(arr, start + half_len, l - half_len))
        },
    });
    let<T> sub_array: T[], int, int -> T[] = (|arr, start, l| std::array::new::<T>(l, (|i| arr[start + i])));
    let<T: Add + FromLiteral> sum: T[] -> T = (|arr| std::array::fold::<T, T>(arr, 0, (|a, b| a + b)));
    let<T> to_array: std::array::Slice<T> -> T[] = (|s| match s {
        std::array::Slice::S(arr, start, l) => if start == 0 && l == std::array::len::<T>(arr) { arr } else { std::array::new::<T>(l, (|i| arr[start + i])) },
    });
    let<T> to_slice: T[] -> std::array::Slice<T> = (|x| std::array::Slice::S::<T>(x, 0, std::array::len::<T>(x)));
    let<T1, T2, T3> zip: T1[], T2[], (T1, T2 -> T3) -> T3[] = (|array1, array2, fn| std::array::new::<T3>(std::array::len::<T1>(array1), (|i| fn(array1[i], array2[i]))));
namespace std::array::find_internal;
    let<T1, T2> find_map_enumerated: T1[], int, int, (int, T1 -> std::prelude::Option<T2>) -> std::prelude::Option<T2> = (|arr, i, l, f| if i >= l { std::prelude::Option::None::<T2> } else { match f(i, arr[i]) {
        std::prelude::Option::Some(x) => std::prelude::Option::Some::<T2>(x),
        std::prelude::Option::None => std::array::find_internal::find_map_enumerated::<T1, T2>(arr, i + 1, l, f),
    } });
namespace std::array::internal;
    let<T> merge: std::array::Slice<T>, std::array::Slice<T>, (T, T -> bool) -> T[] = (|left, right, lt| match (std::array::slice_pop::<T>(left), std::array::slice_pop::<T>(right)) {
        ((_, std::prelude::Option::None), _) => std::array::to_array::<T>(right),
        (_, (_, std::prelude::Option::None)) => std::array::to_array::<T>(left),
        ((l_short, std::prelude::Option::Some(l_last)), (r_short, std::prelude::Option::Some(r_last))) => if lt(l_last, r_last) { std::array::internal::merge::<T>(left, r_short, lt) + [r_last] } else { std::array::internal::merge::<T>(l_short, right, lt) + [l_last] },
    });
    let<T> sort: std::array::Slice<T>, (T, T -> bool) -> T[] = (|slice, lt| match slice {
        std::array::Slice::S(_, _, 0) => [],
        std::array::Slice::S(_, _, 1) => std::array::to_array::<T>(slice),
        s => {
            let (left, right): (std::array::Slice<T>, std::array::Slice<T>) = std::array::split_slice_half::<T>(s);
            let left_sorted: std::array::Slice<T> = std::array::to_slice::<T>(std::array::internal::sort::<T>(left, lt));
            let right_sorted: std::array::Slice<T> = std::array::to_slice::<T>(std::array::internal::sort::<T>(right, lt));
            std::array::internal::merge::<T>(left_sorted, right_sorted, lt)
        },
    });
namespace std::btree;
    enum BTree<K, V> {
        Inner((K, V)[], std::btree::BTree<K, V>[]),
        Leaf((K, V)[]),
    }
    enum CmpResult {
        Less,
        Equal,
        Greater,
    }
    let<K, V> get: std::btree::BTree<K, V>, K, (K, K -> std::btree::CmpResult) -> std::prelude::Option<V> = std::btree::internal::get::<K, V>;
    let<K, V> insert: std::btree::BTree<K, V>, (K, V), (K, K -> std::btree::CmpResult) -> std::btree::BTree<K, V> = (|b_tree, (k, v), cmp| match std::btree::internal::insert::<K, V>(b_tree, (k, v), cmp) {
        std::btree::internal::InsertResult::Split(item, left, right) => std::btree::BTree::Inner::<K, V>([item], [left, right]),
        std::btree::internal::InsertResult::Updated(t) => t,
    });
    let max_items: int = 5;
    let<K, V> new: -> std::btree::BTree<K, V> = (|| std::btree::BTree::Leaf::<K, V>([]));
namespace std::btree::internal;
    enum InsertResult<K, V> {
        Split((K, V), std::btree::BTree<K, V>, std::btree::BTree<K, V>),
        Updated(std::btree::BTree<K, V>),
    }
    enum NodeSearchResult {
        InNode(int),
        InChild(int),
    }
    let<T> array_insert_at: T[], int, T -> T[] = (|arr, i, x| {
        let (left, right): (T[], T[]) = std::btree::internal::array_split::<T>(arr, i);
        left + [x] + right
    });
    let<T> array_split: T[], int -> (T[], T[]) = (|arr, l| {
        let left: T[] = std::array::sub_array::<T>(arr, 0, l);
        let right: T[] = std::array::sub_array::<T>(arr, l, std::array::len::<T>(arr) - l);
        (left, right)
    });
    let<T> array_split_pivot: T[], int -> (T[], T, T[]) = (|arr, i| {
        let left: T[] = std::array::sub_array::<T>(arr, 0, i);
        let right: T[] = std::array::sub_array::<T>(arr, i + 1, std::array::len::<T>(arr) - i - 1);
        (left, arr[i], right)
    });
    let<K, V> get: std::btree::BTree<K, V>, K, (K, K -> std::btree::CmpResult) -> std::prelude::Option<V> = (|b_tree, k, cmp| match b_tree {
        std::btree::BTree::Inner(items, children) => match std::btree::internal::search_in_node::<K, V, K>(items, k, cmp) {
            std::btree::internal::NodeSearchResult::InNode(i) => std::prelude::Option::Some::<V>(std::btree::internal::value_of_item::<K, V>(items[i])),
            std::btree::internal::NodeSearchResult::InChild(i) => std::btree::internal::get::<K, V>(children[i], k, cmp),
        },
        std::btree::BTree::Leaf(items) => std::array::find_map::<(K, V), V>(items, (|(key, value)| match cmp(k, key) {
            std::btree::CmpResult::Equal => std::prelude::Option::Some::<V>(value),
            _ => std::prelude::Option::None::<V>,
        })),
    });
    let<K, V> insert: std::btree::BTree<K, V>, (K, V), (K, K -> std::btree::CmpResult) -> std::btree::internal::InsertResult<K, V> = (|b_tree, (k, v), cmp| match b_tree {
        std::btree::BTree::Leaf(items) => std::btree::internal::insert_into_leaf::<K, V>(items, (k, v), cmp),
        std::btree::BTree::Inner(items, children) => match std::btree::internal::search_in_node::<K, V, K>(items, k, cmp) {
            std::btree::internal::NodeSearchResult::InNode(i) => std::btree::internal::InsertResult::Updated::<K, V>(std::btree::BTree::Inner::<K, V>(std::array::set_element::<(K, V)>(items, i, (k, v)), children)),
            std::btree::internal::NodeSearchResult::InChild(i) => match std::btree::internal::insert::<K, V>(children[i], (k, v), cmp) {
                std::btree::internal::InsertResult::Updated(child) => std::btree::internal::InsertResult::Updated::<K, V>(std::btree::BTree::Inner::<K, V>(items, std::array::set_element::<(std::btree::BTree<K, V>)>(children, i, child))),
                std::btree::internal::InsertResult::Split((k1, v1), left, right) => std::btree::internal::insert_into_inner::<K, V>(items, children, (k1, v1), i, left, right),
            },
        },
    });
    let<K, V> insert_into_inner: (K, V)[], std::btree::BTree<K, V>[], (K, V), int, std::btree::BTree<K, V>, std::btree::BTree<K, V> -> std::btree::internal::InsertResult<K, V> = (|items, children, (k, v), i, left, right| {
        let new_items: (K, V)[] = std::btree::internal::array_insert_at::<(K, V)>(items, i, (k, v));
        let (children_left, _, children_right): (std::btree::BTree<K, V>[], std::btree::BTree<K, V>, std::btree::BTree<K, V>[]) = std::btree::internal::array_split_pivot::<(std::btree::BTree<K, V>)>(children, i);
        let new_children: std::btree::BTree<K, V>[] = children_left + [left, right] + children_right;
        if std::array::len::<(K, V)>(new_items) <= std::btree::max_items { std::btree::internal::InsertResult::Updated::<K, V>(std::btree::BTree::Inner::<K, V>(new_items, new_children)) } else { std::btree::internal::split_inner::<K, V>(new_items, new_children) }
    });
    let<K, V> insert_into_leaf: (K, V)[], (K, V), (K, K -> std::btree::CmpResult) -> std::btree::internal::InsertResult<K, V> = (|items, (k, v), cmp| {
        let new_items: (K, V)[] = std::btree::internal::items_insert::<K, V>(items, (k, v), cmp);
        if std::array::len::<(K, V)>(new_items) <= std::btree::max_items { std::btree::internal::InsertResult::Updated::<K, V>(std::btree::BTree::Leaf::<K, V>(new_items)) } else { std::btree::internal::split_leaf::<K, V>(new_items) }
    });
    let<K, V> items_insert: (K, V)[], (K, V), (K, K -> std::btree::CmpResult) -> (K, V)[] = (|items, (k, v), cmp| {
        let (new_items, ins): ((K, V)[], bool) = std::array::fold::<(K, V), ((K, V)[], bool)>(items, ([], std::prelude::false), (|(acc, inserted), (key, value)| if inserted { (acc + [(key, value)], inserted) } else { match cmp(k, key) {
            std::btree::CmpResult::Less => (acc + [(k, v), (key, value)], std::prelude::true),
            std::btree::CmpResult::Equal => (acc + [(k, v)], std::prelude::true),
            std::btree::CmpResult::Greater => (acc + [(key, value)], std::prelude::false),
        } }));
        if ins { new_items } else { new_items + [(k, v)] }
    });
    let one: int = 1;
    let<K1, V, K2> search_in_node: (K1, V)[], K2, (K2, K1 -> std::btree::CmpResult) -> std::btree::internal::NodeSearchResult = (|items, k, cmp| {
        let r: std::prelude::Option<std::btree::internal::NodeSearchResult> = std::array::find_map_enumerated::<(K1, V), std::btree::internal::NodeSearchResult>(items, (|i, (key, _)| match cmp(k, key) {
            std::btree::CmpResult::Less => std::prelude::Option::Some::<std::btree::internal::NodeSearchResult>(std::btree::internal::NodeSearchResult::InChild(i)),
            std::btree::CmpResult::Equal => std::prelude::Option::Some::<std::btree::internal::NodeSearchResult>(std::btree::internal::NodeSearchResult::InNode(i)),
            std::btree::CmpResult::Greater => std::prelude::Option::None::<std::btree::internal::NodeSearchResult>,
        }));
        std::utils::unwrap_or_else::<std::btree::internal::NodeSearchResult>(r, (|| std::btree::internal::NodeSearchResult::InChild(std::array::len::<(K1, V)>(items))))
    });
    let<K, V> split_inner: (K, V)[], std::btree::BTree<K, V>[] -> std::btree::internal::InsertResult<K, V> = (|items, children| {
        let split: int = (std::array::len::<(K, V)>(items) - 1) / 2;
        let (left_items, push_up, right_items): ((K, V)[], (K, V), (K, V)[]) = std::btree::internal::array_split_pivot::<(K, V)>(items, split);
        let (left_children, right_children): (std::btree::BTree<K, V>[], std::btree::BTree<K, V>[]) = std::btree::internal::array_split::<(std::btree::BTree<K, V>)>(children, split + 1);
        std::btree::internal::InsertResult::Split::<K, V>(push_up, std::btree::BTree::Inner::<K, V>(left_items, left_children), std::btree::BTree::Inner::<K, V>(right_items, right_children))
    });
    let<K, V> split_leaf: (K, V)[] -> std::btree::internal::InsertResult<K, V> = (|items| {
        let split: int = (std::array::len::<(K, V)>(items) - 1) / 2;
        let (left, center, right): ((K, V)[], (K, V), (K, V)[]) = std::btree::internal::array_split_pivot::<(K, V)>(items, split);
        std::btree::internal::InsertResult::Split::<K, V>(center, std::btree::BTree::Leaf::<K, V>(left), std::btree::BTree::Leaf::<K, V>(right))
    });
    let<K, V> value_of_item: (K, V) -> V = (|(_, value)| value);
namespace std::check;
    let assert: bool, (-> string) -> () = (|condition, reason| if !condition { std::check::panic(reason()) } else { () });
    let panic: string -> ! = [];
namespace std::convert;
    let expr = [];
    let fe = [];
    let int = [];
namespace std::debug;
    let<T: ToString> print: T -> () = [];
    let<T: ToString> println: T -> () = (|msg| {
        let _: () = std::debug::print::<T>(msg);
        std::debug::print::<string>("\n")
    });
namespace std::field;
    let BN254_PRIME: int = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    let GOLDILOCKS_PRIME: int = 18446744069414584321;
    enum KnownField {
        Goldilocks,
        BN254,
    }
    let known_field: -> std::prelude::Option<std::field::KnownField> = (|| if std::field::modulus() == std::field::GOLDILOCKS_PRIME { std::prelude::Option::Some::<std::field::KnownField>(std::field::KnownField::Goldilocks) } else { if std::field::modulus() == std::field::BN254_PRIME { std::prelude::Option::Some::<std::field::KnownField>(std::field::KnownField::BN254) } else { std::prelude::Option::None::<std::field::KnownField> } });
    let modulus: -> int = [];
    let require_known_field: std::field::KnownField, (-> string) -> () = (|f, err| match (f, std::field::known_field()) {
        (std::field::KnownField::Goldilocks, std::prelude::Option::Some(std::field::KnownField::Goldilocks)) => (),
        (std::field::KnownField::BN254, std::prelude::Option::Some(std::field::KnownField::BN254)) => (),
        _ => std::check::panic(err()),
    });
namespace std::math::ff;
    let add: int, int, int -> int = (|x, y, modulus| std::math::ff::reduce(x + y, modulus));
    let div: int, int, int -> int = (|x, y, modulus| std::math::ff::mul(x, std::math::ff::inverse(y, modulus), modulus));
    let extended_gcd: int, int -> (int, int) = (|a, b| if b == 0 { if a == 1 { (1, 0) } else { std::check::panic("Inputs are not co-prime, inverse does not exist.") } } else {
        let (r1, r2): (int, int) = std::math::ff::extended_gcd(b, a % b);
        (r2, r1 - a / b * r2)
    });
    let inverse: int, int -> int = (|x, modulus| if x <= 0 || x >= modulus { if x == 0 { std::check::panic("Tried to compute the inverse of zero.") } else { std::check::panic("Tried to compute the inverse of a negative number or a number outside the field.") } } else {
        let (r, _): (int, int) = std::math::ff::extended_gcd(x, modulus);
        std::math::ff::reduce(r, modulus)
    });
    let mul: int, int, int -> int = (|x, y, modulus| std::math::ff::reduce(x * y, modulus));
    let reduce: int, int -> int = (|x, modulus| if x < 0 { (modulus - -x % modulus) % modulus } else { x % modulus });
    let sub: int, int, int -> int = (|x, y, modulus| std::math::ff::reduce(x - y, modulus));
namespace std::math::fp2;
    enum Fp2<T> {
        Fp2(T, T),
    }
    let<T: Add> add_ext: std::math::fp2::Fp2<T>, std::math::fp2::Fp2<T> -> std::math::fp2::Fp2<T> = (|a, b| match (a, b) {
        (std::math::fp2::Fp2::Fp2(a0, a1), std::math::fp2::Fp2::Fp2(b0, b1)) => std::math::fp2::Fp2::Fp2::<T>(a0 + b0, a1 + b1),
    });
    let constrain_eq_ext: std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr> -> std::prelude::Constr[] = (|a, b| match (a, b) {
        (std::math::fp2::Fp2::Fp2(a0, a1), std::math::fp2::Fp2::Fp2(b0, b1)) => [a0 = b0, a1 = b1],
    });
    let eq_ext: std::math::fp2::Fp2<fe>, std::math::fp2::Fp2<fe> -> bool = (|a, b| match (a, b) {
        (std::math::fp2::Fp2::Fp2(a0, a1), std::math::fp2::Fp2::Fp2(b0, b1)) => a0 == b0 && a1 == b1,
    });
    let eval_ext: std::math::fp2::Fp2<expr> -> std::math::fp2::Fp2<fe> = (query |a| match a {
        std::math::fp2::Fp2::Fp2(a0, a1) => std::math::fp2::Fp2::Fp2::<fe>(std::prover::eval(a0), std::prover::eval(a1)),
    });
    let expr_ext: std::math::fp2::Fp2<fe> -> std::math::fp2::Fp2<expr> = (|a| match a {
        std::math::fp2::Fp2::Fp2(a0, a1) => std::math::fp2::Fp2::Fp2::<expr>(std::convert::expr::<fe>(a0), std::convert::expr::<fe>(a1)),
    });
    let fp2_from_array: expr[] -> std::math::fp2::Fp2<expr> = (|arr| { if std::math::fp2::is_extension(arr) { std::math::fp2::Fp2::Fp2::<expr>(arr[0], arr[1]) } else {
        let _: () = std::check::assert(!std::math::fp2::needs_extension(), (|| "The field is too small and needs to move to the extension field. Pass two elements instead!"));
        std::math::fp2::from_base::<expr>(arr[0])
    } });
    let<T: FromLiteral> from_base: T -> std::math::fp2::Fp2<T> = (|x| std::math::fp2::Fp2::Fp2::<T>(x, 0));
    let inv_ext: std::math::fp2::Fp2<fe> -> std::math::fp2::Fp2<fe> = (|a| match a {
        std::math::fp2::Fp2::Fp2(a0, a1) => {
            let factor: fe = std::math::fp2::inv_field(7 * a1 * a1 - a0 * a0);
            std::math::fp2::Fp2::Fp2::<fe>(-a0 * factor, a1 * factor)
        },
    });
    let inv_field: fe -> fe = (|x| std::convert::fe::<int>(std::math::ff::inverse(std::convert::int::<fe>(x), std::field::modulus())));
    let is_extension: expr[] -> bool = (|arr| match std::array::len::<expr>(arr) {
        1 => std::prelude::false,
        2 => std::prelude::true,
        _ => std::check::panic("Expected 1 or 2 accumulator columns!"),
    });
    let<T: Add + FromLiteral + Mul> mul_ext: std::math::fp2::Fp2<T>, std::math::fp2::Fp2<T> -> std::math::fp2::Fp2<T> = (|a, b| match (a, b) {
        (std::math::fp2::Fp2::Fp2(a0, a1), std::math::fp2::Fp2::Fp2(b0, b1)) => std::math::fp2::Fp2::Fp2::<T>(a0 * b0 + 7 * a1 * b1, a1 * b0 + a0 * b1),
    });
    let needs_extension: -> bool = (|| match std::field::known_field() {
        std::prelude::Option::Some(std::field::KnownField::Goldilocks) => std::prelude::true,
        std::prelude::Option::Some(std::field::KnownField::BN254) => std::prelude::false,
        None => std::check::panic("The permutation/lookup argument is not implemented for the current field!"),
    });
    let next_ext: std::math::fp2::Fp2<expr> -> std::math::fp2::Fp2<expr> = (|a| match a {
        std::math::fp2::Fp2::Fp2(a0, a1) => std::math::fp2::Fp2::Fp2::<expr>(a0', a1'),
    });
    let<T: Sub> sub_ext: std::math::fp2::Fp2<T>, std::math::fp2::Fp2<T> -> std::math::fp2::Fp2<T> = (|a, b| match (a, b) {
        (std::math::fp2::Fp2::Fp2(a0, a1), std::math::fp2::Fp2::Fp2(b0, b1)) => std::math::fp2::Fp2::Fp2::<T>(a0 - b0, a1 - b1),
    });
    let<T> unpack_ext: std::math::fp2::Fp2<T> -> (T, T) = (|a| match a {
        std::math::fp2::Fp2::Fp2(a0, a1) => (a0, a1),
    });
    let<T> unpack_ext_array: std::math::fp2::Fp2<T> -> T[] = (|a| match a {
        std::math::fp2::Fp2::Fp2(a0, a1) => [a0, a1],
    });
namespace std::math::fp2::test;
    let add: -> () = (|| {
        let test_add: std::math::fp2::Fp2<fe>, std::math::fp2::Fp2<fe>, std::math::fp2::Fp2<fe> -> () = (|a, b, c| std::check::assert(std::math::fp2::eq_ext(std::math::fp2::add_ext::<fe>(a, b), c), (|| "Wrong addition result")));
        let _: () = test_add(std::math::fp2::from_base::<fe>(0), std::math::fp2::from_base::<fe>(0), std::math::fp2::from_base::<fe>(0));
        let _: () = test_add(std::math::fp2::Fp2::Fp2::<fe>(123, 1234), std::math::fp2::from_base::<fe>(0), std::math::fp2::Fp2::Fp2::<fe>(123, 1234));
        let _: () = test_add(std::math::fp2::from_base::<fe>(0), std::math::fp2::Fp2::Fp2::<fe>(123, 1234), std::math::fp2::Fp2::Fp2::<fe>(123, 1234));
        let _: () = test_add(std::math::fp2::Fp2::Fp2::<fe>(123, 1234), std::math::fp2::Fp2::Fp2::<fe>(567, 5678), std::math::fp2::Fp2::Fp2::<fe>(690, 6912));
        test_add(std::math::fp2::Fp2::Fp2::<fe>(-1, -1), std::math::fp2::Fp2::Fp2::<fe>(3, 4), std::math::fp2::Fp2::Fp2::<fe>(2, 3))
    });
    let inverse: -> ()[] = (|| {
        let test_elements: std::math::fp2::Fp2<fe>[] = [std::math::fp2::from_base::<fe>(1), std::math::fp2::Fp2::Fp2::<fe>(123, 1234), std::math::fp2::Fp2::Fp2::<fe>(-1, 500)];
        std::array::map::<(std::math::fp2::Fp2<fe>), ()>(test_elements, (|x| {
            let mul_with_inverse: std::math::fp2::Fp2<fe> = std::math::fp2::mul_ext::<fe>(x, std::math::fp2::inv_ext(x));
            std::check::assert(std::math::fp2::eq_ext(mul_with_inverse, std::math::fp2::from_base::<fe>(1)), (|| "Should be 1"))
        }))
    });
    let mul: -> () = (|| {
        let test_mul: std::math::fp2::Fp2<fe>, std::math::fp2::Fp2<fe>, std::math::fp2::Fp2<fe> -> () = (|a, b, c| std::check::assert(std::math::fp2::eq_ext(std::math::fp2::mul_ext::<fe>(a, b), c), (|| "Wrong multiplication result")));
        let _: () = test_mul(std::math::fp2::from_base::<fe>(1), std::math::fp2::from_base::<fe>(1), std::math::fp2::from_base::<fe>(1));
        let _: () = test_mul(std::math::fp2::Fp2::Fp2::<fe>(123, 1234), std::math::fp2::from_base::<fe>(1), std::math::fp2::Fp2::Fp2::<fe>(123, 1234));
        let _: () = test_mul(std::math::fp2::from_base::<fe>(1), std::math::fp2::Fp2::Fp2::<fe>(123, 1234), std::math::fp2::Fp2::Fp2::<fe>(123, 1234));
        let _: () = test_mul(std::math::fp2::Fp2::Fp2::<fe>(123, 1234), std::math::fp2::from_base::<fe>(0), std::math::fp2::from_base::<fe>(0));
        let _: () = test_mul(std::math::fp2::from_base::<fe>(0), std::math::fp2::Fp2::Fp2::<fe>(123, 1234), std::math::fp2::from_base::<fe>(0));
        let _: () = test_mul(std::math::fp2::Fp2::Fp2::<fe>(123, 1234), std::math::fp2::Fp2::Fp2::<fe>(567, 5678), std::math::fp2::Fp2::Fp2::<fe>(49116305, 1398072));
        test_mul(std::math::fp2::Fp2::Fp2::<fe>(-1, -2), std::math::fp2::Fp2::Fp2::<fe>(-3, 4), std::math::fp2::Fp2::Fp2::<fe>(3 - 7 * 8, 6 - 4))
    });
    let sub: -> () = (|| {
        let test_sub: std::math::fp2::Fp2<fe>, std::math::fp2::Fp2<fe>, std::math::fp2::Fp2<fe> -> () = (|a, b, c| std::check::assert(std::math::fp2::eq_ext(std::math::fp2::sub_ext::<fe>(a, b), c), (|| "Wrong subtraction result")));
        let _: () = test_sub(std::math::fp2::from_base::<fe>(0), std::math::fp2::from_base::<fe>(0), std::math::fp2::from_base::<fe>(0));
        let _: () = test_sub(std::math::fp2::Fp2::Fp2::<fe>(123, 1234), std::math::fp2::from_base::<fe>(0), std::math::fp2::Fp2::Fp2::<fe>(123, 1234));
        let _: () = test_sub(std::math::fp2::Fp2::Fp2::<fe>(123, 1234), std::math::fp2::Fp2::Fp2::<fe>(567, 5678), std::math::fp2::Fp2::Fp2::<fe>(123 - 567, 1234 - 5678));
        test_sub(std::math::fp2::Fp2::Fp2::<fe>(-1, -1), std::math::fp2::Fp2::Fp2::<fe>(4294967296, 1), std::math::fp2::Fp2::Fp2::<fe>(-4294967296 - 1, -2))
    });
namespace std::prelude;
    enum Constr {
        Identity(expr, expr),
        Lookup((std::prelude::Option<expr>, std::prelude::Option<expr>), (expr, expr)[]),
        Permutation((std::prelude::Option<expr>, std::prelude::Option<expr>), (expr, expr)[]),
        Connection((expr, expr)[]),
    }
    enum Option<T> {
        None,
        Some(T),
    }
    enum Query {
        Input(int),
        Output(int, int),
        Hint(fe),
        DataIdentifier(int, int),
        None,
    }
    let challenge: int, int -> expr = [];
    let false: bool = !std::prelude::true;
    let set_hint: expr, (int -> std::prelude::Query) -> () = [];
    let true: bool = "" == "";
namespace std::protocols::bus;
    let bus_interaction: expr, expr, expr[], expr, expr[], std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr> -> std::prelude::Constr[] = (|is_first, id, tuple, multiplicity, acc, alpha, beta| {
        let folded: std::math::fp2::Fp2<expr> = std::math::fp2::sub_ext::<expr>(beta, std::protocols::fingerprint::fingerprint_with_id::<expr>(id, tuple, alpha));
        let folded_next: std::math::fp2::Fp2<expr> = std::math::fp2::next_ext(folded);
        let m_ext: std::math::fp2::Fp2<expr> = std::math::fp2::from_base::<expr>(multiplicity);
        let m_ext_next: std::math::fp2::Fp2<expr> = std::math::fp2::next_ext(m_ext);
        let acc_ext: std::math::fp2::Fp2<expr> = std::math::fp2::fp2_from_array(acc);
        let next_acc: std::math::fp2::Fp2<expr> = std::math::fp2::next_ext(acc_ext);
        let is_first_next: std::math::fp2::Fp2<expr> = std::math::fp2::from_base::<expr>(is_first');
        let update_expr: std::math::fp2::Fp2<expr> = std::math::fp2::sub_ext::<expr>(std::math::fp2::mul_ext::<expr>(folded_next, std::math::fp2::sub_ext::<expr>(next_acc, std::math::fp2::mul_ext::<expr>(acc_ext, std::math::fp2::sub_ext::<expr>(std::math::fp2::from_base::<expr>(1), is_first_next)))), m_ext_next);
        std::math::fp2::constrain_eq_ext(update_expr, std::math::fp2::from_base::<expr>(0))
    });
    let bus_receive: expr, expr, expr[], expr, expr[], std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr> -> std::prelude::Constr[] = (|is_first, id, tuple, multiplicity, acc, alpha, beta| { std::protocols::bus::bus_interaction(is_first, id, tuple, -1 * multiplicity, acc, alpha, beta) });
    let bus_send: expr, expr, expr[], expr, expr[], std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr> -> std::prelude::Constr[] = (|is_first, id, tuple, multiplicity, acc, alpha, beta| { std::protocols::bus::bus_interaction(is_first, id, tuple, multiplicity, acc, alpha, beta) });
    let compute_next_z_receive: expr, expr, expr[], expr, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr> -> fe[] = (query |is_first, id, tuple, multiplicity, acc, alpha, beta| std::protocols::bus::compute_next_z_send(is_first, id, tuple, -multiplicity, acc, alpha, beta));
    let compute_next_z_send: expr, expr, expr[], expr, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr> -> fe[] = (query |is_first, id, tuple, multiplicity, acc, alpha, beta| {
        let folded: std::math::fp2::Fp2<expr> = std::math::fp2::sub_ext::<expr>(beta, std::protocols::fingerprint::fingerprint_with_id::<expr>(id, tuple, alpha));
        let folded_next: std::math::fp2::Fp2<expr> = std::math::fp2::next_ext(folded);
        let m_ext: std::math::fp2::Fp2<expr> = std::math::fp2::from_base::<expr>(multiplicity);
        let m_ext_next: std::math::fp2::Fp2<expr> = std::math::fp2::next_ext(m_ext);
        let is_first_next: fe = std::prover::eval(is_first');
        let current_acc: std::math::fp2::Fp2<fe> = if is_first_next == 1 { std::math::fp2::from_base::<fe>(0) } else { std::math::fp2::eval_ext(acc) };
        let res: std::math::fp2::Fp2<fe> = std::math::fp2::add_ext::<fe>(current_acc, std::math::fp2::mul_ext::<fe>(std::math::fp2::eval_ext(m_ext_next), std::math::fp2::inv_ext(std::math::fp2::eval_ext(folded_next))));
        std::math::fp2::unpack_ext_array::<fe>(res)
    });
namespace std::protocols::fingerprint;
    let<T: Add + FromLiteral + Mul> fingerprint: T[], std::math::fp2::Fp2<T> -> std::math::fp2::Fp2<T> = (|expr_array, alpha| std::array::fold::<T, (std::math::fp2::Fp2<T>)>(expr_array, std::math::fp2::from_base::<T>(0), (|sum_acc, el| std::math::fp2::add_ext::<T>(std::math::fp2::mul_ext::<T>(alpha, sum_acc), std::math::fp2::from_base::<T>(el)))));
    let<T: Add + FromLiteral + Mul> fingerprint_with_id: T, T[], std::math::fp2::Fp2<T> -> std::math::fp2::Fp2<T> = (|id, expr_array, alpha| std::protocols::fingerprint::fingerprint::<T>([id] + expr_array, alpha));
namespace std::protocols::lookup;
    let compute_next_z: std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr, expr -> fe[] = (query |acc, alpha, beta, lookup_constraint, multiplicities| {
        let (lhs_selector, lhs, rhs_selector, rhs): (expr, expr[], expr, expr[]) = std::protocols::lookup::unpack_lookup_constraint(lookup_constraint);
        let lhs_denom: std::math::fp2::Fp2<expr> = std::math::fp2::sub_ext::<expr>(beta, std::protocols::fingerprint::fingerprint::<expr>(lhs, alpha));
        let rhs_denom: std::math::fp2::Fp2<expr> = std::math::fp2::sub_ext::<expr>(beta, std::protocols::fingerprint::fingerprint::<expr>(rhs, alpha));
        let m_ext: std::math::fp2::Fp2<expr> = std::math::fp2::from_base::<expr>(multiplicities);
        let res: std::math::fp2::Fp2<fe> = std::math::fp2::add_ext::<fe>(std::math::fp2::eval_ext(acc), std::math::fp2::sub_ext::<fe>(std::math::fp2::mul_ext::<fe>(std::math::fp2::inv_ext(std::math::fp2::eval_ext(lhs_denom)), std::math::fp2::eval_ext(std::math::fp2::from_base::<expr>(lhs_selector))), std::math::fp2::mul_ext::<fe>(std::math::fp2::mul_ext::<fe>(std::math::fp2::eval_ext(m_ext), std::math::fp2::inv_ext(std::math::fp2::eval_ext(rhs_denom))), std::math::fp2::eval_ext(std::math::fp2::from_base::<expr>(rhs_selector)))));
        std::math::fp2::unpack_ext_array::<fe>(res)
    });
    let lookup: expr, expr[], std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr, expr -> std::prelude::Constr[] = (|is_first, acc, alpha, beta, lookup_constraint, multiplicities| {
        let (lhs_selector, lhs, rhs_selector, rhs): (expr, expr[], expr, expr[]) = std::protocols::lookup::unpack_lookup_constraint(lookup_constraint);
        let lhs_denom: std::math::fp2::Fp2<expr> = std::math::fp2::sub_ext::<expr>(beta, std::protocols::fingerprint::fingerprint::<expr>(lhs, alpha));
        let rhs_denom: std::math::fp2::Fp2<expr> = std::math::fp2::sub_ext::<expr>(beta, std::protocols::fingerprint::fingerprint::<expr>(rhs, alpha));
        let m_ext: std::math::fp2::Fp2<expr> = std::math::fp2::from_base::<expr>(multiplicities);
        let acc_ext: std::math::fp2::Fp2<expr> = std::math::fp2::fp2_from_array(acc);
        let next_acc: std::math::fp2::Fp2<expr> = std::math::fp2::next_ext(acc_ext);
        let update_expr: std::math::fp2::Fp2<expr> = std::math::fp2::sub_ext::<expr>(std::math::fp2::add_ext::<expr>(std::math::fp2::mul_ext::<expr>(std::math::fp2::mul_ext::<expr>(lhs_denom, rhs_denom), std::math::fp2::sub_ext::<expr>(next_acc, acc_ext)), std::math::fp2::mul_ext::<expr>(std::math::fp2::mul_ext::<expr>(m_ext, std::math::fp2::from_base::<expr>(rhs_selector)), lhs_denom)), std::math::fp2::mul_ext::<expr>(std::math::fp2::from_base::<expr>(lhs_selector), rhs_denom));
        let (acc_1, acc_2): (expr, expr) = std::math::fp2::unpack_ext::<expr>(acc_ext);
        [is_first * acc_1 = 0, is_first * acc_2 = 0] + std::math::fp2::constrain_eq_ext(update_expr, std::math::fp2::from_base::<expr>(0))
    });
    let unpack_lookup_constraint: std::prelude::Constr -> (expr, expr[], expr, expr[]) = (|lookup_constraint| match lookup_constraint {
        std::prelude::Constr::Lookup((lhs_selector, rhs_selector), values) => (std::utils::unwrap_or_else::<expr>(lhs_selector, (|| 1)), std::array::map::<(expr, expr), expr>(values, (|(lhs, _)| lhs)), std::utils::unwrap_or_else::<expr>(rhs_selector, (|| 1)), std::array::map::<(expr, expr), expr>(values, (|(_, rhs)| rhs))),
        _ => std::check::panic("Expected lookup constraint"),
    });
namespace std::protocols::lookup_via_bus;
    let compute_next_z_receive_lookup: expr, expr, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr, expr -> fe[] = (query |is_first, id, acc, alpha, beta, lookup_constraint, multiplicities| {
        let (lhs_selector, lhs, rhs_selector, rhs): (expr, expr[], expr, expr[]) = std::protocols::lookup::unpack_lookup_constraint(lookup_constraint);
        std::protocols::bus::compute_next_z_receive(is_first, id, rhs, rhs_selector * multiplicities, acc, alpha, beta)
    });
    let compute_next_z_send_lookup: expr, expr, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr -> fe[] = (query |is_first, id, acc, alpha, beta, lookup_constraint| {
        let (lhs_selector, lhs, rhs_selector, rhs): (expr, expr[], expr, expr[]) = std::protocols::lookup::unpack_lookup_constraint(lookup_constraint);
        std::protocols::bus::compute_next_z_send(is_first, id, lhs, lhs_selector, acc, alpha, beta)
    });
    let lookup: expr, expr, expr[], expr[], std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr, expr -> std::prelude::Constr[] = (|is_first, id, acc_lhs, acc_rhs, alpha, beta, lookup_constraint, multiplicities| {
        let (lhs_selector, lhs, rhs_selector, rhs): (expr, expr[], expr, expr[]) = std::protocols::lookup::unpack_lookup_constraint(lookup_constraint);
        std::protocols::bus::bus_send(is_first, id, lhs, lhs_selector, acc_lhs, alpha, beta) + std::protocols::bus::bus_receive(is_first, id, rhs, rhs_selector * multiplicities, acc_rhs, alpha, beta)
    });
namespace std::protocols::permutation;
    let compute_next_z: std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr -> fe[] = (query |acc, alpha, beta, permutation_constraint| {
        let (lhs_selector, lhs, rhs_selector, rhs): (expr, expr[], expr, expr[]) = std::protocols::permutation::unpack_permutation_constraint(permutation_constraint);
        let lhs_folded: std::math::fp2::Fp2<expr> = std::protocols::permutation::selected_or_one::<expr>(lhs_selector, std::math::fp2::sub_ext::<expr>(beta, std::protocols::fingerprint::fingerprint::<expr>(lhs, alpha)));
        let rhs_folded: std::math::fp2::Fp2<expr> = std::protocols::permutation::selected_or_one::<expr>(rhs_selector, std::math::fp2::sub_ext::<expr>(beta, std::protocols::fingerprint::fingerprint::<expr>(rhs, alpha)));
        let res: std::math::fp2::Fp2<fe> = std::math::fp2::mul_ext::<fe>(std::math::fp2::eval_ext(std::math::fp2::mul_ext::<expr>(acc, lhs_folded)), std::math::fp2::inv_ext(std::math::fp2::eval_ext(rhs_folded)));
        std::math::fp2::unpack_ext_array::<fe>(res)
    });
    let permutation: expr, expr[], std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr -> std::prelude::Constr[] = (|is_first, acc, alpha, beta, permutation_constraint| {
        let (lhs_selector, lhs, rhs_selector, rhs): (expr, expr[], expr, expr[]) = std::protocols::permutation::unpack_permutation_constraint(permutation_constraint);
        let lhs_folded: std::math::fp2::Fp2<expr> = std::protocols::permutation::selected_or_one::<expr>(lhs_selector, std::math::fp2::sub_ext::<expr>(beta, std::protocols::fingerprint::fingerprint::<expr>(lhs, alpha)));
        let rhs_folded: std::math::fp2::Fp2<expr> = std::protocols::permutation::selected_or_one::<expr>(rhs_selector, std::math::fp2::sub_ext::<expr>(beta, std::protocols::fingerprint::fingerprint::<expr>(rhs, alpha)));
        let acc_ext: std::math::fp2::Fp2<expr> = std::math::fp2::fp2_from_array(acc);
        let next_acc: std::math::fp2::Fp2<expr> = std::math::fp2::next_ext(acc_ext);
        let update_expr: std::math::fp2::Fp2<expr> = std::math::fp2::sub_ext::<expr>(std::math::fp2::mul_ext::<expr>(rhs_folded, next_acc), std::math::fp2::mul_ext::<expr>(lhs_folded, acc_ext));
        let (acc_1, acc_2): (expr, expr) = std::math::fp2::unpack_ext::<expr>(acc_ext);
        [is_first * (acc_1 - 1) = 0, is_first * acc_2 = 0] + std::math::fp2::constrain_eq_ext(update_expr, std::math::fp2::from_base::<expr>(0))
    });
    let<T: Add + FromLiteral + Mul + Sub> selected_or_one: T, std::math::fp2::Fp2<T> -> std::math::fp2::Fp2<T> = (|selector, value| std::math::fp2::add_ext::<T>(std::math::fp2::mul_ext::<T>(std::math::fp2::from_base::<T>(selector), std::math::fp2::sub_ext::<T>(value, std::math::fp2::from_base::<T>(1))), std::math::fp2::from_base::<T>(1)));
    let unpack_permutation_constraint: std::prelude::Constr -> (expr, expr[], expr, expr[]) = (|permutation_constraint| match permutation_constraint {
        std::prelude::Constr::Permutation((lhs_selector, rhs_selector), values) => (std::utils::unwrap_or_else::<expr>(lhs_selector, (|| 1)), std::array::map::<(expr, expr), expr>(values, (|(lhs, _)| lhs)), std::utils::unwrap_or_else::<expr>(rhs_selector, (|| 1)), std::array::map::<(expr, expr), expr>(values, (|(_, rhs)| rhs))),
        _ => std::check::panic("Expected permutation constraint"),
    });
namespace std::protocols::permutation_via_bus;
    let compute_next_z_receive_permutation: expr, expr, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr -> fe[] = (query |is_first, id, acc, alpha, beta, permutation_constraint| {
        let (lhs_selector, lhs, rhs_selector, rhs): (expr, expr[], expr, expr[]) = std::protocols::permutation::unpack_permutation_constraint(permutation_constraint);
        std::protocols::bus::compute_next_z_receive(is_first, id, rhs, rhs_selector, acc, alpha, beta)
    });
    let compute_next_z_send_permutation: expr, expr, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr -> fe[] = (query |is_first, id, acc, alpha, beta, permutation_constraint| {
        let (lhs_selector, lhs, rhs_selector, rhs): (expr, expr[], expr, expr[]) = std::protocols::permutation::unpack_permutation_constraint(permutation_constraint);
        std::protocols::bus::compute_next_z_send(is_first, id, lhs, lhs_selector, acc, alpha, beta)
    });
    let permutation: expr, expr, expr[], expr[], std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr -> std::prelude::Constr[] = (|is_first, id, acc_lhs, acc_rhs, alpha, beta, permutation_constraint| {
        let (lhs_selector, lhs, rhs_selector, rhs): (expr, expr[], expr, expr[]) = std::protocols::permutation::unpack_permutation_constraint(permutation_constraint);
        std::protocols::bus::bus_send(is_first, id, lhs, lhs_selector, acc_lhs, alpha, beta) + std::protocols::bus::bus_receive(is_first, id, rhs, rhs_selector, acc_rhs, alpha, beta)
    });
namespace std::prover;
    let challenge: int, int -> expr = (constr |st, id| std::prelude::challenge(st, id));
    let degree: -> int = [];
    let eval: expr -> fe = [];
    let require_max_degree: int -> () = (|m| std::check::assert(std::prover::degree() <= m, (|| "Degree too large.")));
    let require_min_degree: int -> () = (|m| std::check::assert(std::prover::degree() >= m, (|| "Degree too small.")));
namespace std::utils;
    let cross_product: int[] -> (int -> int)[] = (|sizes| std::utils::cross_product_internal(1, 0, sizes));
    let cross_product_internal: int, int, int[] -> (int -> int)[] = (|cycle_len, pos, sizes| if pos >= std::array::len::<int>(sizes) { [] } else { [(|i| i / cycle_len % sizes[pos])] + std::utils::cross_product_internal(cycle_len * sizes[pos], pos + 1, sizes) });
    let<T1, T2> fold: int, (int -> T1), T2, (T2, T1 -> T2) -> T2 = (|length, f, initial, folder| if length <= 0 { initial } else { folder(std::utils::fold::<T1, T2>(length - 1, f, initial, folder), f(length - 1)) });
    let force_bool: expr -> std::prelude::Constr = (|c| c * (1 - c) = 0);
    let is_zero: expr -> expr = (constr |x| {
        let x_is_zero: col;
        std::utils::force_bool(x_is_zero);
        let x_inv: col;
        x_is_zero = 1 - x * x_inv;
        x_is_zero * x = 0;
        x_is_zero
    });
    let<T: Ord> max: T, T -> T = (|a, b| if a < b { b } else { a });
    let<T: Ord> min: T, T -> T = (|a, b| if a < b { a } else { b });
    let new_bool: -> expr = (constr || {
        let x: col;
        std::utils::force_bool(x);
        x
    });
    let<T: Add + FromLiteral> sum: int, (int -> T) -> T = (|length, f| std::utils::fold::<T, T>(length, f, 0, (|acc, e| acc + e)));
    let unchanged_until: expr, expr -> std::prelude::Constr = (|c, latch| (c' - c) * (1 - latch) = 0);
    let<T> unwrap_or_else: std::prelude::Option<T>, (-> T) -> T = (|o, f| match o {
        std::prelude::Option::None => f(),
        std::prelude::Option::Some(x) => x,
    });
namespace std::well_known;
    let is_first: int -> int = (|i| if i == 0 { 1 } else { 0 });
namespace main;
    col witness operation_id;
    let secp_modulus: int = 115792089237316195423570985008687907853269984665640564039457584007908834671663;
    let inverse: int -> int = (|x| std::math::ff::inverse(x, main.secp_modulus));
    let add: int, int -> int = (|x, y| std::math::ff::add(x, y, main.secp_modulus));
    let sub: int, int -> int = (|x, y| std::math::ff::sub(x, y, main.secp_modulus));
    let mul: int, int -> int = (|x, y| std::math::ff::mul(x, y, main.secp_modulus));
    let div: int, int -> int = (|x, y| std::math::ff::div(x, y, main.secp_modulus));
    col witness x1[16];
    col witness y2[16];
    col witness x3[16];
    col witness y3[16];
    let select_limb: int, int -> int = (|x, i| if i >= 0 { x >> i * 16 & if i < 15 { 65535 } else { 4294967295 } } else { 0 });
    let s_for_eq1: int, int, int, int -> int = (|x1, y1, x2, y2| main.div(main.sub(y2, y1), main.sub(x2, x1)));
    let s_for_eq2: int, int -> int = (|x1, y1| main.div(main.mul(3, main.mul(x1, x1)), main.mul(2, y1)));
    let compute_x3_int: int, int, int -> int = (|x1, x2, s| (s * s - x1 - x2 + 2 * main.secp_modulus) % main.secp_modulus);
    let compute_y3_int: int, int, int, int -> int = (|x1, y1, x3, s| (s * (x1 - x3 + main.secp_modulus) - y1 + main.secp_modulus) % main.secp_modulus);
    let compute_q0_for_eq1: int, int, int, int, int -> int = (|x1, y1, x2, y2, s| -(s * x2 - s * x1 - y2 + y1) / main.secp_modulus + (1 << 258));
    let compute_q0_for_eq2: int, int, int -> int = (|x1, y1, s| -(2 * s * y1 - 3 * x1 * x1) / main.secp_modulus + (1 << 258));
    let compute_q1: int, int, int, int -> int = (|x1, x2, x3, s| -(s * s - x1 - x2 - x3) / main.secp_modulus + (1 << 258));
    let compute_q2: int, int, int, int, int -> int = (|x1, y1, x3, y3, s| -(s * x1 - s * x3 - y1 - y3) / main.secp_modulus + (1 << 258));
    let limbs_to_int: expr[] -> int = (query |limbs| std::array::sum::<int>(std::array::map_enumerated::<expr, int>(limbs, (|i, limb| std::convert::int::<fe>(std::prover::eval(limb)) << i * 16))));
    let x1_int: -> int = (query || main.limbs_to_int(main.x1));
    let y1_int: -> int = (query || main.limbs_to_int(main.y1));
    let x2_int: -> int = (query || main.limbs_to_int(main.x2));
    let y2_int: -> int = (query || main.limbs_to_int(main.y2));
    let x3_int: -> int = (query || main.limbs_to_int(main.x3));
    let y3_int: -> int = (query || main.limbs_to_int(main.y3));
    let s_int: -> int = (query || main.limbs_to_int(main.s));
    let eq1_active: -> bool = (query || std::prover::eval(main.selEq[1]) == 1);
    let get_operation: -> string = (query || match std::prover::eval(main.operation_id) {
        1 => "affine_256",
        10 => "ec_add",
        12 => "ec_double",
        _ => std::check::panic("Unknown operation"),
    });
    let is_ec_operation: -> int = (query || match main.get_operation() {
        "affine_256" => 0,
        "ec_add" => 1,
        "ec_double" => 1,
    });
    let s_hint: -> int = (query || match main.get_operation() {
        "affine_256" => 0,
        "ec_add" => main.s_for_eq1(main.x1_int(), main.y1_int(), main.x2_int(), main.y2_int()),
        "ec_double" => main.s_for_eq2(main.x1_int(), main.y1_int()),
    });
    let q0_hint: -> int = (query || match main.get_operation() {
        "affine_256" => 0,
        "ec_add" => main.compute_q0_for_eq1(main.x1_int(), main.y1_int(), main.x2_int(), main.y2_int(), main.s_int()),
        "ec_double" => main.compute_q0_for_eq2(main.x1_int(), main.y1_int(), main.s_int()),
    });
    let q1_hint: -> int = (query || if main.is_ec_operation() == 1 {
        let x1: int = main.x1_int();
        let x2: int = main.x2_int();
        let s: int = main.s_int();
        main.compute_q1(x1, x2, main.compute_x3_int(x1, x2, s), s)
    } else { 0 });
    let q2_hint: -> int = (query || if main.is_ec_operation() == 1 {
        let x1: int = main.x1_int();
        let x2: int = main.x2_int();
        let y1: int = main.y1_int();
        let s: int = main.s_int();
        let x3: int = main.compute_x3_int(x1, x2, s);
        let y3: int = main.compute_y3_int(x1, y1, x3, s);
        main.compute_q2(x1, y1, x3, y3, s)
    } else { 0 });
    let quotient_hint: -> int = (query || {
        let y2: int = main.y2_int();
        let y3: int = main.y3_int();
        let x1: int = main.x1_int();
        let dividend: int = (y2 << 256) + y3;
        let quotient: int = dividend / x1;
        quotient
    });
    let remainder_hint: -> int = (query || {
        let y2: int = main.y2_int();
        let y3: int = main.y3_int();
        let x1: int = main.x1_int();
        let dividend: int = (y2 << 256) + y3;
        let remainder: int = dividend % x1;
        remainder
    });
    let hint_if_eq0: (-> int), int -> std::prelude::Query = (query |f, limb| match main.is_ec_operation() {
        0 => std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(f(), limb))),
        _ => std::prelude::Query::None,
    });
    col witness y1[16];
    let garbage: ()[] = std::array::new::<()>(16, (|i| std::prelude::set_hint(main.y1[i], (|_| main.hint_if_eq0(main.quotient_hint, i)))));
    col witness x2_0;
    std::prelude::set_hint(main.x2_0, (query |i| main.hint_if_eq0(main.remainder_hint, 0)));
    col witness x2_1;
    std::prelude::set_hint(main.x2_1, (query |i| main.hint_if_eq0(main.remainder_hint, 1)));
    col witness x2_2;
    std::prelude::set_hint(main.x2_2, (query |i| main.hint_if_eq0(main.remainder_hint, 2)));
    col witness x2_3;
    std::prelude::set_hint(main.x2_3, (query |i| main.hint_if_eq0(main.remainder_hint, 3)));
    col witness x2_4;
    std::prelude::set_hint(main.x2_4, (query |i| main.hint_if_eq0(main.remainder_hint, 4)));
    col witness x2_5;
    std::prelude::set_hint(main.x2_5, (query |i| main.hint_if_eq0(main.remainder_hint, 5)));
    col witness x2_6;
    std::prelude::set_hint(main.x2_6, (query |i| main.hint_if_eq0(main.remainder_hint, 6)));
    col witness x2_7;
    std::prelude::set_hint(main.x2_7, (query |i| main.hint_if_eq0(main.remainder_hint, 7)));
    col witness x2_8;
    std::prelude::set_hint(main.x2_8, (query |i| main.hint_if_eq0(main.remainder_hint, 8)));
    col witness x2_9;
    std::prelude::set_hint(main.x2_9, (query |i| main.hint_if_eq0(main.remainder_hint, 9)));
    col witness x2_10;
    std::prelude::set_hint(main.x2_10, (query |i| main.hint_if_eq0(main.remainder_hint, 10)));
    col witness x2_11;
    std::prelude::set_hint(main.x2_11, (query |i| main.hint_if_eq0(main.remainder_hint, 11)));
    col witness x2_12;
    std::prelude::set_hint(main.x2_12, (query |i| main.hint_if_eq0(main.remainder_hint, 12)));
    col witness x2_13;
    std::prelude::set_hint(main.x2_13, (query |i| main.hint_if_eq0(main.remainder_hint, 13)));
    col witness x2_14;
    std::prelude::set_hint(main.x2_14, (query |i| main.hint_if_eq0(main.remainder_hint, 14)));
    col witness x2_15;
    std::prelude::set_hint(main.x2_15, (query |i| main.hint_if_eq0(main.remainder_hint, 15)));
    let x2: expr[] = [main.x2_0, main.x2_1, main.x2_2, main.x2_3, main.x2_4, main.x2_5, main.x2_6, main.x2_7, main.x2_8, main.x2_9, main.x2_10, main.x2_11, main.x2_12, main.x2_13, main.x2_14, main.x2_15];
    col witness s_0;
    std::prelude::set_hint(main.s_0, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.s_hint(), 0)))));
    col witness s_1;
    std::prelude::set_hint(main.s_1, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.s_hint(), 1)))));
    col witness s_2;
    std::prelude::set_hint(main.s_2, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.s_hint(), 2)))));
    col witness s_3;
    std::prelude::set_hint(main.s_3, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.s_hint(), 3)))));
    col witness s_4;
    std::prelude::set_hint(main.s_4, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.s_hint(), 4)))));
    col witness s_5;
    std::prelude::set_hint(main.s_5, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.s_hint(), 5)))));
    col witness s_6;
    std::prelude::set_hint(main.s_6, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.s_hint(), 6)))));
    col witness s_7;
    std::prelude::set_hint(main.s_7, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.s_hint(), 7)))));
    col witness s_8;
    std::prelude::set_hint(main.s_8, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.s_hint(), 8)))));
    col witness s_9;
    std::prelude::set_hint(main.s_9, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.s_hint(), 9)))));
    col witness s_10;
    std::prelude::set_hint(main.s_10, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.s_hint(), 10)))));
    col witness s_11;
    std::prelude::set_hint(main.s_11, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.s_hint(), 11)))));
    col witness s_12;
    std::prelude::set_hint(main.s_12, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.s_hint(), 12)))));
    col witness s_13;
    std::prelude::set_hint(main.s_13, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.s_hint(), 13)))));
    col witness s_14;
    std::prelude::set_hint(main.s_14, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.s_hint(), 14)))));
    col witness s_15;
    std::prelude::set_hint(main.s_15, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.s_hint(), 15)))));
    let s: expr[] = [main.s_0, main.s_1, main.s_2, main.s_3, main.s_4, main.s_5, main.s_6, main.s_7, main.s_8, main.s_9, main.s_10, main.s_11, main.s_12, main.s_13, main.s_14, main.s_15];
    col witness q0_0;
    std::prelude::set_hint(main.q0_0, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q0_hint(), 0)))));
    col witness q0_1;
    std::prelude::set_hint(main.q0_1, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q0_hint(), 1)))));
    col witness q0_2;
    std::prelude::set_hint(main.q0_2, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q0_hint(), 2)))));
    col witness q0_3;
    std::prelude::set_hint(main.q0_3, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q0_hint(), 3)))));
    col witness q0_4;
    std::prelude::set_hint(main.q0_4, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q0_hint(), 4)))));
    col witness q0_5;
    std::prelude::set_hint(main.q0_5, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q0_hint(), 5)))));
    col witness q0_6;
    std::prelude::set_hint(main.q0_6, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q0_hint(), 6)))));
    col witness q0_7;
    std::prelude::set_hint(main.q0_7, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q0_hint(), 7)))));
    col witness q0_8;
    std::prelude::set_hint(main.q0_8, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q0_hint(), 8)))));
    col witness q0_9;
    std::prelude::set_hint(main.q0_9, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q0_hint(), 9)))));
    col witness q0_10;
    std::prelude::set_hint(main.q0_10, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q0_hint(), 10)))));
    col witness q0_11;
    std::prelude::set_hint(main.q0_11, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q0_hint(), 11)))));
    col witness q0_12;
    std::prelude::set_hint(main.q0_12, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q0_hint(), 12)))));
    col witness q0_13;
    std::prelude::set_hint(main.q0_13, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q0_hint(), 13)))));
    col witness q0_14;
    std::prelude::set_hint(main.q0_14, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q0_hint(), 14)))));
    col witness q0_15;
    std::prelude::set_hint(main.q0_15, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q0_hint(), 15)))));
    let q0: expr[] = [main.q0_0, main.q0_1, main.q0_2, main.q0_3, main.q0_4, main.q0_5, main.q0_6, main.q0_7, main.q0_8, main.q0_9, main.q0_10, main.q0_11, main.q0_12, main.q0_13, main.q0_14, main.q0_15];
    col witness q1_0;
    std::prelude::set_hint(main.q1_0, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q1_hint(), 0)))));
    col witness q1_1;
    std::prelude::set_hint(main.q1_1, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q1_hint(), 1)))));
    col witness q1_2;
    std::prelude::set_hint(main.q1_2, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q1_hint(), 2)))));
    col witness q1_3;
    std::prelude::set_hint(main.q1_3, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q1_hint(), 3)))));
    col witness q1_4;
    std::prelude::set_hint(main.q1_4, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q1_hint(), 4)))));
    col witness q1_5;
    std::prelude::set_hint(main.q1_5, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q1_hint(), 5)))));
    col witness q1_6;
    std::prelude::set_hint(main.q1_6, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q1_hint(), 6)))));
    col witness q1_7;
    std::prelude::set_hint(main.q1_7, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q1_hint(), 7)))));
    col witness q1_8;
    std::prelude::set_hint(main.q1_8, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q1_hint(), 8)))));
    col witness q1_9;
    std::prelude::set_hint(main.q1_9, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q1_hint(), 9)))));
    col witness q1_10;
    std::prelude::set_hint(main.q1_10, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q1_hint(), 10)))));
    col witness q1_11;
    std::prelude::set_hint(main.q1_11, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q1_hint(), 11)))));
    col witness q1_12;
    std::prelude::set_hint(main.q1_12, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q1_hint(), 12)))));
    col witness q1_13;
    std::prelude::set_hint(main.q1_13, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q1_hint(), 13)))));
    col witness q1_14;
    std::prelude::set_hint(main.q1_14, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q1_hint(), 14)))));
    col witness q1_15;
    std::prelude::set_hint(main.q1_15, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q1_hint(), 15)))));
    let q1: expr[] = [main.q1_0, main.q1_1, main.q1_2, main.q1_3, main.q1_4, main.q1_5, main.q1_6, main.q1_7, main.q1_8, main.q1_9, main.q1_10, main.q1_11, main.q1_12, main.q1_13, main.q1_14, main.q1_15];
    col witness q2_0;
    std::prelude::set_hint(main.q2_0, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q2_hint(), 0)))));
    col witness q2_1;
    std::prelude::set_hint(main.q2_1, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q2_hint(), 1)))));
    col witness q2_2;
    std::prelude::set_hint(main.q2_2, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q2_hint(), 2)))));
    col witness q2_3;
    std::prelude::set_hint(main.q2_3, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q2_hint(), 3)))));
    col witness q2_4;
    std::prelude::set_hint(main.q2_4, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q2_hint(), 4)))));
    col witness q2_5;
    std::prelude::set_hint(main.q2_5, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q2_hint(), 5)))));
    col witness q2_6;
    std::prelude::set_hint(main.q2_6, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q2_hint(), 6)))));
    col witness q2_7;
    std::prelude::set_hint(main.q2_7, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q2_hint(), 7)))));
    col witness q2_8;
    std::prelude::set_hint(main.q2_8, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q2_hint(), 8)))));
    col witness q2_9;
    std::prelude::set_hint(main.q2_9, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q2_hint(), 9)))));
    col witness q2_10;
    std::prelude::set_hint(main.q2_10, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q2_hint(), 10)))));
    col witness q2_11;
    std::prelude::set_hint(main.q2_11, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q2_hint(), 11)))));
    col witness q2_12;
    std::prelude::set_hint(main.q2_12, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q2_hint(), 12)))));
    col witness q2_13;
    std::prelude::set_hint(main.q2_13, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q2_hint(), 13)))));
    col witness q2_14;
    std::prelude::set_hint(main.q2_14, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q2_hint(), 14)))));
    col witness q2_15;
    std::prelude::set_hint(main.q2_15, (query |i| std::prelude::Query::Hint(std::convert::fe::<int>(main.select_limb(main.q2_hint(), 15)))));
    let q2: expr[] = [main.q2_0, main.q2_1, main.q2_2, main.q2_3, main.q2_4, main.q2_5, main.q2_6, main.q2_7, main.q2_8, main.q2_9, main.q2_10, main.q2_11, main.q2_12, main.q2_13, main.q2_14, main.q2_15];
    let combine: expr[] -> expr[] = (|x| std::array::new::<expr>(std::array::len::<expr>(x) / 2, (|i| x[2 * i + 1] * 2 ** 16 + x[2 * i])));
    col x1c[8] = [main.x1[1] * 65536 + main.x1[0], main.x1[3] * 65536 + main.x1[2], main.x1[5] * 65536 + main.x1[4], main.x1[7] * 65536 + main.x1[6], main.x1[9] * 65536 + main.x1[8], main.x1[11] * 65536 + main.x1[10], main.x1[13] * 65536 + main.x1[12], main.x1[15] * 65536 + main.x1[14]];
    col y1c[8] = [main.y1[1] * 65536 + main.y1[0], main.y1[3] * 65536 + main.y1[2], main.y1[5] * 65536 + main.y1[4], main.y1[7] * 65536 + main.y1[6], main.y1[9] * 65536 + main.y1[8], main.y1[11] * 65536 + main.y1[10], main.y1[13] * 65536 + main.y1[12], main.y1[15] * 65536 + main.y1[14]];
    col x2c[8] = [main.x2_1 * 65536 + main.x2_0, main.x2_3 * 65536 + main.x2_2, main.x2_5 * 65536 + main.x2_4, main.x2_7 * 65536 + main.x2_6, main.x2_9 * 65536 + main.x2_8, main.x2_11 * 65536 + main.x2_10, main.x2_13 * 65536 + main.x2_12, main.x2_15 * 65536 + main.x2_14];
    col y2c[8] = [main.y2[1] * 65536 + main.y2[0], main.y2[3] * 65536 + main.y2[2], main.y2[5] * 65536 + main.y2[4], main.y2[7] * 65536 + main.y2[6], main.y2[9] * 65536 + main.y2[8], main.y2[11] * 65536 + main.y2[10], main.y2[13] * 65536 + main.y2[12], main.y2[15] * 65536 + main.y2[14]];
    col x3c[8] = [main.x3[1] * 65536 + main.x3[0], main.x3[3] * 65536 + main.x3[2], main.x3[5] * 65536 + main.x3[4], main.x3[7] * 65536 + main.x3[6], main.x3[9] * 65536 + main.x3[8], main.x3[11] * 65536 + main.x3[10], main.x3[13] * 65536 + main.x3[12], main.x3[15] * 65536 + main.x3[14]];
    col y3c[8] = [main.y3[1] * 65536 + main.y3[0], main.y3[3] * 65536 + main.y3[2], main.y3[5] * 65536 + main.y3[4], main.y3[7] * 65536 + main.y3[6], main.y3[9] * 65536 + main.y3[8], main.y3[11] * 65536 + main.y3[10], main.y3[13] * 65536 + main.y3[12], main.y3[15] * 65536 + main.y3[14]];
    let CLK32: col[32] = std::array::new::<(int -> fe)>(32, (|i| (|row| if row % 32 == i { 1 } else { 0 })));
    let CLK32_31: expr = main.CLK32[31];
    let fixed_inside_32_block: expr -> std::prelude::Constr = (|e| std::utils::unchanged_until(e, main.CLK32[31]));
    (main.x1[0]' - main.x1[0]) * (1 - main.CLK32[31]) = 0;
    (main.x1[1]' - main.x1[1]) * (1 - main.CLK32[31]) = 0;
    (main.x1[2]' - main.x1[2]) * (1 - main.CLK32[31]) = 0;
    (main.x1[3]' - main.x1[3]) * (1 - main.CLK32[31]) = 0;
    (main.x1[4]' - main.x1[4]) * (1 - main.CLK32[31]) = 0;
    (main.x1[5]' - main.x1[5]) * (1 - main.CLK32[31]) = 0;
    (main.x1[6]' - main.x1[6]) * (1 - main.CLK32[31]) = 0;
    (main.x1[7]' - main.x1[7]) * (1 - main.CLK32[31]) = 0;
    (main.x1[8]' - main.x1[8]) * (1 - main.CLK32[31]) = 0;
    (main.x1[9]' - main.x1[9]) * (1 - main.CLK32[31]) = 0;
    (main.x1[10]' - main.x1[10]) * (1 - main.CLK32[31]) = 0;
    (main.x1[11]' - main.x1[11]) * (1 - main.CLK32[31]) = 0;
    (main.x1[12]' - main.x1[12]) * (1 - main.CLK32[31]) = 0;
    (main.x1[13]' - main.x1[13]) * (1 - main.CLK32[31]) = 0;
    (main.x1[14]' - main.x1[14]) * (1 - main.CLK32[31]) = 0;
    (main.x1[15]' - main.x1[15]) * (1 - main.CLK32[31]) = 0;
    (main.y1[0]' - main.y1[0]) * (1 - main.CLK32[31]) = 0;
    (main.y1[1]' - main.y1[1]) * (1 - main.CLK32[31]) = 0;
    (main.y1[2]' - main.y1[2]) * (1 - main.CLK32[31]) = 0;
    (main.y1[3]' - main.y1[3]) * (1 - main.CLK32[31]) = 0;
    (main.y1[4]' - main.y1[4]) * (1 - main.CLK32[31]) = 0;
    (main.y1[5]' - main.y1[5]) * (1 - main.CLK32[31]) = 0;
    (main.y1[6]' - main.y1[6]) * (1 - main.CLK32[31]) = 0;
    (main.y1[7]' - main.y1[7]) * (1 - main.CLK32[31]) = 0;
    (main.y1[8]' - main.y1[8]) * (1 - main.CLK32[31]) = 0;
    (main.y1[9]' - main.y1[9]) * (1 - main.CLK32[31]) = 0;
    (main.y1[10]' - main.y1[10]) * (1 - main.CLK32[31]) = 0;
    (main.y1[11]' - main.y1[11]) * (1 - main.CLK32[31]) = 0;
    (main.y1[12]' - main.y1[12]) * (1 - main.CLK32[31]) = 0;
    (main.y1[13]' - main.y1[13]) * (1 - main.CLK32[31]) = 0;
    (main.y1[14]' - main.y1[14]) * (1 - main.CLK32[31]) = 0;
    (main.y1[15]' - main.y1[15]) * (1 - main.CLK32[31]) = 0;
    (main.x2_0' - main.x2_0) * (1 - main.CLK32[31]) = 0;
    (main.x2_1' - main.x2_1) * (1 - main.CLK32[31]) = 0;
    (main.x2_2' - main.x2_2) * (1 - main.CLK32[31]) = 0;
    (main.x2_3' - main.x2_3) * (1 - main.CLK32[31]) = 0;
    (main.x2_4' - main.x2_4) * (1 - main.CLK32[31]) = 0;
    (main.x2_5' - main.x2_5) * (1 - main.CLK32[31]) = 0;
    (main.x2_6' - main.x2_6) * (1 - main.CLK32[31]) = 0;
    (main.x2_7' - main.x2_7) * (1 - main.CLK32[31]) = 0;
    (main.x2_8' - main.x2_8) * (1 - main.CLK32[31]) = 0;
    (main.x2_9' - main.x2_9) * (1 - main.CLK32[31]) = 0;
    (main.x2_10' - main.x2_10) * (1 - main.CLK32[31]) = 0;
    (main.x2_11' - main.x2_11) * (1 - main.CLK32[31]) = 0;
    (main.x2_12' - main.x2_12) * (1 - main.CLK32[31]) = 0;
    (main.x2_13' - main.x2_13) * (1 - main.CLK32[31]) = 0;
    (main.x2_14' - main.x2_14) * (1 - main.CLK32[31]) = 0;
    (main.x2_15' - main.x2_15) * (1 - main.CLK32[31]) = 0;
    (main.y2[0]' - main.y2[0]) * (1 - main.CLK32[31]) = 0;
    (main.y2[1]' - main.y2[1]) * (1 - main.CLK32[31]) = 0;
    (main.y2[2]' - main.y2[2]) * (1 - main.CLK32[31]) = 0;
    (main.y2[3]' - main.y2[3]) * (1 - main.CLK32[31]) = 0;
    (main.y2[4]' - main.y2[4]) * (1 - main.CLK32[31]) = 0;
    (main.y2[5]' - main.y2[5]) * (1 - main.CLK32[31]) = 0;
    (main.y2[6]' - main.y2[6]) * (1 - main.CLK32[31]) = 0;
    (main.y2[7]' - main.y2[7]) * (1 - main.CLK32[31]) = 0;
    (main.y2[8]' - main.y2[8]) * (1 - main.CLK32[31]) = 0;
    (main.y2[9]' - main.y2[9]) * (1 - main.CLK32[31]) = 0;
    (main.y2[10]' - main.y2[10]) * (1 - main.CLK32[31]) = 0;
    (main.y2[11]' - main.y2[11]) * (1 - main.CLK32[31]) = 0;
    (main.y2[12]' - main.y2[12]) * (1 - main.CLK32[31]) = 0;
    (main.y2[13]' - main.y2[13]) * (1 - main.CLK32[31]) = 0;
    (main.y2[14]' - main.y2[14]) * (1 - main.CLK32[31]) = 0;
    (main.y2[15]' - main.y2[15]) * (1 - main.CLK32[31]) = 0;
    (main.x3[0]' - main.x3[0]) * (1 - main.CLK32[31]) = 0;
    (main.x3[1]' - main.x3[1]) * (1 - main.CLK32[31]) = 0;
    (main.x3[2]' - main.x3[2]) * (1 - main.CLK32[31]) = 0;
    (main.x3[3]' - main.x3[3]) * (1 - main.CLK32[31]) = 0;
    (main.x3[4]' - main.x3[4]) * (1 - main.CLK32[31]) = 0;
    (main.x3[5]' - main.x3[5]) * (1 - main.CLK32[31]) = 0;
    (main.x3[6]' - main.x3[6]) * (1 - main.CLK32[31]) = 0;
    (main.x3[7]' - main.x3[7]) * (1 - main.CLK32[31]) = 0;
    (main.x3[8]' - main.x3[8]) * (1 - main.CLK32[31]) = 0;
    (main.x3[9]' - main.x3[9]) * (1 - main.CLK32[31]) = 0;
    (main.x3[10]' - main.x3[10]) * (1 - main.CLK32[31]) = 0;
    (main.x3[11]' - main.x3[11]) * (1 - main.CLK32[31]) = 0;
    (main.x3[12]' - main.x3[12]) * (1 - main.CLK32[31]) = 0;
    (main.x3[13]' - main.x3[13]) * (1 - main.CLK32[31]) = 0;
    (main.x3[14]' - main.x3[14]) * (1 - main.CLK32[31]) = 0;
    (main.x3[15]' - main.x3[15]) * (1 - main.CLK32[31]) = 0;
    (main.y3[0]' - main.y3[0]) * (1 - main.CLK32[31]) = 0;
    (main.y3[1]' - main.y3[1]) * (1 - main.CLK32[31]) = 0;
    (main.y3[2]' - main.y3[2]) * (1 - main.CLK32[31]) = 0;
    (main.y3[3]' - main.y3[3]) * (1 - main.CLK32[31]) = 0;
    (main.y3[4]' - main.y3[4]) * (1 - main.CLK32[31]) = 0;
    (main.y3[5]' - main.y3[5]) * (1 - main.CLK32[31]) = 0;
    (main.y3[6]' - main.y3[6]) * (1 - main.CLK32[31]) = 0;
    (main.y3[7]' - main.y3[7]) * (1 - main.CLK32[31]) = 0;
    (main.y3[8]' - main.y3[8]) * (1 - main.CLK32[31]) = 0;
    (main.y3[9]' - main.y3[9]) * (1 - main.CLK32[31]) = 0;
    (main.y3[10]' - main.y3[10]) * (1 - main.CLK32[31]) = 0;
    (main.y3[11]' - main.y3[11]) * (1 - main.CLK32[31]) = 0;
    (main.y3[12]' - main.y3[12]) * (1 - main.CLK32[31]) = 0;
    (main.y3[13]' - main.y3[13]) * (1 - main.CLK32[31]) = 0;
    (main.y3[14]' - main.y3[14]) * (1 - main.CLK32[31]) = 0;
    (main.y3[15]' - main.y3[15]) * (1 - main.CLK32[31]) = 0;
    (main.s_0' - main.s_0) * (1 - main.CLK32[31]) = 0;
    (main.s_1' - main.s_1) * (1 - main.CLK32[31]) = 0;
    (main.s_2' - main.s_2) * (1 - main.CLK32[31]) = 0;
    (main.s_3' - main.s_3) * (1 - main.CLK32[31]) = 0;
    (main.s_4' - main.s_4) * (1 - main.CLK32[31]) = 0;
    (main.s_5' - main.s_5) * (1 - main.CLK32[31]) = 0;
    (main.s_6' - main.s_6) * (1 - main.CLK32[31]) = 0;
    (main.s_7' - main.s_7) * (1 - main.CLK32[31]) = 0;
    (main.s_8' - main.s_8) * (1 - main.CLK32[31]) = 0;
    (main.s_9' - main.s_9) * (1 - main.CLK32[31]) = 0;
    (main.s_10' - main.s_10) * (1 - main.CLK32[31]) = 0;
    (main.s_11' - main.s_11) * (1 - main.CLK32[31]) = 0;
    (main.s_12' - main.s_12) * (1 - main.CLK32[31]) = 0;
    (main.s_13' - main.s_13) * (1 - main.CLK32[31]) = 0;
    (main.s_14' - main.s_14) * (1 - main.CLK32[31]) = 0;
    (main.s_15' - main.s_15) * (1 - main.CLK32[31]) = 0;
    (main.q0_0' - main.q0_0) * (1 - main.CLK32[31]) = 0;
    (main.q0_1' - main.q0_1) * (1 - main.CLK32[31]) = 0;
    (main.q0_2' - main.q0_2) * (1 - main.CLK32[31]) = 0;
    (main.q0_3' - main.q0_3) * (1 - main.CLK32[31]) = 0;
    (main.q0_4' - main.q0_4) * (1 - main.CLK32[31]) = 0;
    (main.q0_5' - main.q0_5) * (1 - main.CLK32[31]) = 0;
    (main.q0_6' - main.q0_6) * (1 - main.CLK32[31]) = 0;
    (main.q0_7' - main.q0_7) * (1 - main.CLK32[31]) = 0;
    (main.q0_8' - main.q0_8) * (1 - main.CLK32[31]) = 0;
    (main.q0_9' - main.q0_9) * (1 - main.CLK32[31]) = 0;
    (main.q0_10' - main.q0_10) * (1 - main.CLK32[31]) = 0;
    (main.q0_11' - main.q0_11) * (1 - main.CLK32[31]) = 0;
    (main.q0_12' - main.q0_12) * (1 - main.CLK32[31]) = 0;
    (main.q0_13' - main.q0_13) * (1 - main.CLK32[31]) = 0;
    (main.q0_14' - main.q0_14) * (1 - main.CLK32[31]) = 0;
    (main.q0_15' - main.q0_15) * (1 - main.CLK32[31]) = 0;
    (main.q1_0' - main.q1_0) * (1 - main.CLK32[31]) = 0;
    (main.q1_1' - main.q1_1) * (1 - main.CLK32[31]) = 0;
    (main.q1_2' - main.q1_2) * (1 - main.CLK32[31]) = 0;
    (main.q1_3' - main.q1_3) * (1 - main.CLK32[31]) = 0;
    (main.q1_4' - main.q1_4) * (1 - main.CLK32[31]) = 0;
    (main.q1_5' - main.q1_5) * (1 - main.CLK32[31]) = 0;
    (main.q1_6' - main.q1_6) * (1 - main.CLK32[31]) = 0;
    (main.q1_7' - main.q1_7) * (1 - main.CLK32[31]) = 0;
    (main.q1_8' - main.q1_8) * (1 - main.CLK32[31]) = 0;
    (main.q1_9' - main.q1_9) * (1 - main.CLK32[31]) = 0;
    (main.q1_10' - main.q1_10) * (1 - main.CLK32[31]) = 0;
    (main.q1_11' - main.q1_11) * (1 - main.CLK32[31]) = 0;
    (main.q1_12' - main.q1_12) * (1 - main.CLK32[31]) = 0;
    (main.q1_13' - main.q1_13) * (1 - main.CLK32[31]) = 0;
    (main.q1_14' - main.q1_14) * (1 - main.CLK32[31]) = 0;
    (main.q1_15' - main.q1_15) * (1 - main.CLK32[31]) = 0;
    (main.q2_0' - main.q2_0) * (1 - main.CLK32[31]) = 0;
    (main.q2_1' - main.q2_1) * (1 - main.CLK32[31]) = 0;
    (main.q2_2' - main.q2_2) * (1 - main.CLK32[31]) = 0;
    (main.q2_3' - main.q2_3) * (1 - main.CLK32[31]) = 0;
    (main.q2_4' - main.q2_4) * (1 - main.CLK32[31]) = 0;
    (main.q2_5' - main.q2_5) * (1 - main.CLK32[31]) = 0;
    (main.q2_6' - main.q2_6) * (1 - main.CLK32[31]) = 0;
    (main.q2_7' - main.q2_7) * (1 - main.CLK32[31]) = 0;
    (main.q2_8' - main.q2_8) * (1 - main.CLK32[31]) = 0;
    (main.q2_9' - main.q2_9) * (1 - main.CLK32[31]) = 0;
    (main.q2_10' - main.q2_10) * (1 - main.CLK32[31]) = 0;
    (main.q2_11' - main.q2_11) * (1 - main.CLK32[31]) = 0;
    (main.q2_12' - main.q2_12) * (1 - main.CLK32[31]) = 0;
    (main.q2_13' - main.q2_13) * (1 - main.CLK32[31]) = 0;
    (main.q2_14' - main.q2_14) * (1 - main.CLK32[31]) = 0;
    (main.q2_15' - main.q2_15) * (1 - main.CLK32[31]) = 0;
    col witness q0_15_high;
    col witness q0_15_low;
    col witness q1_15_high;
    col witness q1_15_low;
    col witness q2_15_high;
    col witness q2_15_low;
    (main.q0_15_high' - main.q0_15_high) * (1 - main.CLK32[31]) = 0;
    (main.q0_15_low' - main.q0_15_low) * (1 - main.CLK32[31]) = 0;
    (main.q1_15_high' - main.q1_15_high) * (1 - main.CLK32[31]) = 0;
    (main.q1_15_low' - main.q1_15_low) * (1 - main.CLK32[31]) = 0;
    (main.q2_15_high' - main.q2_15_high) * (1 - main.CLK32[31]) = 0;
    (main.q2_15_low' - main.q2_15_low) * (1 - main.CLK32[31]) = 0;
    main.q0_15 = 65536 * main.q0_15_high + main.q0_15_low;
    main.q1_15 = 65536 * main.q1_15_high + main.q1_15_low;
    main.q2_15 = 65536 * main.q2_15_high + main.q2_15_low;
    let dot_prod: int, (int -> expr), (int -> expr) -> expr = (|n, a, b| std::utils::sum::<expr>(n, (|i| a(i) * b(i))));
    let product: (int -> expr), (int -> expr) -> (int -> expr) = (|a, b| (|n| main.dot_prod(n + 1, a, (|i| b(n - i)))));
    let array_as_fun: expr[] -> (int -> expr) = (|arr| (|i| if 0 <= i && i < std::array::len::<expr>(arr) { arr[i] } else { 0 }));
    let shift_right: (int -> expr), int -> (int -> expr) = (|fn, amount| (|i| fn(i - amount)));
    let x1f: int -> expr = main.array_as_fun(main.x1);
    let y1f: int -> expr = main.array_as_fun(main.y1);
    let x2f: int -> expr = main.array_as_fun(main.x2);
    let y2f: int -> expr = main.array_as_fun(main.y2);
    let x3f: int -> expr = main.array_as_fun(main.x3);
    let y3f: int -> expr = main.array_as_fun(main.y3);
    let sf: int -> expr = main.array_as_fun(main.s);
    let q0f: int -> expr = main.array_as_fun(main.q0);
    let q1f: int -> expr = main.array_as_fun(main.q1);
    let q2f: int -> expr = main.array_as_fun(main.q2);
    let eq0: int -> expr = (|nr| main.product(main.x1f, main.y1f)(nr) + main.x2f(nr) - main.shift_right(main.y2f, 16)(nr) - main.y3f(nr));
    let p: int -> expr = (|i| std::convert::expr::<int>(main.select_limb(main.secp_modulus, i)));
    let product_with_p: (int -> expr) -> (int -> expr) = (|x| (|nr| main.product(main.p, x)(nr) - 4 * main.shift_right(main.p, 16)(nr)));
    let eq1: int -> expr = (|nr| main.product(main.sf, main.x2f)(nr) - main.product(main.sf, main.x1f)(nr) - main.y2f(nr) + main.y1f(nr) + main.product_with_p(main.q0f)(nr));
    let eq2: int -> expr = (|nr| 2 * main.product(main.sf, main.y1f)(nr) - 3 * main.product(main.x1f, main.x1f)(nr) + main.product_with_p(main.q0f)(nr));
    main.selEq[2] * (main.x1[0] - main.x2_0) = 0;
    main.selEq[2] * (main.x1[1] - main.x2_1) = 0;
    main.selEq[2] * (main.x1[2] - main.x2_2) = 0;
    main.selEq[2] * (main.x1[3] - main.x2_3) = 0;
    main.selEq[2] * (main.x1[4] - main.x2_4) = 0;
    main.selEq[2] * (main.x1[5] - main.x2_5) = 0;
    main.selEq[2] * (main.x1[6] - main.x2_6) = 0;
    main.selEq[2] * (main.x1[7] - main.x2_7) = 0;
    main.selEq[2] * (main.x1[8] - main.x2_8) = 0;
    main.selEq[2] * (main.x1[9] - main.x2_9) = 0;
    main.selEq[2] * (main.x1[10] - main.x2_10) = 0;
    main.selEq[2] * (main.x1[11] - main.x2_11) = 0;
    main.selEq[2] * (main.x1[12] - main.x2_12) = 0;
    main.selEq[2] * (main.x1[13] - main.x2_13) = 0;
    main.selEq[2] * (main.x1[14] - main.x2_14) = 0;
    main.selEq[2] * (main.x1[15] - main.x2_15) = 0;
    let eq3: int -> expr = (|nr| main.product(main.sf, main.sf)(nr) - main.x1f(nr) - main.x2f(nr) - main.x3f(nr) + main.product_with_p(main.q1f)(nr));
    let eq4: int -> expr = (|nr| main.product(main.sf, main.x1f)(nr) - main.product(main.sf, main.x3f)(nr) - main.y1f(nr) - main.y3f(nr) + main.product_with_p(main.q2f)(nr));
    col witness selEq[4];
    (main.operation_id' - main.operation_id) * (1 - main.CLK32[31]) = 0;
    main.selEq[0] * (1 - main.selEq[0]) = 0;
    main.selEq[1] * (1 - main.selEq[1]) = 0;
    main.selEq[2] * (1 - main.selEq[2]) = 0;
    main.selEq[3] * (1 - main.selEq[3]) = 0;
    0 + 1 * main.selEq[0] + 2 * main.selEq[1] + 4 * main.selEq[2] + 8 * main.selEq[3] = main.operation_id;
    col witness carry_low[3];
    col witness carry_high[3];
    let carry: expr[] = std::array::new::<expr>(3, (|i| main.carry_high[i] * 2 ** 16 + main.carry_low[i] - 2 ** 31));
    (main.carry_high[0] * 65536 + main.carry_low[0] - 2147483648) * main.CLK32[0] = 0;
    (main.carry_high[1] * 65536 + main.carry_low[1] - 2147483648) * main.CLK32[0] = 0;
    (main.carry_high[2] * 65536 + main.carry_low[2] - 2147483648) * main.CLK32[0] = 0;
    col eq0_sum = 0 + (0 + main.x1[0] * main.y1[0] + main.x2_0 - 0 - main.y3[0]) * main.CLK32[0] + (0 + main.x1[0] * main.y1[1] + main.x1[1] * main.y1[0] + main.x2_1 - 0 - main.y3[1]) * main.CLK32[1] + (0 + main.x1[0] * main.y1[2] + main.x1[1] * main.y1[1] + main.x1[2] * main.y1[0] + main.x2_2 - 0 - main.y3[2]) * main.CLK32[2] + (0 + main.x1[0] * main.y1[3] + main.x1[1] * main.y1[2] + main.x1[2] * main.y1[1] + main.x1[3] * main.y1[0] + main.x2_3 - 0 - main.y3[3]) * main.CLK32[3] + (0 + main.x1[0] * main.y1[4] + main.x1[1] * main.y1[3] + main.x1[2] * main.y1[2] + main.x1[3] * main.y1[1] + main.x1[4] * main.y1[0] + main.x2_4 - 0 - main.y3[4]) * main.CLK32[4] + (0 + main.x1[0] * main.y1[5] + main.x1[1] * main.y1[4] + main.x1[2] * main.y1[3] + main.x1[3] * main.y1[2] + main.x1[4] * main.y1[1] + main.x1[5] * main.y1[0] + main.x2_5 - 0 - main.y3[5]) * main.CLK32[5] + (0 + main.x1[0] * main.y1[6] + main.x1[1] * main.y1[5] + main.x1[2] * main.y1[4] + main.x1[3] * main.y1[3] + main.x1[4] * main.y1[2] + main.x1[5] * main.y1[1] + main.x1[6] * main.y1[0] + main.x2_6 - 0 - main.y3[6]) * main.CLK32[6] + (0 + main.x1[0] * main.y1[7] + main.x1[1] * main.y1[6] + main.x1[2] * main.y1[5] + main.x1[3] * main.y1[4] + main.x1[4] * main.y1[3] + main.x1[5] * main.y1[2] + main.x1[6] * main.y1[1] + main.x1[7] * main.y1[0] + main.x2_7 - 0 - main.y3[7]) * main.CLK32[7] + (0 + main.x1[0] * main.y1[8] + main.x1[1] * main.y1[7] + main.x1[2] * main.y1[6] + main.x1[3] * main.y1[5] + main.x1[4] * main.y1[4] + main.x1[5] * main.y1[3] + main.x1[6] * main.y1[2] + main.x1[7] * main.y1[1] + main.x1[8] * main.y1[0] + main.x2_8 - 0 - main.y3[8]) * main.CLK32[8] + (0 + main.x1[0] * main.y1[9] + main.x1[1] * main.y1[8] + main.x1[2] * main.y1[7] + main.x1[3] * main.y1[6] + main.x1[4] * main.y1[5] + main.x1[5] * main.y1[4] + main.x1[6] * main.y1[3] + main.x1[7] * main.y1[2] + main.x1[8] * main.y1[1] + main.x1[9] * main.y1[0] + main.x2_9 - 0 - main.y3[9]) * main.CLK32[9] + (0 + main.x1[0] * main.y1[10] + main.x1[1] * main.y1[9] + main.x1[2] * main.y1[8] + main.x1[3] * main.y1[7] + main.x1[4] * main.y1[6] + main.x1[5] * main.y1[5] + main.x1[6] * main.y1[4] + main.x1[7] * main.y1[3] + main.x1[8] * main.y1[2] + main.x1[9] * main.y1[1] + main.x1[10] * main.y1[0] + main.x2_10 - 0 - main.y3[10]) * main.CLK32[10] + (0 + main.x1[0] * main.y1[11] + main.x1[1] * main.y1[10] + main.x1[2] * main.y1[9] + main.x1[3] * main.y1[8] + main.x1[4] * main.y1[7] + main.x1[5] * main.y1[6] + main.x1[6] * main.y1[5] + main.x1[7] * main.y1[4] + main.x1[8] * main.y1[3] + main.x1[9] * main.y1[2] + main.x1[10] * main.y1[1] + main.x1[11] * main.y1[0] + main.x2_11 - 0 - main.y3[11]) * main.CLK32[11] + (0 + main.x1[0] * main.y1[12] + main.x1[1] * main.y1[11] + main.x1[2] * main.y1[10] + main.x1[3] * main.y1[9] + main.x1[4] * main.y1[8] + main.x1[5] * main.y1[7] + main.x1[6] * main.y1[6] + main.x1[7] * main.y1[5] + main.x1[8] * main.y1[4] + main.x1[9] * main.y1[3] + main.x1[10] * main.y1[2] + main.x1[11] * main.y1[1] + main.x1[12] * main.y1[0] + main.x2_12 - 0 - main.y3[12]) * main.CLK32[12] + (0 + main.x1[0] * main.y1[13] + main.x1[1] * main.y1[12] + main.x1[2] * main.y1[11] + main.x1[3] * main.y1[10] + main.x1[4] * main.y1[9] + main.x1[5] * main.y1[8] + main.x1[6] * main.y1[7] + main.x1[7] * main.y1[6] + main.x1[8] * main.y1[5] + main.x1[9] * main.y1[4] + main.x1[10] * main.y1[3] + main.x1[11] * main.y1[2] + main.x1[12] * main.y1[1] + main.x1[13] * main.y1[0] + main.x2_13 - 0 - main.y3[13]) * main.CLK32[13] + (0 + main.x1[0] * main.y1[14] + main.x1[1] * main.y1[13] + main.x1[2] * main.y1[12] + main.x1[3] * main.y1[11] + main.x1[4] * main.y1[10] + main.x1[5] * main.y1[9] + main.x1[6] * main.y1[8] + main.x1[7] * main.y1[7] + main.x1[8] * main.y1[6] + main.x1[9] * main.y1[5] + main.x1[10] * main.y1[4] + main.x1[11] * main.y1[3] + main.x1[12] * main.y1[2] + main.x1[13] * main.y1[1] + main.x1[14] * main.y1[0] + main.x2_14 - 0 - main.y3[14]) * main.CLK32[14] + (0 + main.x1[0] * main.y1[15] + main.x1[1] * main.y1[14] + main.x1[2] * main.y1[13] + main.x1[3] * main.y1[12] + main.x1[4] * main.y1[11] + main.x1[5] * main.y1[10] + main.x1[6] * main.y1[9] + main.x1[7] * main.y1[8] + main.x1[8] * main.y1[7] + main.x1[9] * main.y1[6] + main.x1[10] * main.y1[5] + main.x1[11] * main.y1[4] + main.x1[12] * main.y1[3] + main.x1[13] * main.y1[2] + main.x1[14] * main.y1[1] + main.x1[15] * main.y1[0] + main.x2_15 - 0 - main.y3[15]) * main.CLK32[15] + (0 + main.x1[0] * 0 + main.x1[1] * main.y1[15] + main.x1[2] * main.y1[14] + main.x1[3] * main.y1[13] + main.x1[4] * main.y1[12] + main.x1[5] * main.y1[11] + main.x1[6] * main.y1[10] + main.x1[7] * main.y1[9] + main.x1[8] * main.y1[8] + main.x1[9] * main.y1[7] + main.x1[10] * main.y1[6] + main.x1[11] * main.y1[5] + main.x1[12] * main.y1[4] + main.x1[13] * main.y1[3] + main.x1[14] * main.y1[2] + main.x1[15] * main.y1[1] + 0 * main.y1[0] + 0 - main.y2[0] - 0) * main.CLK32[16] + (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * main.y1[15] + main.x1[3] * main.y1[14] + main.x1[4] * main.y1[13] + main.x1[5] * main.y1[12] + main.x1[6] * main.y1[11] + main.x1[7] * main.y1[10] + main.x1[8] * main.y1[9] + main.x1[9] * main.y1[8] + main.x1[10] * main.y1[7] + main.x1[11] * main.y1[6] + main.x1[12] * main.y1[5] + main.x1[13] * main.y1[4] + main.x1[14] * main.y1[3] + main.x1[15] * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0] + 0 - main.y2[1] - 0) * main.CLK32[17] + (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * main.y1[15] + main.x1[4] * main.y1[14] + main.x1[5] * main.y1[13] + main.x1[6] * main.y1[12] + main.x1[7] * main.y1[11] + main.x1[8] * main.y1[10] + main.x1[9] * main.y1[9] + main.x1[10] * main.y1[8] + main.x1[11] * main.y1[7] + main.x1[12] * main.y1[6] + main.x1[13] * main.y1[5] + main.x1[14] * main.y1[4] + main.x1[15] * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0] + 0 - main.y2[2] - 0) * main.CLK32[18] + (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * main.y1[15] + main.x1[5] * main.y1[14] + main.x1[6] * main.y1[13] + main.x1[7] * main.y1[12] + main.x1[8] * main.y1[11] + main.x1[9] * main.y1[10] + main.x1[10] * main.y1[9] + main.x1[11] * main.y1[8] + main.x1[12] * main.y1[7] + main.x1[13] * main.y1[6] + main.x1[14] * main.y1[5] + main.x1[15] * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0] + 0 - main.y2[3] - 0) * main.CLK32[19] + (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * main.y1[15] + main.x1[6] * main.y1[14] + main.x1[7] * main.y1[13] + main.x1[8] * main.y1[12] + main.x1[9] * main.y1[11] + main.x1[10] * main.y1[10] + main.x1[11] * main.y1[9] + main.x1[12] * main.y1[8] + main.x1[13] * main.y1[7] + main.x1[14] * main.y1[6] + main.x1[15] * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0] + 0 - main.y2[4] - 0) * main.CLK32[20] + (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * main.y1[15] + main.x1[7] * main.y1[14] + main.x1[8] * main.y1[13] + main.x1[9] * main.y1[12] + main.x1[10] * main.y1[11] + main.x1[11] * main.y1[10] + main.x1[12] * main.y1[9] + main.x1[13] * main.y1[8] + main.x1[14] * main.y1[7] + main.x1[15] * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0] + 0 - main.y2[5] - 0) * main.CLK32[21] + (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * main.y1[15] + main.x1[8] * main.y1[14] + main.x1[9] * main.y1[13] + main.x1[10] * main.y1[12] + main.x1[11] * main.y1[11] + main.x1[12] * main.y1[10] + main.x1[13] * main.y1[9] + main.x1[14] * main.y1[8] + main.x1[15] * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0] + 0 - main.y2[6] - 0) * main.CLK32[22] + (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * 0 + main.x1[8] * main.y1[15] + main.x1[9] * main.y1[14] + main.x1[10] * main.y1[13] + main.x1[11] * main.y1[12] + main.x1[12] * main.y1[11] + main.x1[13] * main.y1[10] + main.x1[14] * main.y1[9] + main.x1[15] * main.y1[8] + 0 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0] + 0 - main.y2[7] - 0) * main.CLK32[23] + (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * 0 + main.x1[8] * 0 + main.x1[9] * main.y1[15] + main.x1[10] * main.y1[14] + main.x1[11] * main.y1[13] + main.x1[12] * main.y1[12] + main.x1[13] * main.y1[11] + main.x1[14] * main.y1[10] + main.x1[15] * main.y1[9] + 0 * main.y1[8] + 0 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0] + 0 - main.y2[8] - 0) * main.CLK32[24] + (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * 0 + main.x1[8] * 0 + main.x1[9] * 0 + main.x1[10] * main.y1[15] + main.x1[11] * main.y1[14] + main.x1[12] * main.y1[13] + main.x1[13] * main.y1[12] + main.x1[14] * main.y1[11] + main.x1[15] * main.y1[10] + 0 * main.y1[9] + 0 * main.y1[8] + 0 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0] + 0 - main.y2[9] - 0) * main.CLK32[25] + (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * 0 + main.x1[8] * 0 + main.x1[9] * 0 + main.x1[10] * 0 + main.x1[11] * main.y1[15] + main.x1[12] * main.y1[14] + main.x1[13] * main.y1[13] + main.x1[14] * main.y1[12] + main.x1[15] * main.y1[11] + 0 * main.y1[10] + 0 * main.y1[9] + 0 * main.y1[8] + 0 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0] + 0 - main.y2[10] - 0) * main.CLK32[26] + (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * 0 + main.x1[8] * 0 + main.x1[9] * 0 + main.x1[10] * 0 + main.x1[11] * 0 + main.x1[12] * main.y1[15] + main.x1[13] * main.y1[14] + main.x1[14] * main.y1[13] + main.x1[15] * main.y1[12] + 0 * main.y1[11] + 0 * main.y1[10] + 0 * main.y1[9] + 0 * main.y1[8] + 0 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0] + 0 - main.y2[11] - 0) * main.CLK32[27] + (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * 0 + main.x1[8] * 0 + main.x1[9] * 0 + main.x1[10] * 0 + main.x1[11] * 0 + main.x1[12] * 0 + main.x1[13] * main.y1[15] + main.x1[14] * main.y1[14] + main.x1[15] * main.y1[13] + 0 * main.y1[12] + 0 * main.y1[11] + 0 * main.y1[10] + 0 * main.y1[9] + 0 * main.y1[8] + 0 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0] + 0 - main.y2[12] - 0) * main.CLK32[28] + (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * 0 + main.x1[8] * 0 + main.x1[9] * 0 + main.x1[10] * 0 + main.x1[11] * 0 + main.x1[12] * 0 + main.x1[13] * 0 + main.x1[14] * main.y1[15] + main.x1[15] * main.y1[14] + 0 * main.y1[13] + 0 * main.y1[12] + 0 * main.y1[11] + 0 * main.y1[10] + 0 * main.y1[9] + 0 * main.y1[8] + 0 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0] + 0 - main.y2[13] - 0) * main.CLK32[29] + (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * 0 + main.x1[8] * 0 + main.x1[9] * 0 + main.x1[10] * 0 + main.x1[11] * 0 + main.x1[12] * 0 + main.x1[13] * 0 + main.x1[14] * 0 + main.x1[15] * main.y1[15] + 0 * main.y1[14] + 0 * main.y1[13] + 0 * main.y1[12] + 0 * main.y1[11] + 0 * main.y1[10] + 0 * main.y1[9] + 0 * main.y1[8] + 0 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0] + 0 - main.y2[14] - 0) * main.CLK32[30] + (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * 0 + main.x1[8] * 0 + main.x1[9] * 0 + main.x1[10] * 0 + main.x1[11] * 0 + main.x1[12] * 0 + main.x1[13] * 0 + main.x1[14] * 0 + main.x1[15] * 0 + 0 * main.y1[15] + 0 * main.y1[14] + 0 * main.y1[13] + 0 * main.y1[12] + 0 * main.y1[11] + 0 * main.y1[10] + 0 * main.y1[9] + 0 * main.y1[8] + 0 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0] + 0 - main.y2[15] - 0) * main.CLK32[31];
    col eq1_sum = 0 + (0 + main.s_0 * main.x2_0 - (0 + main.s_0 * main.x1[0]) - main.y2[0] + main.y1[0] + (0 + 64559 * main.q0_0 - 0)) * main.CLK32[0] + (0 + main.s_0 * main.x2_1 + main.s_1 * main.x2_0 - (0 + main.s_0 * main.x1[1] + main.s_1 * main.x1[0]) - main.y2[1] + main.y1[1] + (0 + 64559 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[1] + (0 + main.s_0 * main.x2_2 + main.s_1 * main.x2_1 + main.s_2 * main.x2_0 - (0 + main.s_0 * main.x1[2] + main.s_1 * main.x1[1] + main.s_2 * main.x1[0]) - main.y2[2] + main.y1[2] + (0 + 64559 * main.q0_2 + 65535 * main.q0_1 + 65534 * main.q0_0 - 0)) * main.CLK32[2] + (0 + main.s_0 * main.x2_3 + main.s_1 * main.x2_2 + main.s_2 * main.x2_1 + main.s_3 * main.x2_0 - (0 + main.s_0 * main.x1[3] + main.s_1 * main.x1[2] + main.s_2 * main.x1[1] + main.s_3 * main.x1[0]) - main.y2[3] + main.y1[3] + (0 + 64559 * main.q0_3 + 65535 * main.q0_2 + 65534 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[3] + (0 + main.s_0 * main.x2_4 + main.s_1 * main.x2_3 + main.s_2 * main.x2_2 + main.s_3 * main.x2_1 + main.s_4 * main.x2_0 - (0 + main.s_0 * main.x1[4] + main.s_1 * main.x1[3] + main.s_2 * main.x1[2] + main.s_3 * main.x1[1] + main.s_4 * main.x1[0]) - main.y2[4] + main.y1[4] + (0 + 64559 * main.q0_4 + 65535 * main.q0_3 + 65534 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[4] + (0 + main.s_0 * main.x2_5 + main.s_1 * main.x2_4 + main.s_2 * main.x2_3 + main.s_3 * main.x2_2 + main.s_4 * main.x2_1 + main.s_5 * main.x2_0 - (0 + main.s_0 * main.x1[5] + main.s_1 * main.x1[4] + main.s_2 * main.x1[3] + main.s_3 * main.x1[2] + main.s_4 * main.x1[1] + main.s_5 * main.x1[0]) - main.y2[5] + main.y1[5] + (0 + 64559 * main.q0_5 + 65535 * main.q0_4 + 65534 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[5] + (0 + main.s_0 * main.x2_6 + main.s_1 * main.x2_5 + main.s_2 * main.x2_4 + main.s_3 * main.x2_3 + main.s_4 * main.x2_2 + main.s_5 * main.x2_1 + main.s_6 * main.x2_0 - (0 + main.s_0 * main.x1[6] + main.s_1 * main.x1[5] + main.s_2 * main.x1[4] + main.s_3 * main.x1[3] + main.s_4 * main.x1[2] + main.s_5 * main.x1[1] + main.s_6 * main.x1[0]) - main.y2[6] + main.y1[6] + (0 + 64559 * main.q0_6 + 65535 * main.q0_5 + 65534 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[6] + (0 + main.s_0 * main.x2_7 + main.s_1 * main.x2_6 + main.s_2 * main.x2_5 + main.s_3 * main.x2_4 + main.s_4 * main.x2_3 + main.s_5 * main.x2_2 + main.s_6 * main.x2_1 + main.s_7 * main.x2_0 - (0 + main.s_0 * main.x1[7] + main.s_1 * main.x1[6] + main.s_2 * main.x1[5] + main.s_3 * main.x1[4] + main.s_4 * main.x1[3] + main.s_5 * main.x1[2] + main.s_6 * main.x1[1] + main.s_7 * main.x1[0]) - main.y2[7] + main.y1[7] + (0 + 64559 * main.q0_7 + 65535 * main.q0_6 + 65534 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[7] + (0 + main.s_0 * main.x2_8 + main.s_1 * main.x2_7 + main.s_2 * main.x2_6 + main.s_3 * main.x2_5 + main.s_4 * main.x2_4 + main.s_5 * main.x2_3 + main.s_6 * main.x2_2 + main.s_7 * main.x2_1 + main.s_8 * main.x2_0 - (0 + main.s_0 * main.x1[8] + main.s_1 * main.x1[7] + main.s_2 * main.x1[6] + main.s_3 * main.x1[5] + main.s_4 * main.x1[4] + main.s_5 * main.x1[3] + main.s_6 * main.x1[2] + main.s_7 * main.x1[1] + main.s_8 * main.x1[0]) - main.y2[8] + main.y1[8] + (0 + 64559 * main.q0_8 + 65535 * main.q0_7 + 65534 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[8] + (0 + main.s_0 * main.x2_9 + main.s_1 * main.x2_8 + main.s_2 * main.x2_7 + main.s_3 * main.x2_6 + main.s_4 * main.x2_5 + main.s_5 * main.x2_4 + main.s_6 * main.x2_3 + main.s_7 * main.x2_2 + main.s_8 * main.x2_1 + main.s_9 * main.x2_0 - (0 + main.s_0 * main.x1[9] + main.s_1 * main.x1[8] + main.s_2 * main.x1[7] + main.s_3 * main.x1[6] + main.s_4 * main.x1[5] + main.s_5 * main.x1[4] + main.s_6 * main.x1[3] + main.s_7 * main.x1[2] + main.s_8 * main.x1[1] + main.s_9 * main.x1[0]) - main.y2[9] + main.y1[9] + (0 + 64559 * main.q0_9 + 65535 * main.q0_8 + 65534 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[9] + (0 + main.s_0 * main.x2_10 + main.s_1 * main.x2_9 + main.s_2 * main.x2_8 + main.s_3 * main.x2_7 + main.s_4 * main.x2_6 + main.s_5 * main.x2_5 + main.s_6 * main.x2_4 + main.s_7 * main.x2_3 + main.s_8 * main.x2_2 + main.s_9 * main.x2_1 + main.s_10 * main.x2_0 - (0 + main.s_0 * main.x1[10] + main.s_1 * main.x1[9] + main.s_2 * main.x1[8] + main.s_3 * main.x1[7] + main.s_4 * main.x1[6] + main.s_5 * main.x1[5] + main.s_6 * main.x1[4] + main.s_7 * main.x1[3] + main.s_8 * main.x1[2] + main.s_9 * main.x1[1] + main.s_10 * main.x1[0]) - main.y2[10] + main.y1[10] + (0 + 64559 * main.q0_10 + 65535 * main.q0_9 + 65534 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[10] + (0 + main.s_0 * main.x2_11 + main.s_1 * main.x2_10 + main.s_2 * main.x2_9 + main.s_3 * main.x2_8 + main.s_4 * main.x2_7 + main.s_5 * main.x2_6 + main.s_6 * main.x2_5 + main.s_7 * main.x2_4 + main.s_8 * main.x2_3 + main.s_9 * main.x2_2 + main.s_10 * main.x2_1 + main.s_11 * main.x2_0 - (0 + main.s_0 * main.x1[11] + main.s_1 * main.x1[10] + main.s_2 * main.x1[9] + main.s_3 * main.x1[8] + main.s_4 * main.x1[7] + main.s_5 * main.x1[6] + main.s_6 * main.x1[5] + main.s_7 * main.x1[4] + main.s_8 * main.x1[3] + main.s_9 * main.x1[2] + main.s_10 * main.x1[1] + main.s_11 * main.x1[0]) - main.y2[11] + main.y1[11] + (0 + 64559 * main.q0_11 + 65535 * main.q0_10 + 65534 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[11] + (0 + main.s_0 * main.x2_12 + main.s_1 * main.x2_11 + main.s_2 * main.x2_10 + main.s_3 * main.x2_9 + main.s_4 * main.x2_8 + main.s_5 * main.x2_7 + main.s_6 * main.x2_6 + main.s_7 * main.x2_5 + main.s_8 * main.x2_4 + main.s_9 * main.x2_3 + main.s_10 * main.x2_2 + main.s_11 * main.x2_1 + main.s_12 * main.x2_0 - (0 + main.s_0 * main.x1[12] + main.s_1 * main.x1[11] + main.s_2 * main.x1[10] + main.s_3 * main.x1[9] + main.s_4 * main.x1[8] + main.s_5 * main.x1[7] + main.s_6 * main.x1[6] + main.s_7 * main.x1[5] + main.s_8 * main.x1[4] + main.s_9 * main.x1[3] + main.s_10 * main.x1[2] + main.s_11 * main.x1[1] + main.s_12 * main.x1[0]) - main.y2[12] + main.y1[12] + (0 + 64559 * main.q0_12 + 65535 * main.q0_11 + 65534 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[12] + (0 + main.s_0 * main.x2_13 + main.s_1 * main.x2_12 + main.s_2 * main.x2_11 + main.s_3 * main.x2_10 + main.s_4 * main.x2_9 + main.s_5 * main.x2_8 + main.s_6 * main.x2_7 + main.s_7 * main.x2_6 + main.s_8 * main.x2_5 + main.s_9 * main.x2_4 + main.s_10 * main.x2_3 + main.s_11 * main.x2_2 + main.s_12 * main.x2_1 + main.s_13 * main.x2_0 - (0 + main.s_0 * main.x1[13] + main.s_1 * main.x1[12] + main.s_2 * main.x1[11] + main.s_3 * main.x1[10] + main.s_4 * main.x1[9] + main.s_5 * main.x1[8] + main.s_6 * main.x1[7] + main.s_7 * main.x1[6] + main.s_8 * main.x1[5] + main.s_9 * main.x1[4] + main.s_10 * main.x1[3] + main.s_11 * main.x1[2] + main.s_12 * main.x1[1] + main.s_13 * main.x1[0]) - main.y2[13] + main.y1[13] + (0 + 64559 * main.q0_13 + 65535 * main.q0_12 + 65534 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[13] + (0 + main.s_0 * main.x2_14 + main.s_1 * main.x2_13 + main.s_2 * main.x2_12 + main.s_3 * main.x2_11 + main.s_4 * main.x2_10 + main.s_5 * main.x2_9 + main.s_6 * main.x2_8 + main.s_7 * main.x2_7 + main.s_8 * main.x2_6 + main.s_9 * main.x2_5 + main.s_10 * main.x2_4 + main.s_11 * main.x2_3 + main.s_12 * main.x2_2 + main.s_13 * main.x2_1 + main.s_14 * main.x2_0 - (0 + main.s_0 * main.x1[14] + main.s_1 * main.x1[13] + main.s_2 * main.x1[12] + main.s_3 * main.x1[11] + main.s_4 * main.x1[10] + main.s_5 * main.x1[9] + main.s_6 * main.x1[8] + main.s_7 * main.x1[7] + main.s_8 * main.x1[6] + main.s_9 * main.x1[5] + main.s_10 * main.x1[4] + main.s_11 * main.x1[3] + main.s_12 * main.x1[2] + main.s_13 * main.x1[1] + main.s_14 * main.x1[0]) - main.y2[14] + main.y1[14] + (0 + 64559 * main.q0_14 + 65535 * main.q0_13 + 65534 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[14] + (0 + main.s_0 * main.x2_15 + main.s_1 * main.x2_14 + main.s_2 * main.x2_13 + main.s_3 * main.x2_12 + main.s_4 * main.x2_11 + main.s_5 * main.x2_10 + main.s_6 * main.x2_9 + main.s_7 * main.x2_8 + main.s_8 * main.x2_7 + main.s_9 * main.x2_6 + main.s_10 * main.x2_5 + main.s_11 * main.x2_4 + main.s_12 * main.x2_3 + main.s_13 * main.x2_2 + main.s_14 * main.x2_1 + main.s_15 * main.x2_0 - (0 + main.s_0 * main.x1[15] + main.s_1 * main.x1[14] + main.s_2 * main.x1[13] + main.s_3 * main.x1[12] + main.s_4 * main.x1[11] + main.s_5 * main.x1[10] + main.s_6 * main.x1[9] + main.s_7 * main.x1[8] + main.s_8 * main.x1[7] + main.s_9 * main.x1[6] + main.s_10 * main.x1[5] + main.s_11 * main.x1[4] + main.s_12 * main.x1[3] + main.s_13 * main.x1[2] + main.s_14 * main.x1[1] + main.s_15 * main.x1[0]) - main.y2[15] + main.y1[15] + (0 + 64559 * main.q0_15 + 65535 * main.q0_14 + 65534 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[15] + (0 + main.s_0 * 0 + main.s_1 * main.x2_15 + main.s_2 * main.x2_14 + main.s_3 * main.x2_13 + main.s_4 * main.x2_12 + main.s_5 * main.x2_11 + main.s_6 * main.x2_10 + main.s_7 * main.x2_9 + main.s_8 * main.x2_8 + main.s_9 * main.x2_7 + main.s_10 * main.x2_6 + main.s_11 * main.x2_5 + main.s_12 * main.x2_4 + main.s_13 * main.x2_3 + main.s_14 * main.x2_2 + main.s_15 * main.x2_1 + 0 * main.x2_0 - (0 + main.s_0 * 0 + main.s_1 * main.x1[15] + main.s_2 * main.x1[14] + main.s_3 * main.x1[13] + main.s_4 * main.x1[12] + main.s_5 * main.x1[11] + main.s_6 * main.x1[10] + main.s_7 * main.x1[9] + main.s_8 * main.x1[8] + main.s_9 * main.x1[7] + main.s_10 * main.x1[6] + main.s_11 * main.x1[5] + main.s_12 * main.x1[4] + main.s_13 * main.x1[3] + main.s_14 * main.x1[2] + main.s_15 * main.x1[1] + 0 * main.x1[0]) - 0 + 0 + (0 + 65535 * main.q0_15 + 65534 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 0 * main.q0_0 - 258236)) * main.CLK32[16] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * main.x2_15 + main.s_3 * main.x2_14 + main.s_4 * main.x2_13 + main.s_5 * main.x2_12 + main.s_6 * main.x2_11 + main.s_7 * main.x2_10 + main.s_8 * main.x2_9 + main.s_9 * main.x2_8 + main.s_10 * main.x2_7 + main.s_11 * main.x2_6 + main.s_12 * main.x2_5 + main.s_13 * main.x2_4 + main.s_14 * main.x2_3 + main.s_15 * main.x2_2 + 0 * main.x2_1 + 0 * main.x2_0 - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * main.x1[15] + main.s_3 * main.x1[14] + main.s_4 * main.x1[13] + main.s_5 * main.x1[12] + main.s_6 * main.x1[11] + main.s_7 * main.x1[10] + main.s_8 * main.x1[9] + main.s_9 * main.x1[8] + main.s_10 * main.x1[7] + main.s_11 * main.x1[6] + main.s_12 * main.x1[5] + main.s_13 * main.x1[4] + main.s_14 * main.x1[3] + main.s_15 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) - 0 + 0 + (0 + 65534 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[17] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * main.x2_15 + main.s_4 * main.x2_14 + main.s_5 * main.x2_13 + main.s_6 * main.x2_12 + main.s_7 * main.x2_11 + main.s_8 * main.x2_10 + main.s_9 * main.x2_9 + main.s_10 * main.x2_8 + main.s_11 * main.x2_7 + main.s_12 * main.x2_6 + main.s_13 * main.x2_5 + main.s_14 * main.x2_4 + main.s_15 * main.x2_3 + 0 * main.x2_2 + 0 * main.x2_1 + 0 * main.x2_0 - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * main.x1[15] + main.s_4 * main.x1[14] + main.s_5 * main.x1[13] + main.s_6 * main.x1[12] + main.s_7 * main.x1[11] + main.s_8 * main.x1[10] + main.s_9 * main.x1[9] + main.s_10 * main.x1[8] + main.s_11 * main.x1[7] + main.s_12 * main.x1[6] + main.s_13 * main.x1[5] + main.s_14 * main.x1[4] + main.s_15 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) - 0 + 0 + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262136)) * main.CLK32[18] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * main.x2_15 + main.s_5 * main.x2_14 + main.s_6 * main.x2_13 + main.s_7 * main.x2_12 + main.s_8 * main.x2_11 + main.s_9 * main.x2_10 + main.s_10 * main.x2_9 + main.s_11 * main.x2_8 + main.s_12 * main.x2_7 + main.s_13 * main.x2_6 + main.s_14 * main.x2_5 + main.s_15 * main.x2_4 + 0 * main.x2_3 + 0 * main.x2_2 + 0 * main.x2_1 + 0 * main.x2_0 - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * main.x1[15] + main.s_5 * main.x1[14] + main.s_6 * main.x1[13] + main.s_7 * main.x1[12] + main.s_8 * main.x1[11] + main.s_9 * main.x1[10] + main.s_10 * main.x1[9] + main.s_11 * main.x1[8] + main.s_12 * main.x1[7] + main.s_13 * main.x1[6] + main.s_14 * main.x1[5] + main.s_15 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) - 0 + 0 + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[19] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * main.x2_15 + main.s_6 * main.x2_14 + main.s_7 * main.x2_13 + main.s_8 * main.x2_12 + main.s_9 * main.x2_11 + main.s_10 * main.x2_10 + main.s_11 * main.x2_9 + main.s_12 * main.x2_8 + main.s_13 * main.x2_7 + main.s_14 * main.x2_6 + main.s_15 * main.x2_5 + 0 * main.x2_4 + 0 * main.x2_3 + 0 * main.x2_2 + 0 * main.x2_1 + 0 * main.x2_0 - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * main.x1[15] + main.s_6 * main.x1[14] + main.s_7 * main.x1[13] + main.s_8 * main.x1[12] + main.s_9 * main.x1[11] + main.s_10 * main.x1[10] + main.s_11 * main.x1[9] + main.s_12 * main.x1[8] + main.s_13 * main.x1[7] + main.s_14 * main.x1[6] + main.s_15 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) - 0 + 0 + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[20] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * main.x2_15 + main.s_7 * main.x2_14 + main.s_8 * main.x2_13 + main.s_9 * main.x2_12 + main.s_10 * main.x2_11 + main.s_11 * main.x2_10 + main.s_12 * main.x2_9 + main.s_13 * main.x2_8 + main.s_14 * main.x2_7 + main.s_15 * main.x2_6 + 0 * main.x2_5 + 0 * main.x2_4 + 0 * main.x2_3 + 0 * main.x2_2 + 0 * main.x2_1 + 0 * main.x2_0 - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * main.x1[15] + main.s_7 * main.x1[14] + main.s_8 * main.x1[13] + main.s_9 * main.x1[12] + main.s_10 * main.x1[11] + main.s_11 * main.x1[10] + main.s_12 * main.x1[9] + main.s_13 * main.x1[8] + main.s_14 * main.x1[7] + main.s_15 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) - 0 + 0 + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[21] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * main.x2_15 + main.s_8 * main.x2_14 + main.s_9 * main.x2_13 + main.s_10 * main.x2_12 + main.s_11 * main.x2_11 + main.s_12 * main.x2_10 + main.s_13 * main.x2_9 + main.s_14 * main.x2_8 + main.s_15 * main.x2_7 + 0 * main.x2_6 + 0 * main.x2_5 + 0 * main.x2_4 + 0 * main.x2_3 + 0 * main.x2_2 + 0 * main.x2_1 + 0 * main.x2_0 - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * main.x1[15] + main.s_8 * main.x1[14] + main.s_9 * main.x1[13] + main.s_10 * main.x1[12] + main.s_11 * main.x1[11] + main.s_12 * main.x1[10] + main.s_13 * main.x1[9] + main.s_14 * main.x1[8] + main.s_15 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) - 0 + 0 + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[22] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * main.x2_15 + main.s_9 * main.x2_14 + main.s_10 * main.x2_13 + main.s_11 * main.x2_12 + main.s_12 * main.x2_11 + main.s_13 * main.x2_10 + main.s_14 * main.x2_9 + main.s_15 * main.x2_8 + 0 * main.x2_7 + 0 * main.x2_6 + 0 * main.x2_5 + 0 * main.x2_4 + 0 * main.x2_3 + 0 * main.x2_2 + 0 * main.x2_1 + 0 * main.x2_0 - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * main.x1[15] + main.s_9 * main.x1[14] + main.s_10 * main.x1[13] + main.s_11 * main.x1[12] + main.s_12 * main.x1[11] + main.s_13 * main.x1[10] + main.s_14 * main.x1[9] + main.s_15 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) - 0 + 0 + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 0 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[23] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * main.x2_15 + main.s_10 * main.x2_14 + main.s_11 * main.x2_13 + main.s_12 * main.x2_12 + main.s_13 * main.x2_11 + main.s_14 * main.x2_10 + main.s_15 * main.x2_9 + 0 * main.x2_8 + 0 * main.x2_7 + 0 * main.x2_6 + 0 * main.x2_5 + 0 * main.x2_4 + 0 * main.x2_3 + 0 * main.x2_2 + 0 * main.x2_1 + 0 * main.x2_0 - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * main.x1[15] + main.s_10 * main.x1[14] + main.s_11 * main.x1[13] + main.s_12 * main.x1[12] + main.s_13 * main.x1[11] + main.s_14 * main.x1[10] + main.s_15 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) - 0 + 0 + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 0 * main.q0_8 + 0 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[24] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * main.x2_15 + main.s_11 * main.x2_14 + main.s_12 * main.x2_13 + main.s_13 * main.x2_12 + main.s_14 * main.x2_11 + main.s_15 * main.x2_10 + 0 * main.x2_9 + 0 * main.x2_8 + 0 * main.x2_7 + 0 * main.x2_6 + 0 * main.x2_5 + 0 * main.x2_4 + 0 * main.x2_3 + 0 * main.x2_2 + 0 * main.x2_1 + 0 * main.x2_0 - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * main.x1[15] + main.s_11 * main.x1[14] + main.s_12 * main.x1[13] + main.s_13 * main.x1[12] + main.s_14 * main.x1[11] + main.s_15 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) - 0 + 0 + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 0 * main.q0_9 + 0 * main.q0_8 + 0 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[25] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * main.x2_15 + main.s_12 * main.x2_14 + main.s_13 * main.x2_13 + main.s_14 * main.x2_12 + main.s_15 * main.x2_11 + 0 * main.x2_10 + 0 * main.x2_9 + 0 * main.x2_8 + 0 * main.x2_7 + 0 * main.x2_6 + 0 * main.x2_5 + 0 * main.x2_4 + 0 * main.x2_3 + 0 * main.x2_2 + 0 * main.x2_1 + 0 * main.x2_0 - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * main.x1[15] + main.s_12 * main.x1[14] + main.s_13 * main.x1[13] + main.s_14 * main.x1[12] + main.s_15 * main.x1[11] + 0 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) - 0 + 0 + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 0 * main.q0_10 + 0 * main.q0_9 + 0 * main.q0_8 + 0 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[26] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * main.x2_15 + main.s_13 * main.x2_14 + main.s_14 * main.x2_13 + main.s_15 * main.x2_12 + 0 * main.x2_11 + 0 * main.x2_10 + 0 * main.x2_9 + 0 * main.x2_8 + 0 * main.x2_7 + 0 * main.x2_6 + 0 * main.x2_5 + 0 * main.x2_4 + 0 * main.x2_3 + 0 * main.x2_2 + 0 * main.x2_1 + 0 * main.x2_0 - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * main.x1[15] + main.s_13 * main.x1[14] + main.s_14 * main.x1[13] + main.s_15 * main.x1[12] + 0 * main.x1[11] + 0 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) - 0 + 0 + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 0 * main.q0_11 + 0 * main.q0_10 + 0 * main.q0_9 + 0 * main.q0_8 + 0 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[27] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * main.x2_15 + main.s_14 * main.x2_14 + main.s_15 * main.x2_13 + 0 * main.x2_12 + 0 * main.x2_11 + 0 * main.x2_10 + 0 * main.x2_9 + 0 * main.x2_8 + 0 * main.x2_7 + 0 * main.x2_6 + 0 * main.x2_5 + 0 * main.x2_4 + 0 * main.x2_3 + 0 * main.x2_2 + 0 * main.x2_1 + 0 * main.x2_0 - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * main.x1[15] + main.s_14 * main.x1[14] + main.s_15 * main.x1[13] + 0 * main.x1[12] + 0 * main.x1[11] + 0 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) - 0 + 0 + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 0 * main.q0_12 + 0 * main.q0_11 + 0 * main.q0_10 + 0 * main.q0_9 + 0 * main.q0_8 + 0 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[28] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * 0 + main.s_14 * main.x2_15 + main.s_15 * main.x2_14 + 0 * main.x2_13 + 0 * main.x2_12 + 0 * main.x2_11 + 0 * main.x2_10 + 0 * main.x2_9 + 0 * main.x2_8 + 0 * main.x2_7 + 0 * main.x2_6 + 0 * main.x2_5 + 0 * main.x2_4 + 0 * main.x2_3 + 0 * main.x2_2 + 0 * main.x2_1 + 0 * main.x2_0 - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * 0 + main.s_14 * main.x1[15] + main.s_15 * main.x1[14] + 0 * main.x1[13] + 0 * main.x1[12] + 0 * main.x1[11] + 0 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) - 0 + 0 + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 0 * main.q0_13 + 0 * main.q0_12 + 0 * main.q0_11 + 0 * main.q0_10 + 0 * main.q0_9 + 0 * main.q0_8 + 0 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[29] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * 0 + main.s_14 * 0 + main.s_15 * main.x2_15 + 0 * main.x2_14 + 0 * main.x2_13 + 0 * main.x2_12 + 0 * main.x2_11 + 0 * main.x2_10 + 0 * main.x2_9 + 0 * main.x2_8 + 0 * main.x2_7 + 0 * main.x2_6 + 0 * main.x2_5 + 0 * main.x2_4 + 0 * main.x2_3 + 0 * main.x2_2 + 0 * main.x2_1 + 0 * main.x2_0 - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * 0 + main.s_14 * 0 + main.s_15 * main.x1[15] + 0 * main.x1[14] + 0 * main.x1[13] + 0 * main.x1[12] + 0 * main.x1[11] + 0 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) - 0 + 0 + (0 + 65535 * main.q0_15 + 0 * main.q0_14 + 0 * main.q0_13 + 0 * main.q0_12 + 0 * main.q0_11 + 0 * main.q0_10 + 0 * main.q0_9 + 0 * main.q0_8 + 0 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[30] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * 0 + main.s_14 * 0 + main.s_15 * 0 + 0 * main.x2_15 + 0 * main.x2_14 + 0 * main.x2_13 + 0 * main.x2_12 + 0 * main.x2_11 + 0 * main.x2_10 + 0 * main.x2_9 + 0 * main.x2_8 + 0 * main.x2_7 + 0 * main.x2_6 + 0 * main.x2_5 + 0 * main.x2_4 + 0 * main.x2_3 + 0 * main.x2_2 + 0 * main.x2_1 + 0 * main.x2_0 - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * 0 + main.s_14 * 0 + main.s_15 * 0 + 0 * main.x1[15] + 0 * main.x1[14] + 0 * main.x1[13] + 0 * main.x1[12] + 0 * main.x1[11] + 0 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) - 0 + 0 + (0 + 0 * main.q0_15 + 0 * main.q0_14 + 0 * main.q0_13 + 0 * main.q0_12 + 0 * main.q0_11 + 0 * main.q0_10 + 0 * main.q0_9 + 0 * main.q0_8 + 0 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[31];
    col eq2_sum = 0 + (2 * (0 + main.s_0 * main.y1[0]) - 3 * (0 + main.x1[0] * main.x1[0]) + (0 + 64559 * main.q0_0 - 0)) * main.CLK32[0] + (2 * (0 + main.s_0 * main.y1[1] + main.s_1 * main.y1[0]) - 3 * (0 + main.x1[0] * main.x1[1] + main.x1[1] * main.x1[0]) + (0 + 64559 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[1] + (2 * (0 + main.s_0 * main.y1[2] + main.s_1 * main.y1[1] + main.s_2 * main.y1[0]) - 3 * (0 + main.x1[0] * main.x1[2] + main.x1[1] * main.x1[1] + main.x1[2] * main.x1[0]) + (0 + 64559 * main.q0_2 + 65535 * main.q0_1 + 65534 * main.q0_0 - 0)) * main.CLK32[2] + (2 * (0 + main.s_0 * main.y1[3] + main.s_1 * main.y1[2] + main.s_2 * main.y1[1] + main.s_3 * main.y1[0]) - 3 * (0 + main.x1[0] * main.x1[3] + main.x1[1] * main.x1[2] + main.x1[2] * main.x1[1] + main.x1[3] * main.x1[0]) + (0 + 64559 * main.q0_3 + 65535 * main.q0_2 + 65534 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[3] + (2 * (0 + main.s_0 * main.y1[4] + main.s_1 * main.y1[3] + main.s_2 * main.y1[2] + main.s_3 * main.y1[1] + main.s_4 * main.y1[0]) - 3 * (0 + main.x1[0] * main.x1[4] + main.x1[1] * main.x1[3] + main.x1[2] * main.x1[2] + main.x1[3] * main.x1[1] + main.x1[4] * main.x1[0]) + (0 + 64559 * main.q0_4 + 65535 * main.q0_3 + 65534 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[4] + (2 * (0 + main.s_0 * main.y1[5] + main.s_1 * main.y1[4] + main.s_2 * main.y1[3] + main.s_3 * main.y1[2] + main.s_4 * main.y1[1] + main.s_5 * main.y1[0]) - 3 * (0 + main.x1[0] * main.x1[5] + main.x1[1] * main.x1[4] + main.x1[2] * main.x1[3] + main.x1[3] * main.x1[2] + main.x1[4] * main.x1[1] + main.x1[5] * main.x1[0]) + (0 + 64559 * main.q0_5 + 65535 * main.q0_4 + 65534 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[5] + (2 * (0 + main.s_0 * main.y1[6] + main.s_1 * main.y1[5] + main.s_2 * main.y1[4] + main.s_3 * main.y1[3] + main.s_4 * main.y1[2] + main.s_5 * main.y1[1] + main.s_6 * main.y1[0]) - 3 * (0 + main.x1[0] * main.x1[6] + main.x1[1] * main.x1[5] + main.x1[2] * main.x1[4] + main.x1[3] * main.x1[3] + main.x1[4] * main.x1[2] + main.x1[5] * main.x1[1] + main.x1[6] * main.x1[0]) + (0 + 64559 * main.q0_6 + 65535 * main.q0_5 + 65534 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[6] + (2 * (0 + main.s_0 * main.y1[7] + main.s_1 * main.y1[6] + main.s_2 * main.y1[5] + main.s_3 * main.y1[4] + main.s_4 * main.y1[3] + main.s_5 * main.y1[2] + main.s_6 * main.y1[1] + main.s_7 * main.y1[0]) - 3 * (0 + main.x1[0] * main.x1[7] + main.x1[1] * main.x1[6] + main.x1[2] * main.x1[5] + main.x1[3] * main.x1[4] + main.x1[4] * main.x1[3] + main.x1[5] * main.x1[2] + main.x1[6] * main.x1[1] + main.x1[7] * main.x1[0]) + (0 + 64559 * main.q0_7 + 65535 * main.q0_6 + 65534 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[7] + (2 * (0 + main.s_0 * main.y1[8] + main.s_1 * main.y1[7] + main.s_2 * main.y1[6] + main.s_3 * main.y1[5] + main.s_4 * main.y1[4] + main.s_5 * main.y1[3] + main.s_6 * main.y1[2] + main.s_7 * main.y1[1] + main.s_8 * main.y1[0]) - 3 * (0 + main.x1[0] * main.x1[8] + main.x1[1] * main.x1[7] + main.x1[2] * main.x1[6] + main.x1[3] * main.x1[5] + main.x1[4] * main.x1[4] + main.x1[5] * main.x1[3] + main.x1[6] * main.x1[2] + main.x1[7] * main.x1[1] + main.x1[8] * main.x1[0]) + (0 + 64559 * main.q0_8 + 65535 * main.q0_7 + 65534 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[8] + (2 * (0 + main.s_0 * main.y1[9] + main.s_1 * main.y1[8] + main.s_2 * main.y1[7] + main.s_3 * main.y1[6] + main.s_4 * main.y1[5] + main.s_5 * main.y1[4] + main.s_6 * main.y1[3] + main.s_7 * main.y1[2] + main.s_8 * main.y1[1] + main.s_9 * main.y1[0]) - 3 * (0 + main.x1[0] * main.x1[9] + main.x1[1] * main.x1[8] + main.x1[2] * main.x1[7] + main.x1[3] * main.x1[6] + main.x1[4] * main.x1[5] + main.x1[5] * main.x1[4] + main.x1[6] * main.x1[3] + main.x1[7] * main.x1[2] + main.x1[8] * main.x1[1] + main.x1[9] * main.x1[0]) + (0 + 64559 * main.q0_9 + 65535 * main.q0_8 + 65534 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[9] + (2 * (0 + main.s_0 * main.y1[10] + main.s_1 * main.y1[9] + main.s_2 * main.y1[8] + main.s_3 * main.y1[7] + main.s_4 * main.y1[6] + main.s_5 * main.y1[5] + main.s_6 * main.y1[4] + main.s_7 * main.y1[3] + main.s_8 * main.y1[2] + main.s_9 * main.y1[1] + main.s_10 * main.y1[0]) - 3 * (0 + main.x1[0] * main.x1[10] + main.x1[1] * main.x1[9] + main.x1[2] * main.x1[8] + main.x1[3] * main.x1[7] + main.x1[4] * main.x1[6] + main.x1[5] * main.x1[5] + main.x1[6] * main.x1[4] + main.x1[7] * main.x1[3] + main.x1[8] * main.x1[2] + main.x1[9] * main.x1[1] + main.x1[10] * main.x1[0]) + (0 + 64559 * main.q0_10 + 65535 * main.q0_9 + 65534 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[10] + (2 * (0 + main.s_0 * main.y1[11] + main.s_1 * main.y1[10] + main.s_2 * main.y1[9] + main.s_3 * main.y1[8] + main.s_4 * main.y1[7] + main.s_5 * main.y1[6] + main.s_6 * main.y1[5] + main.s_7 * main.y1[4] + main.s_8 * main.y1[3] + main.s_9 * main.y1[2] + main.s_10 * main.y1[1] + main.s_11 * main.y1[0]) - 3 * (0 + main.x1[0] * main.x1[11] + main.x1[1] * main.x1[10] + main.x1[2] * main.x1[9] + main.x1[3] * main.x1[8] + main.x1[4] * main.x1[7] + main.x1[5] * main.x1[6] + main.x1[6] * main.x1[5] + main.x1[7] * main.x1[4] + main.x1[8] * main.x1[3] + main.x1[9] * main.x1[2] + main.x1[10] * main.x1[1] + main.x1[11] * main.x1[0]) + (0 + 64559 * main.q0_11 + 65535 * main.q0_10 + 65534 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[11] + (2 * (0 + main.s_0 * main.y1[12] + main.s_1 * main.y1[11] + main.s_2 * main.y1[10] + main.s_3 * main.y1[9] + main.s_4 * main.y1[8] + main.s_5 * main.y1[7] + main.s_6 * main.y1[6] + main.s_7 * main.y1[5] + main.s_8 * main.y1[4] + main.s_9 * main.y1[3] + main.s_10 * main.y1[2] + main.s_11 * main.y1[1] + main.s_12 * main.y1[0]) - 3 * (0 + main.x1[0] * main.x1[12] + main.x1[1] * main.x1[11] + main.x1[2] * main.x1[10] + main.x1[3] * main.x1[9] + main.x1[4] * main.x1[8] + main.x1[5] * main.x1[7] + main.x1[6] * main.x1[6] + main.x1[7] * main.x1[5] + main.x1[8] * main.x1[4] + main.x1[9] * main.x1[3] + main.x1[10] * main.x1[2] + main.x1[11] * main.x1[1] + main.x1[12] * main.x1[0]) + (0 + 64559 * main.q0_12 + 65535 * main.q0_11 + 65534 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[12] + (2 * (0 + main.s_0 * main.y1[13] + main.s_1 * main.y1[12] + main.s_2 * main.y1[11] + main.s_3 * main.y1[10] + main.s_4 * main.y1[9] + main.s_5 * main.y1[8] + main.s_6 * main.y1[7] + main.s_7 * main.y1[6] + main.s_8 * main.y1[5] + main.s_9 * main.y1[4] + main.s_10 * main.y1[3] + main.s_11 * main.y1[2] + main.s_12 * main.y1[1] + main.s_13 * main.y1[0]) - 3 * (0 + main.x1[0] * main.x1[13] + main.x1[1] * main.x1[12] + main.x1[2] * main.x1[11] + main.x1[3] * main.x1[10] + main.x1[4] * main.x1[9] + main.x1[5] * main.x1[8] + main.x1[6] * main.x1[7] + main.x1[7] * main.x1[6] + main.x1[8] * main.x1[5] + main.x1[9] * main.x1[4] + main.x1[10] * main.x1[3] + main.x1[11] * main.x1[2] + main.x1[12] * main.x1[1] + main.x1[13] * main.x1[0]) + (0 + 64559 * main.q0_13 + 65535 * main.q0_12 + 65534 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[13] + (2 * (0 + main.s_0 * main.y1[14] + main.s_1 * main.y1[13] + main.s_2 * main.y1[12] + main.s_3 * main.y1[11] + main.s_4 * main.y1[10] + main.s_5 * main.y1[9] + main.s_6 * main.y1[8] + main.s_7 * main.y1[7] + main.s_8 * main.y1[6] + main.s_9 * main.y1[5] + main.s_10 * main.y1[4] + main.s_11 * main.y1[3] + main.s_12 * main.y1[2] + main.s_13 * main.y1[1] + main.s_14 * main.y1[0]) - 3 * (0 + main.x1[0] * main.x1[14] + main.x1[1] * main.x1[13] + main.x1[2] * main.x1[12] + main.x1[3] * main.x1[11] + main.x1[4] * main.x1[10] + main.x1[5] * main.x1[9] + main.x1[6] * main.x1[8] + main.x1[7] * main.x1[7] + main.x1[8] * main.x1[6] + main.x1[9] * main.x1[5] + main.x1[10] * main.x1[4] + main.x1[11] * main.x1[3] + main.x1[12] * main.x1[2] + main.x1[13] * main.x1[1] + main.x1[14] * main.x1[0]) + (0 + 64559 * main.q0_14 + 65535 * main.q0_13 + 65534 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[14] + (2 * (0 + main.s_0 * main.y1[15] + main.s_1 * main.y1[14] + main.s_2 * main.y1[13] + main.s_3 * main.y1[12] + main.s_4 * main.y1[11] + main.s_5 * main.y1[10] + main.s_6 * main.y1[9] + main.s_7 * main.y1[8] + main.s_8 * main.y1[7] + main.s_9 * main.y1[6] + main.s_10 * main.y1[5] + main.s_11 * main.y1[4] + main.s_12 * main.y1[3] + main.s_13 * main.y1[2] + main.s_14 * main.y1[1] + main.s_15 * main.y1[0]) - 3 * (0 + main.x1[0] * main.x1[15] + main.x1[1] * main.x1[14] + main.x1[2] * main.x1[13] + main.x1[3] * main.x1[12] + main.x1[4] * main.x1[11] + main.x1[5] * main.x1[10] + main.x1[6] * main.x1[9] + main.x1[7] * main.x1[8] + main.x1[8] * main.x1[7] + main.x1[9] * main.x1[6] + main.x1[10] * main.x1[5] + main.x1[11] * main.x1[4] + main.x1[12] * main.x1[3] + main.x1[13] * main.x1[2] + main.x1[14] * main.x1[1] + main.x1[15] * main.x1[0]) + (0 + 64559 * main.q0_15 + 65535 * main.q0_14 + 65534 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 65535 * main.q0_0 - 0)) * main.CLK32[15] + (2 * (0 + main.s_0 * 0 + main.s_1 * main.y1[15] + main.s_2 * main.y1[14] + main.s_3 * main.y1[13] + main.s_4 * main.y1[12] + main.s_5 * main.y1[11] + main.s_6 * main.y1[10] + main.s_7 * main.y1[9] + main.s_8 * main.y1[8] + main.s_9 * main.y1[7] + main.s_10 * main.y1[6] + main.s_11 * main.y1[5] + main.s_12 * main.y1[4] + main.s_13 * main.y1[3] + main.s_14 * main.y1[2] + main.s_15 * main.y1[1] + 0 * main.y1[0]) - 3 * (0 + main.x1[0] * 0 + main.x1[1] * main.x1[15] + main.x1[2] * main.x1[14] + main.x1[3] * main.x1[13] + main.x1[4] * main.x1[12] + main.x1[5] * main.x1[11] + main.x1[6] * main.x1[10] + main.x1[7] * main.x1[9] + main.x1[8] * main.x1[8] + main.x1[9] * main.x1[7] + main.x1[10] * main.x1[6] + main.x1[11] * main.x1[5] + main.x1[12] * main.x1[4] + main.x1[13] * main.x1[3] + main.x1[14] * main.x1[2] + main.x1[15] * main.x1[1] + 0 * main.x1[0]) + (0 + 65535 * main.q0_15 + 65534 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 65535 * main.q0_1 + 0 * main.q0_0 - 258236)) * main.CLK32[16] + (2 * (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * main.y1[15] + main.s_3 * main.y1[14] + main.s_4 * main.y1[13] + main.s_5 * main.y1[12] + main.s_6 * main.y1[11] + main.s_7 * main.y1[10] + main.s_8 * main.y1[9] + main.s_9 * main.y1[8] + main.s_10 * main.y1[7] + main.s_11 * main.y1[6] + main.s_12 * main.y1[5] + main.s_13 * main.y1[4] + main.s_14 * main.y1[3] + main.s_15 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0]) - 3 * (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * main.x1[15] + main.x1[3] * main.x1[14] + main.x1[4] * main.x1[13] + main.x1[5] * main.x1[12] + main.x1[6] * main.x1[11] + main.x1[7] * main.x1[10] + main.x1[8] * main.x1[9] + main.x1[9] * main.x1[8] + main.x1[10] * main.x1[7] + main.x1[11] * main.x1[6] + main.x1[12] * main.x1[5] + main.x1[13] * main.x1[4] + main.x1[14] * main.x1[3] + main.x1[15] * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) + (0 + 65534 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 65535 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[17] + (2 * (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * main.y1[15] + main.s_4 * main.y1[14] + main.s_5 * main.y1[13] + main.s_6 * main.y1[12] + main.s_7 * main.y1[11] + main.s_8 * main.y1[10] + main.s_9 * main.y1[9] + main.s_10 * main.y1[8] + main.s_11 * main.y1[7] + main.s_12 * main.y1[6] + main.s_13 * main.y1[5] + main.s_14 * main.y1[4] + main.s_15 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0]) - 3 * (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * main.x1[15] + main.x1[4] * main.x1[14] + main.x1[5] * main.x1[13] + main.x1[6] * main.x1[12] + main.x1[7] * main.x1[11] + main.x1[8] * main.x1[10] + main.x1[9] * main.x1[9] + main.x1[10] * main.x1[8] + main.x1[11] * main.x1[7] + main.x1[12] * main.x1[6] + main.x1[13] * main.x1[5] + main.x1[14] * main.x1[4] + main.x1[15] * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 65535 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262136)) * main.CLK32[18] + (2 * (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * main.y1[15] + main.s_5 * main.y1[14] + main.s_6 * main.y1[13] + main.s_7 * main.y1[12] + main.s_8 * main.y1[11] + main.s_9 * main.y1[10] + main.s_10 * main.y1[9] + main.s_11 * main.y1[8] + main.s_12 * main.y1[7] + main.s_13 * main.y1[6] + main.s_14 * main.y1[5] + main.s_15 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0]) - 3 * (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * main.x1[15] + main.x1[5] * main.x1[14] + main.x1[6] * main.x1[13] + main.x1[7] * main.x1[12] + main.x1[8] * main.x1[11] + main.x1[9] * main.x1[10] + main.x1[10] * main.x1[9] + main.x1[11] * main.x1[8] + main.x1[12] * main.x1[7] + main.x1[13] * main.x1[6] + main.x1[14] * main.x1[5] + main.x1[15] * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 65535 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[19] + (2 * (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * main.y1[15] + main.s_6 * main.y1[14] + main.s_7 * main.y1[13] + main.s_8 * main.y1[12] + main.s_9 * main.y1[11] + main.s_10 * main.y1[10] + main.s_11 * main.y1[9] + main.s_12 * main.y1[8] + main.s_13 * main.y1[7] + main.s_14 * main.y1[6] + main.s_15 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0]) - 3 * (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * main.x1[15] + main.x1[6] * main.x1[14] + main.x1[7] * main.x1[13] + main.x1[8] * main.x1[12] + main.x1[9] * main.x1[11] + main.x1[10] * main.x1[10] + main.x1[11] * main.x1[9] + main.x1[12] * main.x1[8] + main.x1[13] * main.x1[7] + main.x1[14] * main.x1[6] + main.x1[15] * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 65535 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[20] + (2 * (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * main.y1[15] + main.s_7 * main.y1[14] + main.s_8 * main.y1[13] + main.s_9 * main.y1[12] + main.s_10 * main.y1[11] + main.s_11 * main.y1[10] + main.s_12 * main.y1[9] + main.s_13 * main.y1[8] + main.s_14 * main.y1[7] + main.s_15 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0]) - 3 * (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * main.x1[15] + main.x1[7] * main.x1[14] + main.x1[8] * main.x1[13] + main.x1[9] * main.x1[12] + main.x1[10] * main.x1[11] + main.x1[11] * main.x1[10] + main.x1[12] * main.x1[9] + main.x1[13] * main.x1[8] + main.x1[14] * main.x1[7] + main.x1[15] * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 65535 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[21] + (2 * (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * main.y1[15] + main.s_8 * main.y1[14] + main.s_9 * main.y1[13] + main.s_10 * main.y1[12] + main.s_11 * main.y1[11] + main.s_12 * main.y1[10] + main.s_13 * main.y1[9] + main.s_14 * main.y1[8] + main.s_15 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0]) - 3 * (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * main.x1[15] + main.x1[8] * main.x1[14] + main.x1[9] * main.x1[13] + main.x1[10] * main.x1[12] + main.x1[11] * main.x1[11] + main.x1[12] * main.x1[10] + main.x1[13] * main.x1[9] + main.x1[14] * main.x1[8] + main.x1[15] * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 65535 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[22] + (2 * (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * main.y1[15] + main.s_9 * main.y1[14] + main.s_10 * main.y1[13] + main.s_11 * main.y1[12] + main.s_12 * main.y1[11] + main.s_13 * main.y1[10] + main.s_14 * main.y1[9] + main.s_15 * main.y1[8] + 0 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0]) - 3 * (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * 0 + main.x1[8] * main.x1[15] + main.x1[9] * main.x1[14] + main.x1[10] * main.x1[13] + main.x1[11] * main.x1[12] + main.x1[12] * main.x1[11] + main.x1[13] * main.x1[10] + main.x1[14] * main.x1[9] + main.x1[15] * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 65535 * main.q0_8 + 0 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[23] + (2 * (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * main.y1[15] + main.s_10 * main.y1[14] + main.s_11 * main.y1[13] + main.s_12 * main.y1[12] + main.s_13 * main.y1[11] + main.s_14 * main.y1[10] + main.s_15 * main.y1[9] + 0 * main.y1[8] + 0 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0]) - 3 * (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * 0 + main.x1[8] * 0 + main.x1[9] * main.x1[15] + main.x1[10] * main.x1[14] + main.x1[11] * main.x1[13] + main.x1[12] * main.x1[12] + main.x1[13] * main.x1[11] + main.x1[14] * main.x1[10] + main.x1[15] * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 65535 * main.q0_9 + 0 * main.q0_8 + 0 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[24] + (2 * (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * main.y1[15] + main.s_11 * main.y1[14] + main.s_12 * main.y1[13] + main.s_13 * main.y1[12] + main.s_14 * main.y1[11] + main.s_15 * main.y1[10] + 0 * main.y1[9] + 0 * main.y1[8] + 0 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0]) - 3 * (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * 0 + main.x1[8] * 0 + main.x1[9] * 0 + main.x1[10] * main.x1[15] + main.x1[11] * main.x1[14] + main.x1[12] * main.x1[13] + main.x1[13] * main.x1[12] + main.x1[14] * main.x1[11] + main.x1[15] * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 65535 * main.q0_10 + 0 * main.q0_9 + 0 * main.q0_8 + 0 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[25] + (2 * (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * main.y1[15] + main.s_12 * main.y1[14] + main.s_13 * main.y1[13] + main.s_14 * main.y1[12] + main.s_15 * main.y1[11] + 0 * main.y1[10] + 0 * main.y1[9] + 0 * main.y1[8] + 0 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0]) - 3 * (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * 0 + main.x1[8] * 0 + main.x1[9] * 0 + main.x1[10] * 0 + main.x1[11] * main.x1[15] + main.x1[12] * main.x1[14] + main.x1[13] * main.x1[13] + main.x1[14] * main.x1[12] + main.x1[15] * main.x1[11] + 0 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 65535 * main.q0_11 + 0 * main.q0_10 + 0 * main.q0_9 + 0 * main.q0_8 + 0 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[26] + (2 * (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * main.y1[15] + main.s_13 * main.y1[14] + main.s_14 * main.y1[13] + main.s_15 * main.y1[12] + 0 * main.y1[11] + 0 * main.y1[10] + 0 * main.y1[9] + 0 * main.y1[8] + 0 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0]) - 3 * (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * 0 + main.x1[8] * 0 + main.x1[9] * 0 + main.x1[10] * 0 + main.x1[11] * 0 + main.x1[12] * main.x1[15] + main.x1[13] * main.x1[14] + main.x1[14] * main.x1[13] + main.x1[15] * main.x1[12] + 0 * main.x1[11] + 0 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 65535 * main.q0_12 + 0 * main.q0_11 + 0 * main.q0_10 + 0 * main.q0_9 + 0 * main.q0_8 + 0 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[27] + (2 * (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * main.y1[15] + main.s_14 * main.y1[14] + main.s_15 * main.y1[13] + 0 * main.y1[12] + 0 * main.y1[11] + 0 * main.y1[10] + 0 * main.y1[9] + 0 * main.y1[8] + 0 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0]) - 3 * (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * 0 + main.x1[8] * 0 + main.x1[9] * 0 + main.x1[10] * 0 + main.x1[11] * 0 + main.x1[12] * 0 + main.x1[13] * main.x1[15] + main.x1[14] * main.x1[14] + main.x1[15] * main.x1[13] + 0 * main.x1[12] + 0 * main.x1[11] + 0 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 65535 * main.q0_13 + 0 * main.q0_12 + 0 * main.q0_11 + 0 * main.q0_10 + 0 * main.q0_9 + 0 * main.q0_8 + 0 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[28] + (2 * (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * 0 + main.s_14 * main.y1[15] + main.s_15 * main.y1[14] + 0 * main.y1[13] + 0 * main.y1[12] + 0 * main.y1[11] + 0 * main.y1[10] + 0 * main.y1[9] + 0 * main.y1[8] + 0 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0]) - 3 * (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * 0 + main.x1[8] * 0 + main.x1[9] * 0 + main.x1[10] * 0 + main.x1[11] * 0 + main.x1[12] * 0 + main.x1[13] * 0 + main.x1[14] * main.x1[15] + main.x1[15] * main.x1[14] + 0 * main.x1[13] + 0 * main.x1[12] + 0 * main.x1[11] + 0 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) + (0 + 65535 * main.q0_15 + 65535 * main.q0_14 + 0 * main.q0_13 + 0 * main.q0_12 + 0 * main.q0_11 + 0 * main.q0_10 + 0 * main.q0_9 + 0 * main.q0_8 + 0 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[29] + (2 * (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * 0 + main.s_14 * 0 + main.s_15 * main.y1[15] + 0 * main.y1[14] + 0 * main.y1[13] + 0 * main.y1[12] + 0 * main.y1[11] + 0 * main.y1[10] + 0 * main.y1[9] + 0 * main.y1[8] + 0 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0]) - 3 * (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * 0 + main.x1[8] * 0 + main.x1[9] * 0 + main.x1[10] * 0 + main.x1[11] * 0 + main.x1[12] * 0 + main.x1[13] * 0 + main.x1[14] * 0 + main.x1[15] * main.x1[15] + 0 * main.x1[14] + 0 * main.x1[13] + 0 * main.x1[12] + 0 * main.x1[11] + 0 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) + (0 + 65535 * main.q0_15 + 0 * main.q0_14 + 0 * main.q0_13 + 0 * main.q0_12 + 0 * main.q0_11 + 0 * main.q0_10 + 0 * main.q0_9 + 0 * main.q0_8 + 0 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[30] + (2 * (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * 0 + main.s_14 * 0 + main.s_15 * 0 + 0 * main.y1[15] + 0 * main.y1[14] + 0 * main.y1[13] + 0 * main.y1[12] + 0 * main.y1[11] + 0 * main.y1[10] + 0 * main.y1[9] + 0 * main.y1[8] + 0 * main.y1[7] + 0 * main.y1[6] + 0 * main.y1[5] + 0 * main.y1[4] + 0 * main.y1[3] + 0 * main.y1[2] + 0 * main.y1[1] + 0 * main.y1[0]) - 3 * (0 + main.x1[0] * 0 + main.x1[1] * 0 + main.x1[2] * 0 + main.x1[3] * 0 + main.x1[4] * 0 + main.x1[5] * 0 + main.x1[6] * 0 + main.x1[7] * 0 + main.x1[8] * 0 + main.x1[9] * 0 + main.x1[10] * 0 + main.x1[11] * 0 + main.x1[12] * 0 + main.x1[13] * 0 + main.x1[14] * 0 + main.x1[15] * 0 + 0 * main.x1[15] + 0 * main.x1[14] + 0 * main.x1[13] + 0 * main.x1[12] + 0 * main.x1[11] + 0 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0]) + (0 + 0 * main.q0_15 + 0 * main.q0_14 + 0 * main.q0_13 + 0 * main.q0_12 + 0 * main.q0_11 + 0 * main.q0_10 + 0 * main.q0_9 + 0 * main.q0_8 + 0 * main.q0_7 + 0 * main.q0_6 + 0 * main.q0_5 + 0 * main.q0_4 + 0 * main.q0_3 + 0 * main.q0_2 + 0 * main.q0_1 + 0 * main.q0_0 - 262140)) * main.CLK32[31];
    col eq3_sum = 0 + (0 + main.s_0 * main.s_0 - main.x1[0] - main.x2_0 - main.x3[0] + (0 + 64559 * main.q1_0 - 0)) * main.CLK32[0] + (0 + main.s_0 * main.s_1 + main.s_1 * main.s_0 - main.x1[1] - main.x2_1 - main.x3[1] + (0 + 64559 * main.q1_1 + 65535 * main.q1_0 - 0)) * main.CLK32[1] + (0 + main.s_0 * main.s_2 + main.s_1 * main.s_1 + main.s_2 * main.s_0 - main.x1[2] - main.x2_2 - main.x3[2] + (0 + 64559 * main.q1_2 + 65535 * main.q1_1 + 65534 * main.q1_0 - 0)) * main.CLK32[2] + (0 + main.s_0 * main.s_3 + main.s_1 * main.s_2 + main.s_2 * main.s_1 + main.s_3 * main.s_0 - main.x1[3] - main.x2_3 - main.x3[3] + (0 + 64559 * main.q1_3 + 65535 * main.q1_2 + 65534 * main.q1_1 + 65535 * main.q1_0 - 0)) * main.CLK32[3] + (0 + main.s_0 * main.s_4 + main.s_1 * main.s_3 + main.s_2 * main.s_2 + main.s_3 * main.s_1 + main.s_4 * main.s_0 - main.x1[4] - main.x2_4 - main.x3[4] + (0 + 64559 * main.q1_4 + 65535 * main.q1_3 + 65534 * main.q1_2 + 65535 * main.q1_1 + 65535 * main.q1_0 - 0)) * main.CLK32[4] + (0 + main.s_0 * main.s_5 + main.s_1 * main.s_4 + main.s_2 * main.s_3 + main.s_3 * main.s_2 + main.s_4 * main.s_1 + main.s_5 * main.s_0 - main.x1[5] - main.x2_5 - main.x3[5] + (0 + 64559 * main.q1_5 + 65535 * main.q1_4 + 65534 * main.q1_3 + 65535 * main.q1_2 + 65535 * main.q1_1 + 65535 * main.q1_0 - 0)) * main.CLK32[5] + (0 + main.s_0 * main.s_6 + main.s_1 * main.s_5 + main.s_2 * main.s_4 + main.s_3 * main.s_3 + main.s_4 * main.s_2 + main.s_5 * main.s_1 + main.s_6 * main.s_0 - main.x1[6] - main.x2_6 - main.x3[6] + (0 + 64559 * main.q1_6 + 65535 * main.q1_5 + 65534 * main.q1_4 + 65535 * main.q1_3 + 65535 * main.q1_2 + 65535 * main.q1_1 + 65535 * main.q1_0 - 0)) * main.CLK32[6] + (0 + main.s_0 * main.s_7 + main.s_1 * main.s_6 + main.s_2 * main.s_5 + main.s_3 * main.s_4 + main.s_4 * main.s_3 + main.s_5 * main.s_2 + main.s_6 * main.s_1 + main.s_7 * main.s_0 - main.x1[7] - main.x2_7 - main.x3[7] + (0 + 64559 * main.q1_7 + 65535 * main.q1_6 + 65534 * main.q1_5 + 65535 * main.q1_4 + 65535 * main.q1_3 + 65535 * main.q1_2 + 65535 * main.q1_1 + 65535 * main.q1_0 - 0)) * main.CLK32[7] + (0 + main.s_0 * main.s_8 + main.s_1 * main.s_7 + main.s_2 * main.s_6 + main.s_3 * main.s_5 + main.s_4 * main.s_4 + main.s_5 * main.s_3 + main.s_6 * main.s_2 + main.s_7 * main.s_1 + main.s_8 * main.s_0 - main.x1[8] - main.x2_8 - main.x3[8] + (0 + 64559 * main.q1_8 + 65535 * main.q1_7 + 65534 * main.q1_6 + 65535 * main.q1_5 + 65535 * main.q1_4 + 65535 * main.q1_3 + 65535 * main.q1_2 + 65535 * main.q1_1 + 65535 * main.q1_0 - 0)) * main.CLK32[8] + (0 + main.s_0 * main.s_9 + main.s_1 * main.s_8 + main.s_2 * main.s_7 + main.s_3 * main.s_6 + main.s_4 * main.s_5 + main.s_5 * main.s_4 + main.s_6 * main.s_3 + main.s_7 * main.s_2 + main.s_8 * main.s_1 + main.s_9 * main.s_0 - main.x1[9] - main.x2_9 - main.x3[9] + (0 + 64559 * main.q1_9 + 65535 * main.q1_8 + 65534 * main.q1_7 + 65535 * main.q1_6 + 65535 * main.q1_5 + 65535 * main.q1_4 + 65535 * main.q1_3 + 65535 * main.q1_2 + 65535 * main.q1_1 + 65535 * main.q1_0 - 0)) * main.CLK32[9] + (0 + main.s_0 * main.s_10 + main.s_1 * main.s_9 + main.s_2 * main.s_8 + main.s_3 * main.s_7 + main.s_4 * main.s_6 + main.s_5 * main.s_5 + main.s_6 * main.s_4 + main.s_7 * main.s_3 + main.s_8 * main.s_2 + main.s_9 * main.s_1 + main.s_10 * main.s_0 - main.x1[10] - main.x2_10 - main.x3[10] + (0 + 64559 * main.q1_10 + 65535 * main.q1_9 + 65534 * main.q1_8 + 65535 * main.q1_7 + 65535 * main.q1_6 + 65535 * main.q1_5 + 65535 * main.q1_4 + 65535 * main.q1_3 + 65535 * main.q1_2 + 65535 * main.q1_1 + 65535 * main.q1_0 - 0)) * main.CLK32[10] + (0 + main.s_0 * main.s_11 + main.s_1 * main.s_10 + main.s_2 * main.s_9 + main.s_3 * main.s_8 + main.s_4 * main.s_7 + main.s_5 * main.s_6 + main.s_6 * main.s_5 + main.s_7 * main.s_4 + main.s_8 * main.s_3 + main.s_9 * main.s_2 + main.s_10 * main.s_1 + main.s_11 * main.s_0 - main.x1[11] - main.x2_11 - main.x3[11] + (0 + 64559 * main.q1_11 + 65535 * main.q1_10 + 65534 * main.q1_9 + 65535 * main.q1_8 + 65535 * main.q1_7 + 65535 * main.q1_6 + 65535 * main.q1_5 + 65535 * main.q1_4 + 65535 * main.q1_3 + 65535 * main.q1_2 + 65535 * main.q1_1 + 65535 * main.q1_0 - 0)) * main.CLK32[11] + (0 + main.s_0 * main.s_12 + main.s_1 * main.s_11 + main.s_2 * main.s_10 + main.s_3 * main.s_9 + main.s_4 * main.s_8 + main.s_5 * main.s_7 + main.s_6 * main.s_6 + main.s_7 * main.s_5 + main.s_8 * main.s_4 + main.s_9 * main.s_3 + main.s_10 * main.s_2 + main.s_11 * main.s_1 + main.s_12 * main.s_0 - main.x1[12] - main.x2_12 - main.x3[12] + (0 + 64559 * main.q1_12 + 65535 * main.q1_11 + 65534 * main.q1_10 + 65535 * main.q1_9 + 65535 * main.q1_8 + 65535 * main.q1_7 + 65535 * main.q1_6 + 65535 * main.q1_5 + 65535 * main.q1_4 + 65535 * main.q1_3 + 65535 * main.q1_2 + 65535 * main.q1_1 + 65535 * main.q1_0 - 0)) * main.CLK32[12] + (0 + main.s_0 * main.s_13 + main.s_1 * main.s_12 + main.s_2 * main.s_11 + main.s_3 * main.s_10 + main.s_4 * main.s_9 + main.s_5 * main.s_8 + main.s_6 * main.s_7 + main.s_7 * main.s_6 + main.s_8 * main.s_5 + main.s_9 * main.s_4 + main.s_10 * main.s_3 + main.s_11 * main.s_2 + main.s_12 * main.s_1 + main.s_13 * main.s_0 - main.x1[13] - main.x2_13 - main.x3[13] + (0 + 64559 * main.q1_13 + 65535 * main.q1_12 + 65534 * main.q1_11 + 65535 * main.q1_10 + 65535 * main.q1_9 + 65535 * main.q1_8 + 65535 * main.q1_7 + 65535 * main.q1_6 + 65535 * main.q1_5 + 65535 * main.q1_4 + 65535 * main.q1_3 + 65535 * main.q1_2 + 65535 * main.q1_1 + 65535 * main.q1_0 - 0)) * main.CLK32[13] + (0 + main.s_0 * main.s_14 + main.s_1 * main.s_13 + main.s_2 * main.s_12 + main.s_3 * main.s_11 + main.s_4 * main.s_10 + main.s_5 * main.s_9 + main.s_6 * main.s_8 + main.s_7 * main.s_7 + main.s_8 * main.s_6 + main.s_9 * main.s_5 + main.s_10 * main.s_4 + main.s_11 * main.s_3 + main.s_12 * main.s_2 + main.s_13 * main.s_1 + main.s_14 * main.s_0 - main.x1[14] - main.x2_14 - main.x3[14] + (0 + 64559 * main.q1_14 + 65535 * main.q1_13 + 65534 * main.q1_12 + 65535 * main.q1_11 + 65535 * main.q1_10 + 65535 * main.q1_9 + 65535 * main.q1_8 + 65535 * main.q1_7 + 65535 * main.q1_6 + 65535 * main.q1_5 + 65535 * main.q1_4 + 65535 * main.q1_3 + 65535 * main.q1_2 + 65535 * main.q1_1 + 65535 * main.q1_0 - 0)) * main.CLK32[14] + (0 + main.s_0 * main.s_15 + main.s_1 * main.s_14 + main.s_2 * main.s_13 + main.s_3 * main.s_12 + main.s_4 * main.s_11 + main.s_5 * main.s_10 + main.s_6 * main.s_9 + main.s_7 * main.s_8 + main.s_8 * main.s_7 + main.s_9 * main.s_6 + main.s_10 * main.s_5 + main.s_11 * main.s_4 + main.s_12 * main.s_3 + main.s_13 * main.s_2 + main.s_14 * main.s_1 + main.s_15 * main.s_0 - main.x1[15] - main.x2_15 - main.x3[15] + (0 + 64559 * main.q1_15 + 65535 * main.q1_14 + 65534 * main.q1_13 + 65535 * main.q1_12 + 65535 * main.q1_11 + 65535 * main.q1_10 + 65535 * main.q1_9 + 65535 * main.q1_8 + 65535 * main.q1_7 + 65535 * main.q1_6 + 65535 * main.q1_5 + 65535 * main.q1_4 + 65535 * main.q1_3 + 65535 * main.q1_2 + 65535 * main.q1_1 + 65535 * main.q1_0 - 0)) * main.CLK32[15] + (0 + main.s_0 * 0 + main.s_1 * main.s_15 + main.s_2 * main.s_14 + main.s_3 * main.s_13 + main.s_4 * main.s_12 + main.s_5 * main.s_11 + main.s_6 * main.s_10 + main.s_7 * main.s_9 + main.s_8 * main.s_8 + main.s_9 * main.s_7 + main.s_10 * main.s_6 + main.s_11 * main.s_5 + main.s_12 * main.s_4 + main.s_13 * main.s_3 + main.s_14 * main.s_2 + main.s_15 * main.s_1 + 0 * main.s_0 - 0 - 0 - 0 + (0 + 65535 * main.q1_15 + 65534 * main.q1_14 + 65535 * main.q1_13 + 65535 * main.q1_12 + 65535 * main.q1_11 + 65535 * main.q1_10 + 65535 * main.q1_9 + 65535 * main.q1_8 + 65535 * main.q1_7 + 65535 * main.q1_6 + 65535 * main.q1_5 + 65535 * main.q1_4 + 65535 * main.q1_3 + 65535 * main.q1_2 + 65535 * main.q1_1 + 0 * main.q1_0 - 258236)) * main.CLK32[16] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * main.s_15 + main.s_3 * main.s_14 + main.s_4 * main.s_13 + main.s_5 * main.s_12 + main.s_6 * main.s_11 + main.s_7 * main.s_10 + main.s_8 * main.s_9 + main.s_9 * main.s_8 + main.s_10 * main.s_7 + main.s_11 * main.s_6 + main.s_12 * main.s_5 + main.s_13 * main.s_4 + main.s_14 * main.s_3 + main.s_15 * main.s_2 + 0 * main.s_1 + 0 * main.s_0 - 0 - 0 - 0 + (0 + 65534 * main.q1_15 + 65535 * main.q1_14 + 65535 * main.q1_13 + 65535 * main.q1_12 + 65535 * main.q1_11 + 65535 * main.q1_10 + 65535 * main.q1_9 + 65535 * main.q1_8 + 65535 * main.q1_7 + 65535 * main.q1_6 + 65535 * main.q1_5 + 65535 * main.q1_4 + 65535 * main.q1_3 + 65535 * main.q1_2 + 0 * main.q1_1 + 0 * main.q1_0 - 262140)) * main.CLK32[17] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * main.s_15 + main.s_4 * main.s_14 + main.s_5 * main.s_13 + main.s_6 * main.s_12 + main.s_7 * main.s_11 + main.s_8 * main.s_10 + main.s_9 * main.s_9 + main.s_10 * main.s_8 + main.s_11 * main.s_7 + main.s_12 * main.s_6 + main.s_13 * main.s_5 + main.s_14 * main.s_4 + main.s_15 * main.s_3 + 0 * main.s_2 + 0 * main.s_1 + 0 * main.s_0 - 0 - 0 - 0 + (0 + 65535 * main.q1_15 + 65535 * main.q1_14 + 65535 * main.q1_13 + 65535 * main.q1_12 + 65535 * main.q1_11 + 65535 * main.q1_10 + 65535 * main.q1_9 + 65535 * main.q1_8 + 65535 * main.q1_7 + 65535 * main.q1_6 + 65535 * main.q1_5 + 65535 * main.q1_4 + 65535 * main.q1_3 + 0 * main.q1_2 + 0 * main.q1_1 + 0 * main.q1_0 - 262136)) * main.CLK32[18] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * main.s_15 + main.s_5 * main.s_14 + main.s_6 * main.s_13 + main.s_7 * main.s_12 + main.s_8 * main.s_11 + main.s_9 * main.s_10 + main.s_10 * main.s_9 + main.s_11 * main.s_8 + main.s_12 * main.s_7 + main.s_13 * main.s_6 + main.s_14 * main.s_5 + main.s_15 * main.s_4 + 0 * main.s_3 + 0 * main.s_2 + 0 * main.s_1 + 0 * main.s_0 - 0 - 0 - 0 + (0 + 65535 * main.q1_15 + 65535 * main.q1_14 + 65535 * main.q1_13 + 65535 * main.q1_12 + 65535 * main.q1_11 + 65535 * main.q1_10 + 65535 * main.q1_9 + 65535 * main.q1_8 + 65535 * main.q1_7 + 65535 * main.q1_6 + 65535 * main.q1_5 + 65535 * main.q1_4 + 0 * main.q1_3 + 0 * main.q1_2 + 0 * main.q1_1 + 0 * main.q1_0 - 262140)) * main.CLK32[19] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * main.s_15 + main.s_6 * main.s_14 + main.s_7 * main.s_13 + main.s_8 * main.s_12 + main.s_9 * main.s_11 + main.s_10 * main.s_10 + main.s_11 * main.s_9 + main.s_12 * main.s_8 + main.s_13 * main.s_7 + main.s_14 * main.s_6 + main.s_15 * main.s_5 + 0 * main.s_4 + 0 * main.s_3 + 0 * main.s_2 + 0 * main.s_1 + 0 * main.s_0 - 0 - 0 - 0 + (0 + 65535 * main.q1_15 + 65535 * main.q1_14 + 65535 * main.q1_13 + 65535 * main.q1_12 + 65535 * main.q1_11 + 65535 * main.q1_10 + 65535 * main.q1_9 + 65535 * main.q1_8 + 65535 * main.q1_7 + 65535 * main.q1_6 + 65535 * main.q1_5 + 0 * main.q1_4 + 0 * main.q1_3 + 0 * main.q1_2 + 0 * main.q1_1 + 0 * main.q1_0 - 262140)) * main.CLK32[20] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * main.s_15 + main.s_7 * main.s_14 + main.s_8 * main.s_13 + main.s_9 * main.s_12 + main.s_10 * main.s_11 + main.s_11 * main.s_10 + main.s_12 * main.s_9 + main.s_13 * main.s_8 + main.s_14 * main.s_7 + main.s_15 * main.s_6 + 0 * main.s_5 + 0 * main.s_4 + 0 * main.s_3 + 0 * main.s_2 + 0 * main.s_1 + 0 * main.s_0 - 0 - 0 - 0 + (0 + 65535 * main.q1_15 + 65535 * main.q1_14 + 65535 * main.q1_13 + 65535 * main.q1_12 + 65535 * main.q1_11 + 65535 * main.q1_10 + 65535 * main.q1_9 + 65535 * main.q1_8 + 65535 * main.q1_7 + 65535 * main.q1_6 + 0 * main.q1_5 + 0 * main.q1_4 + 0 * main.q1_3 + 0 * main.q1_2 + 0 * main.q1_1 + 0 * main.q1_0 - 262140)) * main.CLK32[21] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * main.s_15 + main.s_8 * main.s_14 + main.s_9 * main.s_13 + main.s_10 * main.s_12 + main.s_11 * main.s_11 + main.s_12 * main.s_10 + main.s_13 * main.s_9 + main.s_14 * main.s_8 + main.s_15 * main.s_7 + 0 * main.s_6 + 0 * main.s_5 + 0 * main.s_4 + 0 * main.s_3 + 0 * main.s_2 + 0 * main.s_1 + 0 * main.s_0 - 0 - 0 - 0 + (0 + 65535 * main.q1_15 + 65535 * main.q1_14 + 65535 * main.q1_13 + 65535 * main.q1_12 + 65535 * main.q1_11 + 65535 * main.q1_10 + 65535 * main.q1_9 + 65535 * main.q1_8 + 65535 * main.q1_7 + 0 * main.q1_6 + 0 * main.q1_5 + 0 * main.q1_4 + 0 * main.q1_3 + 0 * main.q1_2 + 0 * main.q1_1 + 0 * main.q1_0 - 262140)) * main.CLK32[22] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * main.s_15 + main.s_9 * main.s_14 + main.s_10 * main.s_13 + main.s_11 * main.s_12 + main.s_12 * main.s_11 + main.s_13 * main.s_10 + main.s_14 * main.s_9 + main.s_15 * main.s_8 + 0 * main.s_7 + 0 * main.s_6 + 0 * main.s_5 + 0 * main.s_4 + 0 * main.s_3 + 0 * main.s_2 + 0 * main.s_1 + 0 * main.s_0 - 0 - 0 - 0 + (0 + 65535 * main.q1_15 + 65535 * main.q1_14 + 65535 * main.q1_13 + 65535 * main.q1_12 + 65535 * main.q1_11 + 65535 * main.q1_10 + 65535 * main.q1_9 + 65535 * main.q1_8 + 0 * main.q1_7 + 0 * main.q1_6 + 0 * main.q1_5 + 0 * main.q1_4 + 0 * main.q1_3 + 0 * main.q1_2 + 0 * main.q1_1 + 0 * main.q1_0 - 262140)) * main.CLK32[23] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * main.s_15 + main.s_10 * main.s_14 + main.s_11 * main.s_13 + main.s_12 * main.s_12 + main.s_13 * main.s_11 + main.s_14 * main.s_10 + main.s_15 * main.s_9 + 0 * main.s_8 + 0 * main.s_7 + 0 * main.s_6 + 0 * main.s_5 + 0 * main.s_4 + 0 * main.s_3 + 0 * main.s_2 + 0 * main.s_1 + 0 * main.s_0 - 0 - 0 - 0 + (0 + 65535 * main.q1_15 + 65535 * main.q1_14 + 65535 * main.q1_13 + 65535 * main.q1_12 + 65535 * main.q1_11 + 65535 * main.q1_10 + 65535 * main.q1_9 + 0 * main.q1_8 + 0 * main.q1_7 + 0 * main.q1_6 + 0 * main.q1_5 + 0 * main.q1_4 + 0 * main.q1_3 + 0 * main.q1_2 + 0 * main.q1_1 + 0 * main.q1_0 - 262140)) * main.CLK32[24] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * main.s_15 + main.s_11 * main.s_14 + main.s_12 * main.s_13 + main.s_13 * main.s_12 + main.s_14 * main.s_11 + main.s_15 * main.s_10 + 0 * main.s_9 + 0 * main.s_8 + 0 * main.s_7 + 0 * main.s_6 + 0 * main.s_5 + 0 * main.s_4 + 0 * main.s_3 + 0 * main.s_2 + 0 * main.s_1 + 0 * main.s_0 - 0 - 0 - 0 + (0 + 65535 * main.q1_15 + 65535 * main.q1_14 + 65535 * main.q1_13 + 65535 * main.q1_12 + 65535 * main.q1_11 + 65535 * main.q1_10 + 0 * main.q1_9 + 0 * main.q1_8 + 0 * main.q1_7 + 0 * main.q1_6 + 0 * main.q1_5 + 0 * main.q1_4 + 0 * main.q1_3 + 0 * main.q1_2 + 0 * main.q1_1 + 0 * main.q1_0 - 262140)) * main.CLK32[25] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * main.s_15 + main.s_12 * main.s_14 + main.s_13 * main.s_13 + main.s_14 * main.s_12 + main.s_15 * main.s_11 + 0 * main.s_10 + 0 * main.s_9 + 0 * main.s_8 + 0 * main.s_7 + 0 * main.s_6 + 0 * main.s_5 + 0 * main.s_4 + 0 * main.s_3 + 0 * main.s_2 + 0 * main.s_1 + 0 * main.s_0 - 0 - 0 - 0 + (0 + 65535 * main.q1_15 + 65535 * main.q1_14 + 65535 * main.q1_13 + 65535 * main.q1_12 + 65535 * main.q1_11 + 0 * main.q1_10 + 0 * main.q1_9 + 0 * main.q1_8 + 0 * main.q1_7 + 0 * main.q1_6 + 0 * main.q1_5 + 0 * main.q1_4 + 0 * main.q1_3 + 0 * main.q1_2 + 0 * main.q1_1 + 0 * main.q1_0 - 262140)) * main.CLK32[26] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * main.s_15 + main.s_13 * main.s_14 + main.s_14 * main.s_13 + main.s_15 * main.s_12 + 0 * main.s_11 + 0 * main.s_10 + 0 * main.s_9 + 0 * main.s_8 + 0 * main.s_7 + 0 * main.s_6 + 0 * main.s_5 + 0 * main.s_4 + 0 * main.s_3 + 0 * main.s_2 + 0 * main.s_1 + 0 * main.s_0 - 0 - 0 - 0 + (0 + 65535 * main.q1_15 + 65535 * main.q1_14 + 65535 * main.q1_13 + 65535 * main.q1_12 + 0 * main.q1_11 + 0 * main.q1_10 + 0 * main.q1_9 + 0 * main.q1_8 + 0 * main.q1_7 + 0 * main.q1_6 + 0 * main.q1_5 + 0 * main.q1_4 + 0 * main.q1_3 + 0 * main.q1_2 + 0 * main.q1_1 + 0 * main.q1_0 - 262140)) * main.CLK32[27] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * main.s_15 + main.s_14 * main.s_14 + main.s_15 * main.s_13 + 0 * main.s_12 + 0 * main.s_11 + 0 * main.s_10 + 0 * main.s_9 + 0 * main.s_8 + 0 * main.s_7 + 0 * main.s_6 + 0 * main.s_5 + 0 * main.s_4 + 0 * main.s_3 + 0 * main.s_2 + 0 * main.s_1 + 0 * main.s_0 - 0 - 0 - 0 + (0 + 65535 * main.q1_15 + 65535 * main.q1_14 + 65535 * main.q1_13 + 0 * main.q1_12 + 0 * main.q1_11 + 0 * main.q1_10 + 0 * main.q1_9 + 0 * main.q1_8 + 0 * main.q1_7 + 0 * main.q1_6 + 0 * main.q1_5 + 0 * main.q1_4 + 0 * main.q1_3 + 0 * main.q1_2 + 0 * main.q1_1 + 0 * main.q1_0 - 262140)) * main.CLK32[28] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * 0 + main.s_14 * main.s_15 + main.s_15 * main.s_14 + 0 * main.s_13 + 0 * main.s_12 + 0 * main.s_11 + 0 * main.s_10 + 0 * main.s_9 + 0 * main.s_8 + 0 * main.s_7 + 0 * main.s_6 + 0 * main.s_5 + 0 * main.s_4 + 0 * main.s_3 + 0 * main.s_2 + 0 * main.s_1 + 0 * main.s_0 - 0 - 0 - 0 + (0 + 65535 * main.q1_15 + 65535 * main.q1_14 + 0 * main.q1_13 + 0 * main.q1_12 + 0 * main.q1_11 + 0 * main.q1_10 + 0 * main.q1_9 + 0 * main.q1_8 + 0 * main.q1_7 + 0 * main.q1_6 + 0 * main.q1_5 + 0 * main.q1_4 + 0 * main.q1_3 + 0 * main.q1_2 + 0 * main.q1_1 + 0 * main.q1_0 - 262140)) * main.CLK32[29] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * 0 + main.s_14 * 0 + main.s_15 * main.s_15 + 0 * main.s_14 + 0 * main.s_13 + 0 * main.s_12 + 0 * main.s_11 + 0 * main.s_10 + 0 * main.s_9 + 0 * main.s_8 + 0 * main.s_7 + 0 * main.s_6 + 0 * main.s_5 + 0 * main.s_4 + 0 * main.s_3 + 0 * main.s_2 + 0 * main.s_1 + 0 * main.s_0 - 0 - 0 - 0 + (0 + 65535 * main.q1_15 + 0 * main.q1_14 + 0 * main.q1_13 + 0 * main.q1_12 + 0 * main.q1_11 + 0 * main.q1_10 + 0 * main.q1_9 + 0 * main.q1_8 + 0 * main.q1_7 + 0 * main.q1_6 + 0 * main.q1_5 + 0 * main.q1_4 + 0 * main.q1_3 + 0 * main.q1_2 + 0 * main.q1_1 + 0 * main.q1_0 - 262140)) * main.CLK32[30] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * 0 + main.s_14 * 0 + main.s_15 * 0 + 0 * main.s_15 + 0 * main.s_14 + 0 * main.s_13 + 0 * main.s_12 + 0 * main.s_11 + 0 * main.s_10 + 0 * main.s_9 + 0 * main.s_8 + 0 * main.s_7 + 0 * main.s_6 + 0 * main.s_5 + 0 * main.s_4 + 0 * main.s_3 + 0 * main.s_2 + 0 * main.s_1 + 0 * main.s_0 - 0 - 0 - 0 + (0 + 0 * main.q1_15 + 0 * main.q1_14 + 0 * main.q1_13 + 0 * main.q1_12 + 0 * main.q1_11 + 0 * main.q1_10 + 0 * main.q1_9 + 0 * main.q1_8 + 0 * main.q1_7 + 0 * main.q1_6 + 0 * main.q1_5 + 0 * main.q1_4 + 0 * main.q1_3 + 0 * main.q1_2 + 0 * main.q1_1 + 0 * main.q1_0 - 262140)) * main.CLK32[31];
    col eq4_sum = 0 + (0 + main.s_0 * main.x1[0] - (0 + main.s_0 * main.x3[0]) - main.y1[0] - main.y3[0] + (0 + 64559 * main.q2_0 - 0)) * main.CLK32[0] + (0 + main.s_0 * main.x1[1] + main.s_1 * main.x1[0] - (0 + main.s_0 * main.x3[1] + main.s_1 * main.x3[0]) - main.y1[1] - main.y3[1] + (0 + 64559 * main.q2_1 + 65535 * main.q2_0 - 0)) * main.CLK32[1] + (0 + main.s_0 * main.x1[2] + main.s_1 * main.x1[1] + main.s_2 * main.x1[0] - (0 + main.s_0 * main.x3[2] + main.s_1 * main.x3[1] + main.s_2 * main.x3[0]) - main.y1[2] - main.y3[2] + (0 + 64559 * main.q2_2 + 65535 * main.q2_1 + 65534 * main.q2_0 - 0)) * main.CLK32[2] + (0 + main.s_0 * main.x1[3] + main.s_1 * main.x1[2] + main.s_2 * main.x1[1] + main.s_3 * main.x1[0] - (0 + main.s_0 * main.x3[3] + main.s_1 * main.x3[2] + main.s_2 * main.x3[1] + main.s_3 * main.x3[0]) - main.y1[3] - main.y3[3] + (0 + 64559 * main.q2_3 + 65535 * main.q2_2 + 65534 * main.q2_1 + 65535 * main.q2_0 - 0)) * main.CLK32[3] + (0 + main.s_0 * main.x1[4] + main.s_1 * main.x1[3] + main.s_2 * main.x1[2] + main.s_3 * main.x1[1] + main.s_4 * main.x1[0] - (0 + main.s_0 * main.x3[4] + main.s_1 * main.x3[3] + main.s_2 * main.x3[2] + main.s_3 * main.x3[1] + main.s_4 * main.x3[0]) - main.y1[4] - main.y3[4] + (0 + 64559 * main.q2_4 + 65535 * main.q2_3 + 65534 * main.q2_2 + 65535 * main.q2_1 + 65535 * main.q2_0 - 0)) * main.CLK32[4] + (0 + main.s_0 * main.x1[5] + main.s_1 * main.x1[4] + main.s_2 * main.x1[3] + main.s_3 * main.x1[2] + main.s_4 * main.x1[1] + main.s_5 * main.x1[0] - (0 + main.s_0 * main.x3[5] + main.s_1 * main.x3[4] + main.s_2 * main.x3[3] + main.s_3 * main.x3[2] + main.s_4 * main.x3[1] + main.s_5 * main.x3[0]) - main.y1[5] - main.y3[5] + (0 + 64559 * main.q2_5 + 65535 * main.q2_4 + 65534 * main.q2_3 + 65535 * main.q2_2 + 65535 * main.q2_1 + 65535 * main.q2_0 - 0)) * main.CLK32[5] + (0 + main.s_0 * main.x1[6] + main.s_1 * main.x1[5] + main.s_2 * main.x1[4] + main.s_3 * main.x1[3] + main.s_4 * main.x1[2] + main.s_5 * main.x1[1] + main.s_6 * main.x1[0] - (0 + main.s_0 * main.x3[6] + main.s_1 * main.x3[5] + main.s_2 * main.x3[4] + main.s_3 * main.x3[3] + main.s_4 * main.x3[2] + main.s_5 * main.x3[1] + main.s_6 * main.x3[0]) - main.y1[6] - main.y3[6] + (0 + 64559 * main.q2_6 + 65535 * main.q2_5 + 65534 * main.q2_4 + 65535 * main.q2_3 + 65535 * main.q2_2 + 65535 * main.q2_1 + 65535 * main.q2_0 - 0)) * main.CLK32[6] + (0 + main.s_0 * main.x1[7] + main.s_1 * main.x1[6] + main.s_2 * main.x1[5] + main.s_3 * main.x1[4] + main.s_4 * main.x1[3] + main.s_5 * main.x1[2] + main.s_6 * main.x1[1] + main.s_7 * main.x1[0] - (0 + main.s_0 * main.x3[7] + main.s_1 * main.x3[6] + main.s_2 * main.x3[5] + main.s_3 * main.x3[4] + main.s_4 * main.x3[3] + main.s_5 * main.x3[2] + main.s_6 * main.x3[1] + main.s_7 * main.x3[0]) - main.y1[7] - main.y3[7] + (0 + 64559 * main.q2_7 + 65535 * main.q2_6 + 65534 * main.q2_5 + 65535 * main.q2_4 + 65535 * main.q2_3 + 65535 * main.q2_2 + 65535 * main.q2_1 + 65535 * main.q2_0 - 0)) * main.CLK32[7] + (0 + main.s_0 * main.x1[8] + main.s_1 * main.x1[7] + main.s_2 * main.x1[6] + main.s_3 * main.x1[5] + main.s_4 * main.x1[4] + main.s_5 * main.x1[3] + main.s_6 * main.x1[2] + main.s_7 * main.x1[1] + main.s_8 * main.x1[0] - (0 + main.s_0 * main.x3[8] + main.s_1 * main.x3[7] + main.s_2 * main.x3[6] + main.s_3 * main.x3[5] + main.s_4 * main.x3[4] + main.s_5 * main.x3[3] + main.s_6 * main.x3[2] + main.s_7 * main.x3[1] + main.s_8 * main.x3[0]) - main.y1[8] - main.y3[8] + (0 + 64559 * main.q2_8 + 65535 * main.q2_7 + 65534 * main.q2_6 + 65535 * main.q2_5 + 65535 * main.q2_4 + 65535 * main.q2_3 + 65535 * main.q2_2 + 65535 * main.q2_1 + 65535 * main.q2_0 - 0)) * main.CLK32[8] + (0 + main.s_0 * main.x1[9] + main.s_1 * main.x1[8] + main.s_2 * main.x1[7] + main.s_3 * main.x1[6] + main.s_4 * main.x1[5] + main.s_5 * main.x1[4] + main.s_6 * main.x1[3] + main.s_7 * main.x1[2] + main.s_8 * main.x1[1] + main.s_9 * main.x1[0] - (0 + main.s_0 * main.x3[9] + main.s_1 * main.x3[8] + main.s_2 * main.x3[7] + main.s_3 * main.x3[6] + main.s_4 * main.x3[5] + main.s_5 * main.x3[4] + main.s_6 * main.x3[3] + main.s_7 * main.x3[2] + main.s_8 * main.x3[1] + main.s_9 * main.x3[0]) - main.y1[9] - main.y3[9] + (0 + 64559 * main.q2_9 + 65535 * main.q2_8 + 65534 * main.q2_7 + 65535 * main.q2_6 + 65535 * main.q2_5 + 65535 * main.q2_4 + 65535 * main.q2_3 + 65535 * main.q2_2 + 65535 * main.q2_1 + 65535 * main.q2_0 - 0)) * main.CLK32[9] + (0 + main.s_0 * main.x1[10] + main.s_1 * main.x1[9] + main.s_2 * main.x1[8] + main.s_3 * main.x1[7] + main.s_4 * main.x1[6] + main.s_5 * main.x1[5] + main.s_6 * main.x1[4] + main.s_7 * main.x1[3] + main.s_8 * main.x1[2] + main.s_9 * main.x1[1] + main.s_10 * main.x1[0] - (0 + main.s_0 * main.x3[10] + main.s_1 * main.x3[9] + main.s_2 * main.x3[8] + main.s_3 * main.x3[7] + main.s_4 * main.x3[6] + main.s_5 * main.x3[5] + main.s_6 * main.x3[4] + main.s_7 * main.x3[3] + main.s_8 * main.x3[2] + main.s_9 * main.x3[1] + main.s_10 * main.x3[0]) - main.y1[10] - main.y3[10] + (0 + 64559 * main.q2_10 + 65535 * main.q2_9 + 65534 * main.q2_8 + 65535 * main.q2_7 + 65535 * main.q2_6 + 65535 * main.q2_5 + 65535 * main.q2_4 + 65535 * main.q2_3 + 65535 * main.q2_2 + 65535 * main.q2_1 + 65535 * main.q2_0 - 0)) * main.CLK32[10] + (0 + main.s_0 * main.x1[11] + main.s_1 * main.x1[10] + main.s_2 * main.x1[9] + main.s_3 * main.x1[8] + main.s_4 * main.x1[7] + main.s_5 * main.x1[6] + main.s_6 * main.x1[5] + main.s_7 * main.x1[4] + main.s_8 * main.x1[3] + main.s_9 * main.x1[2] + main.s_10 * main.x1[1] + main.s_11 * main.x1[0] - (0 + main.s_0 * main.x3[11] + main.s_1 * main.x3[10] + main.s_2 * main.x3[9] + main.s_3 * main.x3[8] + main.s_4 * main.x3[7] + main.s_5 * main.x3[6] + main.s_6 * main.x3[5] + main.s_7 * main.x3[4] + main.s_8 * main.x3[3] + main.s_9 * main.x3[2] + main.s_10 * main.x3[1] + main.s_11 * main.x3[0]) - main.y1[11] - main.y3[11] + (0 + 64559 * main.q2_11 + 65535 * main.q2_10 + 65534 * main.q2_9 + 65535 * main.q2_8 + 65535 * main.q2_7 + 65535 * main.q2_6 + 65535 * main.q2_5 + 65535 * main.q2_4 + 65535 * main.q2_3 + 65535 * main.q2_2 + 65535 * main.q2_1 + 65535 * main.q2_0 - 0)) * main.CLK32[11] + (0 + main.s_0 * main.x1[12] + main.s_1 * main.x1[11] + main.s_2 * main.x1[10] + main.s_3 * main.x1[9] + main.s_4 * main.x1[8] + main.s_5 * main.x1[7] + main.s_6 * main.x1[6] + main.s_7 * main.x1[5] + main.s_8 * main.x1[4] + main.s_9 * main.x1[3] + main.s_10 * main.x1[2] + main.s_11 * main.x1[1] + main.s_12 * main.x1[0] - (0 + main.s_0 * main.x3[12] + main.s_1 * main.x3[11] + main.s_2 * main.x3[10] + main.s_3 * main.x3[9] + main.s_4 * main.x3[8] + main.s_5 * main.x3[7] + main.s_6 * main.x3[6] + main.s_7 * main.x3[5] + main.s_8 * main.x3[4] + main.s_9 * main.x3[3] + main.s_10 * main.x3[2] + main.s_11 * main.x3[1] + main.s_12 * main.x3[0]) - main.y1[12] - main.y3[12] + (0 + 64559 * main.q2_12 + 65535 * main.q2_11 + 65534 * main.q2_10 + 65535 * main.q2_9 + 65535 * main.q2_8 + 65535 * main.q2_7 + 65535 * main.q2_6 + 65535 * main.q2_5 + 65535 * main.q2_4 + 65535 * main.q2_3 + 65535 * main.q2_2 + 65535 * main.q2_1 + 65535 * main.q2_0 - 0)) * main.CLK32[12] + (0 + main.s_0 * main.x1[13] + main.s_1 * main.x1[12] + main.s_2 * main.x1[11] + main.s_3 * main.x1[10] + main.s_4 * main.x1[9] + main.s_5 * main.x1[8] + main.s_6 * main.x1[7] + main.s_7 * main.x1[6] + main.s_8 * main.x1[5] + main.s_9 * main.x1[4] + main.s_10 * main.x1[3] + main.s_11 * main.x1[2] + main.s_12 * main.x1[1] + main.s_13 * main.x1[0] - (0 + main.s_0 * main.x3[13] + main.s_1 * main.x3[12] + main.s_2 * main.x3[11] + main.s_3 * main.x3[10] + main.s_4 * main.x3[9] + main.s_5 * main.x3[8] + main.s_6 * main.x3[7] + main.s_7 * main.x3[6] + main.s_8 * main.x3[5] + main.s_9 * main.x3[4] + main.s_10 * main.x3[3] + main.s_11 * main.x3[2] + main.s_12 * main.x3[1] + main.s_13 * main.x3[0]) - main.y1[13] - main.y3[13] + (0 + 64559 * main.q2_13 + 65535 * main.q2_12 + 65534 * main.q2_11 + 65535 * main.q2_10 + 65535 * main.q2_9 + 65535 * main.q2_8 + 65535 * main.q2_7 + 65535 * main.q2_6 + 65535 * main.q2_5 + 65535 * main.q2_4 + 65535 * main.q2_3 + 65535 * main.q2_2 + 65535 * main.q2_1 + 65535 * main.q2_0 - 0)) * main.CLK32[13] + (0 + main.s_0 * main.x1[14] + main.s_1 * main.x1[13] + main.s_2 * main.x1[12] + main.s_3 * main.x1[11] + main.s_4 * main.x1[10] + main.s_5 * main.x1[9] + main.s_6 * main.x1[8] + main.s_7 * main.x1[7] + main.s_8 * main.x1[6] + main.s_9 * main.x1[5] + main.s_10 * main.x1[4] + main.s_11 * main.x1[3] + main.s_12 * main.x1[2] + main.s_13 * main.x1[1] + main.s_14 * main.x1[0] - (0 + main.s_0 * main.x3[14] + main.s_1 * main.x3[13] + main.s_2 * main.x3[12] + main.s_3 * main.x3[11] + main.s_4 * main.x3[10] + main.s_5 * main.x3[9] + main.s_6 * main.x3[8] + main.s_7 * main.x3[7] + main.s_8 * main.x3[6] + main.s_9 * main.x3[5] + main.s_10 * main.x3[4] + main.s_11 * main.x3[3] + main.s_12 * main.x3[2] + main.s_13 * main.x3[1] + main.s_14 * main.x3[0]) - main.y1[14] - main.y3[14] + (0 + 64559 * main.q2_14 + 65535 * main.q2_13 + 65534 * main.q2_12 + 65535 * main.q2_11 + 65535 * main.q2_10 + 65535 * main.q2_9 + 65535 * main.q2_8 + 65535 * main.q2_7 + 65535 * main.q2_6 + 65535 * main.q2_5 + 65535 * main.q2_4 + 65535 * main.q2_3 + 65535 * main.q2_2 + 65535 * main.q2_1 + 65535 * main.q2_0 - 0)) * main.CLK32[14] + (0 + main.s_0 * main.x1[15] + main.s_1 * main.x1[14] + main.s_2 * main.x1[13] + main.s_3 * main.x1[12] + main.s_4 * main.x1[11] + main.s_5 * main.x1[10] + main.s_6 * main.x1[9] + main.s_7 * main.x1[8] + main.s_8 * main.x1[7] + main.s_9 * main.x1[6] + main.s_10 * main.x1[5] + main.s_11 * main.x1[4] + main.s_12 * main.x1[3] + main.s_13 * main.x1[2] + main.s_14 * main.x1[1] + main.s_15 * main.x1[0] - (0 + main.s_0 * main.x3[15] + main.s_1 * main.x3[14] + main.s_2 * main.x3[13] + main.s_3 * main.x3[12] + main.s_4 * main.x3[11] + main.s_5 * main.x3[10] + main.s_6 * main.x3[9] + main.s_7 * main.x3[8] + main.s_8 * main.x3[7] + main.s_9 * main.x3[6] + main.s_10 * main.x3[5] + main.s_11 * main.x3[4] + main.s_12 * main.x3[3] + main.s_13 * main.x3[2] + main.s_14 * main.x3[1] + main.s_15 * main.x3[0]) - main.y1[15] - main.y3[15] + (0 + 64559 * main.q2_15 + 65535 * main.q2_14 + 65534 * main.q2_13 + 65535 * main.q2_12 + 65535 * main.q2_11 + 65535 * main.q2_10 + 65535 * main.q2_9 + 65535 * main.q2_8 + 65535 * main.q2_7 + 65535 * main.q2_6 + 65535 * main.q2_5 + 65535 * main.q2_4 + 65535 * main.q2_3 + 65535 * main.q2_2 + 65535 * main.q2_1 + 65535 * main.q2_0 - 0)) * main.CLK32[15] + (0 + main.s_0 * 0 + main.s_1 * main.x1[15] + main.s_2 * main.x1[14] + main.s_3 * main.x1[13] + main.s_4 * main.x1[12] + main.s_5 * main.x1[11] + main.s_6 * main.x1[10] + main.s_7 * main.x1[9] + main.s_8 * main.x1[8] + main.s_9 * main.x1[7] + main.s_10 * main.x1[6] + main.s_11 * main.x1[5] + main.s_12 * main.x1[4] + main.s_13 * main.x1[3] + main.s_14 * main.x1[2] + main.s_15 * main.x1[1] + 0 * main.x1[0] - (0 + main.s_0 * 0 + main.s_1 * main.x3[15] + main.s_2 * main.x3[14] + main.s_3 * main.x3[13] + main.s_4 * main.x3[12] + main.s_5 * main.x3[11] + main.s_6 * main.x3[10] + main.s_7 * main.x3[9] + main.s_8 * main.x3[8] + main.s_9 * main.x3[7] + main.s_10 * main.x3[6] + main.s_11 * main.x3[5] + main.s_12 * main.x3[4] + main.s_13 * main.x3[3] + main.s_14 * main.x3[2] + main.s_15 * main.x3[1] + 0 * main.x3[0]) - 0 - 0 + (0 + 65535 * main.q2_15 + 65534 * main.q2_14 + 65535 * main.q2_13 + 65535 * main.q2_12 + 65535 * main.q2_11 + 65535 * main.q2_10 + 65535 * main.q2_9 + 65535 * main.q2_8 + 65535 * main.q2_7 + 65535 * main.q2_6 + 65535 * main.q2_5 + 65535 * main.q2_4 + 65535 * main.q2_3 + 65535 * main.q2_2 + 65535 * main.q2_1 + 0 * main.q2_0 - 258236)) * main.CLK32[16] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * main.x1[15] + main.s_3 * main.x1[14] + main.s_4 * main.x1[13] + main.s_5 * main.x1[12] + main.s_6 * main.x1[11] + main.s_7 * main.x1[10] + main.s_8 * main.x1[9] + main.s_9 * main.x1[8] + main.s_10 * main.x1[7] + main.s_11 * main.x1[6] + main.s_12 * main.x1[5] + main.s_13 * main.x1[4] + main.s_14 * main.x1[3] + main.s_15 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0] - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * main.x3[15] + main.s_3 * main.x3[14] + main.s_4 * main.x3[13] + main.s_5 * main.x3[12] + main.s_6 * main.x3[11] + main.s_7 * main.x3[10] + main.s_8 * main.x3[9] + main.s_9 * main.x3[8] + main.s_10 * main.x3[7] + main.s_11 * main.x3[6] + main.s_12 * main.x3[5] + main.s_13 * main.x3[4] + main.s_14 * main.x3[3] + main.s_15 * main.x3[2] + 0 * main.x3[1] + 0 * main.x3[0]) - 0 - 0 + (0 + 65534 * main.q2_15 + 65535 * main.q2_14 + 65535 * main.q2_13 + 65535 * main.q2_12 + 65535 * main.q2_11 + 65535 * main.q2_10 + 65535 * main.q2_9 + 65535 * main.q2_8 + 65535 * main.q2_7 + 65535 * main.q2_6 + 65535 * main.q2_5 + 65535 * main.q2_4 + 65535 * main.q2_3 + 65535 * main.q2_2 + 0 * main.q2_1 + 0 * main.q2_0 - 262140)) * main.CLK32[17] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * main.x1[15] + main.s_4 * main.x1[14] + main.s_5 * main.x1[13] + main.s_6 * main.x1[12] + main.s_7 * main.x1[11] + main.s_8 * main.x1[10] + main.s_9 * main.x1[9] + main.s_10 * main.x1[8] + main.s_11 * main.x1[7] + main.s_12 * main.x1[6] + main.s_13 * main.x1[5] + main.s_14 * main.x1[4] + main.s_15 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0] - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * main.x3[15] + main.s_4 * main.x3[14] + main.s_5 * main.x3[13] + main.s_6 * main.x3[12] + main.s_7 * main.x3[11] + main.s_8 * main.x3[10] + main.s_9 * main.x3[9] + main.s_10 * main.x3[8] + main.s_11 * main.x3[7] + main.s_12 * main.x3[6] + main.s_13 * main.x3[5] + main.s_14 * main.x3[4] + main.s_15 * main.x3[3] + 0 * main.x3[2] + 0 * main.x3[1] + 0 * main.x3[0]) - 0 - 0 + (0 + 65535 * main.q2_15 + 65535 * main.q2_14 + 65535 * main.q2_13 + 65535 * main.q2_12 + 65535 * main.q2_11 + 65535 * main.q2_10 + 65535 * main.q2_9 + 65535 * main.q2_8 + 65535 * main.q2_7 + 65535 * main.q2_6 + 65535 * main.q2_5 + 65535 * main.q2_4 + 65535 * main.q2_3 + 0 * main.q2_2 + 0 * main.q2_1 + 0 * main.q2_0 - 262136)) * main.CLK32[18] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * main.x1[15] + main.s_5 * main.x1[14] + main.s_6 * main.x1[13] + main.s_7 * main.x1[12] + main.s_8 * main.x1[11] + main.s_9 * main.x1[10] + main.s_10 * main.x1[9] + main.s_11 * main.x1[8] + main.s_12 * main.x1[7] + main.s_13 * main.x1[6] + main.s_14 * main.x1[5] + main.s_15 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0] - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * main.x3[15] + main.s_5 * main.x3[14] + main.s_6 * main.x3[13] + main.s_7 * main.x3[12] + main.s_8 * main.x3[11] + main.s_9 * main.x3[10] + main.s_10 * main.x3[9] + main.s_11 * main.x3[8] + main.s_12 * main.x3[7] + main.s_13 * main.x3[6] + main.s_14 * main.x3[5] + main.s_15 * main.x3[4] + 0 * main.x3[3] + 0 * main.x3[2] + 0 * main.x3[1] + 0 * main.x3[0]) - 0 - 0 + (0 + 65535 * main.q2_15 + 65535 * main.q2_14 + 65535 * main.q2_13 + 65535 * main.q2_12 + 65535 * main.q2_11 + 65535 * main.q2_10 + 65535 * main.q2_9 + 65535 * main.q2_8 + 65535 * main.q2_7 + 65535 * main.q2_6 + 65535 * main.q2_5 + 65535 * main.q2_4 + 0 * main.q2_3 + 0 * main.q2_2 + 0 * main.q2_1 + 0 * main.q2_0 - 262140)) * main.CLK32[19] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * main.x1[15] + main.s_6 * main.x1[14] + main.s_7 * main.x1[13] + main.s_8 * main.x1[12] + main.s_9 * main.x1[11] + main.s_10 * main.x1[10] + main.s_11 * main.x1[9] + main.s_12 * main.x1[8] + main.s_13 * main.x1[7] + main.s_14 * main.x1[6] + main.s_15 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0] - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * main.x3[15] + main.s_6 * main.x3[14] + main.s_7 * main.x3[13] + main.s_8 * main.x3[12] + main.s_9 * main.x3[11] + main.s_10 * main.x3[10] + main.s_11 * main.x3[9] + main.s_12 * main.x3[8] + main.s_13 * main.x3[7] + main.s_14 * main.x3[6] + main.s_15 * main.x3[5] + 0 * main.x3[4] + 0 * main.x3[3] + 0 * main.x3[2] + 0 * main.x3[1] + 0 * main.x3[0]) - 0 - 0 + (0 + 65535 * main.q2_15 + 65535 * main.q2_14 + 65535 * main.q2_13 + 65535 * main.q2_12 + 65535 * main.q2_11 + 65535 * main.q2_10 + 65535 * main.q2_9 + 65535 * main.q2_8 + 65535 * main.q2_7 + 65535 * main.q2_6 + 65535 * main.q2_5 + 0 * main.q2_4 + 0 * main.q2_3 + 0 * main.q2_2 + 0 * main.q2_1 + 0 * main.q2_0 - 262140)) * main.CLK32[20] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * main.x1[15] + main.s_7 * main.x1[14] + main.s_8 * main.x1[13] + main.s_9 * main.x1[12] + main.s_10 * main.x1[11] + main.s_11 * main.x1[10] + main.s_12 * main.x1[9] + main.s_13 * main.x1[8] + main.s_14 * main.x1[7] + main.s_15 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0] - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * main.x3[15] + main.s_7 * main.x3[14] + main.s_8 * main.x3[13] + main.s_9 * main.x3[12] + main.s_10 * main.x3[11] + main.s_11 * main.x3[10] + main.s_12 * main.x3[9] + main.s_13 * main.x3[8] + main.s_14 * main.x3[7] + main.s_15 * main.x3[6] + 0 * main.x3[5] + 0 * main.x3[4] + 0 * main.x3[3] + 0 * main.x3[2] + 0 * main.x3[1] + 0 * main.x3[0]) - 0 - 0 + (0 + 65535 * main.q2_15 + 65535 * main.q2_14 + 65535 * main.q2_13 + 65535 * main.q2_12 + 65535 * main.q2_11 + 65535 * main.q2_10 + 65535 * main.q2_9 + 65535 * main.q2_8 + 65535 * main.q2_7 + 65535 * main.q2_6 + 0 * main.q2_5 + 0 * main.q2_4 + 0 * main.q2_3 + 0 * main.q2_2 + 0 * main.q2_1 + 0 * main.q2_0 - 262140)) * main.CLK32[21] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * main.x1[15] + main.s_8 * main.x1[14] + main.s_9 * main.x1[13] + main.s_10 * main.x1[12] + main.s_11 * main.x1[11] + main.s_12 * main.x1[10] + main.s_13 * main.x1[9] + main.s_14 * main.x1[8] + main.s_15 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0] - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * main.x3[15] + main.s_8 * main.x3[14] + main.s_9 * main.x3[13] + main.s_10 * main.x3[12] + main.s_11 * main.x3[11] + main.s_12 * main.x3[10] + main.s_13 * main.x3[9] + main.s_14 * main.x3[8] + main.s_15 * main.x3[7] + 0 * main.x3[6] + 0 * main.x3[5] + 0 * main.x3[4] + 0 * main.x3[3] + 0 * main.x3[2] + 0 * main.x3[1] + 0 * main.x3[0]) - 0 - 0 + (0 + 65535 * main.q2_15 + 65535 * main.q2_14 + 65535 * main.q2_13 + 65535 * main.q2_12 + 65535 * main.q2_11 + 65535 * main.q2_10 + 65535 * main.q2_9 + 65535 * main.q2_8 + 65535 * main.q2_7 + 0 * main.q2_6 + 0 * main.q2_5 + 0 * main.q2_4 + 0 * main.q2_3 + 0 * main.q2_2 + 0 * main.q2_1 + 0 * main.q2_0 - 262140)) * main.CLK32[22] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * main.x1[15] + main.s_9 * main.x1[14] + main.s_10 * main.x1[13] + main.s_11 * main.x1[12] + main.s_12 * main.x1[11] + main.s_13 * main.x1[10] + main.s_14 * main.x1[9] + main.s_15 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0] - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * main.x3[15] + main.s_9 * main.x3[14] + main.s_10 * main.x3[13] + main.s_11 * main.x3[12] + main.s_12 * main.x3[11] + main.s_13 * main.x3[10] + main.s_14 * main.x3[9] + main.s_15 * main.x3[8] + 0 * main.x3[7] + 0 * main.x3[6] + 0 * main.x3[5] + 0 * main.x3[4] + 0 * main.x3[3] + 0 * main.x3[2] + 0 * main.x3[1] + 0 * main.x3[0]) - 0 - 0 + (0 + 65535 * main.q2_15 + 65535 * main.q2_14 + 65535 * main.q2_13 + 65535 * main.q2_12 + 65535 * main.q2_11 + 65535 * main.q2_10 + 65535 * main.q2_9 + 65535 * main.q2_8 + 0 * main.q2_7 + 0 * main.q2_6 + 0 * main.q2_5 + 0 * main.q2_4 + 0 * main.q2_3 + 0 * main.q2_2 + 0 * main.q2_1 + 0 * main.q2_0 - 262140)) * main.CLK32[23] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * main.x1[15] + main.s_10 * main.x1[14] + main.s_11 * main.x1[13] + main.s_12 * main.x1[12] + main.s_13 * main.x1[11] + main.s_14 * main.x1[10] + main.s_15 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0] - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * main.x3[15] + main.s_10 * main.x3[14] + main.s_11 * main.x3[13] + main.s_12 * main.x3[12] + main.s_13 * main.x3[11] + main.s_14 * main.x3[10] + main.s_15 * main.x3[9] + 0 * main.x3[8] + 0 * main.x3[7] + 0 * main.x3[6] + 0 * main.x3[5] + 0 * main.x3[4] + 0 * main.x3[3] + 0 * main.x3[2] + 0 * main.x3[1] + 0 * main.x3[0]) - 0 - 0 + (0 + 65535 * main.q2_15 + 65535 * main.q2_14 + 65535 * main.q2_13 + 65535 * main.q2_12 + 65535 * main.q2_11 + 65535 * main.q2_10 + 65535 * main.q2_9 + 0 * main.q2_8 + 0 * main.q2_7 + 0 * main.q2_6 + 0 * main.q2_5 + 0 * main.q2_4 + 0 * main.q2_3 + 0 * main.q2_2 + 0 * main.q2_1 + 0 * main.q2_0 - 262140)) * main.CLK32[24] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * main.x1[15] + main.s_11 * main.x1[14] + main.s_12 * main.x1[13] + main.s_13 * main.x1[12] + main.s_14 * main.x1[11] + main.s_15 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0] - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * main.x3[15] + main.s_11 * main.x3[14] + main.s_12 * main.x3[13] + main.s_13 * main.x3[12] + main.s_14 * main.x3[11] + main.s_15 * main.x3[10] + 0 * main.x3[9] + 0 * main.x3[8] + 0 * main.x3[7] + 0 * main.x3[6] + 0 * main.x3[5] + 0 * main.x3[4] + 0 * main.x3[3] + 0 * main.x3[2] + 0 * main.x3[1] + 0 * main.x3[0]) - 0 - 0 + (0 + 65535 * main.q2_15 + 65535 * main.q2_14 + 65535 * main.q2_13 + 65535 * main.q2_12 + 65535 * main.q2_11 + 65535 * main.q2_10 + 0 * main.q2_9 + 0 * main.q2_8 + 0 * main.q2_7 + 0 * main.q2_6 + 0 * main.q2_5 + 0 * main.q2_4 + 0 * main.q2_3 + 0 * main.q2_2 + 0 * main.q2_1 + 0 * main.q2_0 - 262140)) * main.CLK32[25] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * main.x1[15] + main.s_12 * main.x1[14] + main.s_13 * main.x1[13] + main.s_14 * main.x1[12] + main.s_15 * main.x1[11] + 0 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0] - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * main.x3[15] + main.s_12 * main.x3[14] + main.s_13 * main.x3[13] + main.s_14 * main.x3[12] + main.s_15 * main.x3[11] + 0 * main.x3[10] + 0 * main.x3[9] + 0 * main.x3[8] + 0 * main.x3[7] + 0 * main.x3[6] + 0 * main.x3[5] + 0 * main.x3[4] + 0 * main.x3[3] + 0 * main.x3[2] + 0 * main.x3[1] + 0 * main.x3[0]) - 0 - 0 + (0 + 65535 * main.q2_15 + 65535 * main.q2_14 + 65535 * main.q2_13 + 65535 * main.q2_12 + 65535 * main.q2_11 + 0 * main.q2_10 + 0 * main.q2_9 + 0 * main.q2_8 + 0 * main.q2_7 + 0 * main.q2_6 + 0 * main.q2_5 + 0 * main.q2_4 + 0 * main.q2_3 + 0 * main.q2_2 + 0 * main.q2_1 + 0 * main.q2_0 - 262140)) * main.CLK32[26] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * main.x1[15] + main.s_13 * main.x1[14] + main.s_14 * main.x1[13] + main.s_15 * main.x1[12] + 0 * main.x1[11] + 0 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0] - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * main.x3[15] + main.s_13 * main.x3[14] + main.s_14 * main.x3[13] + main.s_15 * main.x3[12] + 0 * main.x3[11] + 0 * main.x3[10] + 0 * main.x3[9] + 0 * main.x3[8] + 0 * main.x3[7] + 0 * main.x3[6] + 0 * main.x3[5] + 0 * main.x3[4] + 0 * main.x3[3] + 0 * main.x3[2] + 0 * main.x3[1] + 0 * main.x3[0]) - 0 - 0 + (0 + 65535 * main.q2_15 + 65535 * main.q2_14 + 65535 * main.q2_13 + 65535 * main.q2_12 + 0 * main.q2_11 + 0 * main.q2_10 + 0 * main.q2_9 + 0 * main.q2_8 + 0 * main.q2_7 + 0 * main.q2_6 + 0 * main.q2_5 + 0 * main.q2_4 + 0 * main.q2_3 + 0 * main.q2_2 + 0 * main.q2_1 + 0 * main.q2_0 - 262140)) * main.CLK32[27] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * main.x1[15] + main.s_14 * main.x1[14] + main.s_15 * main.x1[13] + 0 * main.x1[12] + 0 * main.x1[11] + 0 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0] - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * main.x3[15] + main.s_14 * main.x3[14] + main.s_15 * main.x3[13] + 0 * main.x3[12] + 0 * main.x3[11] + 0 * main.x3[10] + 0 * main.x3[9] + 0 * main.x3[8] + 0 * main.x3[7] + 0 * main.x3[6] + 0 * main.x3[5] + 0 * main.x3[4] + 0 * main.x3[3] + 0 * main.x3[2] + 0 * main.x3[1] + 0 * main.x3[0]) - 0 - 0 + (0 + 65535 * main.q2_15 + 65535 * main.q2_14 + 65535 * main.q2_13 + 0 * main.q2_12 + 0 * main.q2_11 + 0 * main.q2_10 + 0 * main.q2_9 + 0 * main.q2_8 + 0 * main.q2_7 + 0 * main.q2_6 + 0 * main.q2_5 + 0 * main.q2_4 + 0 * main.q2_3 + 0 * main.q2_2 + 0 * main.q2_1 + 0 * main.q2_0 - 262140)) * main.CLK32[28] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * 0 + main.s_14 * main.x1[15] + main.s_15 * main.x1[14] + 0 * main.x1[13] + 0 * main.x1[12] + 0 * main.x1[11] + 0 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0] - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * 0 + main.s_14 * main.x3[15] + main.s_15 * main.x3[14] + 0 * main.x3[13] + 0 * main.x3[12] + 0 * main.x3[11] + 0 * main.x3[10] + 0 * main.x3[9] + 0 * main.x3[8] + 0 * main.x3[7] + 0 * main.x3[6] + 0 * main.x3[5] + 0 * main.x3[4] + 0 * main.x3[3] + 0 * main.x3[2] + 0 * main.x3[1] + 0 * main.x3[0]) - 0 - 0 + (0 + 65535 * main.q2_15 + 65535 * main.q2_14 + 0 * main.q2_13 + 0 * main.q2_12 + 0 * main.q2_11 + 0 * main.q2_10 + 0 * main.q2_9 + 0 * main.q2_8 + 0 * main.q2_7 + 0 * main.q2_6 + 0 * main.q2_5 + 0 * main.q2_4 + 0 * main.q2_3 + 0 * main.q2_2 + 0 * main.q2_1 + 0 * main.q2_0 - 262140)) * main.CLK32[29] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * 0 + main.s_14 * 0 + main.s_15 * main.x1[15] + 0 * main.x1[14] + 0 * main.x1[13] + 0 * main.x1[12] + 0 * main.x1[11] + 0 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0] - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * 0 + main.s_14 * 0 + main.s_15 * main.x3[15] + 0 * main.x3[14] + 0 * main.x3[13] + 0 * main.x3[12] + 0 * main.x3[11] + 0 * main.x3[10] + 0 * main.x3[9] + 0 * main.x3[8] + 0 * main.x3[7] + 0 * main.x3[6] + 0 * main.x3[5] + 0 * main.x3[4] + 0 * main.x3[3] + 0 * main.x3[2] + 0 * main.x3[1] + 0 * main.x3[0]) - 0 - 0 + (0 + 65535 * main.q2_15 + 0 * main.q2_14 + 0 * main.q2_13 + 0 * main.q2_12 + 0 * main.q2_11 + 0 * main.q2_10 + 0 * main.q2_9 + 0 * main.q2_8 + 0 * main.q2_7 + 0 * main.q2_6 + 0 * main.q2_5 + 0 * main.q2_4 + 0 * main.q2_3 + 0 * main.q2_2 + 0 * main.q2_1 + 0 * main.q2_0 - 262140)) * main.CLK32[30] + (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * 0 + main.s_14 * 0 + main.s_15 * 0 + 0 * main.x1[15] + 0 * main.x1[14] + 0 * main.x1[13] + 0 * main.x1[12] + 0 * main.x1[11] + 0 * main.x1[10] + 0 * main.x1[9] + 0 * main.x1[8] + 0 * main.x1[7] + 0 * main.x1[6] + 0 * main.x1[5] + 0 * main.x1[4] + 0 * main.x1[3] + 0 * main.x1[2] + 0 * main.x1[1] + 0 * main.x1[0] - (0 + main.s_0 * 0 + main.s_1 * 0 + main.s_2 * 0 + main.s_3 * 0 + main.s_4 * 0 + main.s_5 * 0 + main.s_6 * 0 + main.s_7 * 0 + main.s_8 * 0 + main.s_9 * 0 + main.s_10 * 0 + main.s_11 * 0 + main.s_12 * 0 + main.s_13 * 0 + main.s_14 * 0 + main.s_15 * 0 + 0 * main.x3[15] + 0 * main.x3[14] + 0 * main.x3[13] + 0 * main.x3[12] + 0 * main.x3[11] + 0 * main.x3[10] + 0 * main.x3[9] + 0 * main.x3[8] + 0 * main.x3[7] + 0 * main.x3[6] + 0 * main.x3[5] + 0 * main.x3[4] + 0 * main.x3[3] + 0 * main.x3[2] + 0 * main.x3[1] + 0 * main.x3[0]) - 0 - 0 + (0 + 0 * main.q2_15 + 0 * main.q2_14 + 0 * main.q2_13 + 0 * main.q2_12 + 0 * main.q2_11 + 0 * main.q2_10 + 0 * main.q2_9 + 0 * main.q2_8 + 0 * main.q2_7 + 0 * main.q2_6 + 0 * main.q2_5 + 0 * main.q2_4 + 0 * main.q2_3 + 0 * main.q2_2 + 0 * main.q2_1 + 0 * main.q2_0 - 262140)) * main.CLK32[31];
    main.selEq[0] * (main.eq0_sum + (main.carry_high[0] * 65536 + main.carry_low[0] - 2147483648)) = main.selEq[0] * (main.carry_high[0]' * 65536 + main.carry_low[0]' - 2147483648) * 65536;
    main.selEq[1] * (main.eq1_sum + (main.carry_high[0] * 65536 + main.carry_low[0] - 2147483648)) = main.selEq[1] * (main.carry_high[0]' * 65536 + main.carry_low[0]' - 2147483648) * 65536;
    main.selEq[2] * (main.eq2_sum + (main.carry_high[0] * 65536 + main.carry_low[0] - 2147483648)) = main.selEq[2] * (main.carry_high[0]' * 65536 + main.carry_low[0]' - 2147483648) * 65536;
    main.selEq[3] * (main.eq3_sum + (main.carry_high[1] * 65536 + main.carry_low[1] - 2147483648)) = main.selEq[3] * (main.carry_high[1]' * 65536 + main.carry_low[1]' - 2147483648) * 65536;
    main.selEq[3] * (main.eq4_sum + (main.carry_high[2] * 65536 + main.carry_low[2] - 2147483648)) = main.selEq[3] * (main.carry_high[2]' * 65536 + main.carry_low[2]' - 2147483648) * 65536;
    col witness sel[0];
    1 $ [0, 0 + main.x1[0] * main.CLK32[0] + main.x1[1] * main.CLK32[1] + main.x1[2] * main.CLK32[2] + main.x1[3] * main.CLK32[3] + main.x1[4] * main.CLK32[4] + main.x1[5] * main.CLK32[5] + main.x1[6] * main.CLK32[6] + main.x1[7] * main.CLK32[7] + main.x1[8] * main.CLK32[8] + main.x1[9] * main.CLK32[9] + main.x1[10] * main.CLK32[10] + main.x1[11] * main.CLK32[11] + main.x1[12] * main.CLK32[12] + main.x1[13] * main.CLK32[13] + main.x1[14] * main.CLK32[14] + main.x1[15] * main.CLK32[15] + (0 + main.y1[0] * main.CLK32[16] + main.y1[1] * main.CLK32[17] + main.y1[2] * main.CLK32[18] + main.y1[3] * main.CLK32[19] + main.y1[4] * main.CLK32[20] + main.y1[5] * main.CLK32[21] + main.y1[6] * main.CLK32[22] + main.y1[7] * main.CLK32[23] + main.y1[8] * main.CLK32[24] + main.y1[9] * main.CLK32[25] + main.y1[10] * main.CLK32[26] + main.y1[11] * main.CLK32[27] + main.y1[12] * main.CLK32[28] + main.y1[13] * main.CLK32[29] + main.y1[14] * main.CLK32[30] + main.y1[15] * main.CLK32[31])] in main_byte2.latch $ [main_byte2.operation_id, main_byte2.BYTE2];
    1 $ [0, 0 + main.x2_0 * main.CLK32[0] + main.x2_1 * main.CLK32[1] + main.x2_2 * main.CLK32[2] + main.x2_3 * main.CLK32[3] + main.x2_4 * main.CLK32[4] + main.x2_5 * main.CLK32[5] + main.x2_6 * main.CLK32[6] + main.x2_7 * main.CLK32[7] + main.x2_8 * main.CLK32[8] + main.x2_9 * main.CLK32[9] + main.x2_10 * main.CLK32[10] + main.x2_11 * main.CLK32[11] + main.x2_12 * main.CLK32[12] + main.x2_13 * main.CLK32[13] + main.x2_14 * main.CLK32[14] + main.x2_15 * main.CLK32[15] + (0 + main.y2[0] * main.CLK32[16] + main.y2[1] * main.CLK32[17] + main.y2[2] * main.CLK32[18] + main.y2[3] * main.CLK32[19] + main.y2[4] * main.CLK32[20] + main.y2[5] * main.CLK32[21] + main.y2[6] * main.CLK32[22] + main.y2[7] * main.CLK32[23] + main.y2[8] * main.CLK32[24] + main.y2[9] * main.CLK32[25] + main.y2[10] * main.CLK32[26] + main.y2[11] * main.CLK32[27] + main.y2[12] * main.CLK32[28] + main.y2[13] * main.CLK32[29] + main.y2[14] * main.CLK32[30] + main.y2[15] * main.CLK32[31])] in main_byte2.latch $ [main_byte2.operation_id, main_byte2.BYTE2];
    1 $ [0, 0 + main.x3[0] * main.CLK32[0] + main.x3[1] * main.CLK32[1] + main.x3[2] * main.CLK32[2] + main.x3[3] * main.CLK32[3] + main.x3[4] * main.CLK32[4] + main.x3[5] * main.CLK32[5] + main.x3[6] * main.CLK32[6] + main.x3[7] * main.CLK32[7] + main.x3[8] * main.CLK32[8] + main.x3[9] * main.CLK32[9] + main.x3[10] * main.CLK32[10] + main.x3[11] * main.CLK32[11] + main.x3[12] * main.CLK32[12] + main.x3[13] * main.CLK32[13] + main.x3[14] * main.CLK32[14] + main.x3[15] * main.CLK32[15] + (0 + main.y3[0] * main.CLK32[16] + main.y3[1] * main.CLK32[17] + main.y3[2] * main.CLK32[18] + main.y3[3] * main.CLK32[19] + main.y3[4] * main.CLK32[20] + main.y3[5] * main.CLK32[21] + main.y3[6] * main.CLK32[22] + main.y3[7] * main.CLK32[23] + main.y3[8] * main.CLK32[24] + main.y3[9] * main.CLK32[25] + main.y3[10] * main.CLK32[26] + main.y3[11] * main.CLK32[27] + main.y3[12] * main.CLK32[28] + main.y3[13] * main.CLK32[29] + main.y3[14] * main.CLK32[30] + main.y3[15] * main.CLK32[31])] in main_byte2.latch $ [main_byte2.operation_id, main_byte2.BYTE2];
    1 $ [0, 0 + main.s_0 * main.CLK32[0] + main.s_1 * main.CLK32[1] + main.s_2 * main.CLK32[2] + main.s_3 * main.CLK32[3] + main.s_4 * main.CLK32[4] + main.s_5 * main.CLK32[5] + main.s_6 * main.CLK32[6] + main.s_7 * main.CLK32[7] + main.s_8 * main.CLK32[8] + main.s_9 * main.CLK32[9] + main.s_10 * main.CLK32[10] + main.s_11 * main.CLK32[11] + main.s_12 * main.CLK32[12] + main.s_13 * main.CLK32[13] + main.s_14 * main.CLK32[14] + main.s_15 * main.CLK32[15] + (0 + main.q0_0 * main.CLK32[16] + main.q0_1 * main.CLK32[17] + main.q0_2 * main.CLK32[18] + main.q0_3 * main.CLK32[19] + main.q0_4 * main.CLK32[20] + main.q0_5 * main.CLK32[21] + main.q0_6 * main.CLK32[22] + main.q0_7 * main.CLK32[23] + main.q0_8 * main.CLK32[24] + main.q0_9 * main.CLK32[25] + main.q0_10 * main.CLK32[26] + main.q0_11 * main.CLK32[27] + main.q0_12 * main.CLK32[28] + main.q0_13 * main.CLK32[29] + main.q0_14 * main.CLK32[30])] in main_byte2.latch $ [main_byte2.operation_id, main_byte2.BYTE2];
    1 $ [0, 0 + main.q1_0 * main.CLK32[0] + main.q1_1 * main.CLK32[1] + main.q1_2 * main.CLK32[2] + main.q1_3 * main.CLK32[3] + main.q1_4 * main.CLK32[4] + main.q1_5 * main.CLK32[5] + main.q1_6 * main.CLK32[6] + main.q1_7 * main.CLK32[7] + main.q1_8 * main.CLK32[8] + main.q1_9 * main.CLK32[9] + main.q1_10 * main.CLK32[10] + main.q1_11 * main.CLK32[11] + main.q1_12 * main.CLK32[12] + main.q1_13 * main.CLK32[13] + main.q1_14 * main.CLK32[14] + (0 + main.q2_0 * main.CLK32[16] + main.q2_1 * main.CLK32[17] + main.q2_2 * main.CLK32[18] + main.q2_3 * main.CLK32[19] + main.q2_4 * main.CLK32[20] + main.q2_5 * main.CLK32[21] + main.q2_6 * main.CLK32[22] + main.q2_7 * main.CLK32[23] + main.q2_8 * main.CLK32[24] + main.q2_9 * main.CLK32[25] + main.q2_10 * main.CLK32[26] + main.q2_11 * main.CLK32[27] + main.q2_12 * main.CLK32[28] + main.q2_13 * main.CLK32[29] + main.q2_14 * main.CLK32[30])] in main_byte2.latch $ [main_byte2.operation_id, main_byte2.BYTE2];
    1 $ [0, main.q0_15_high * main.CLK32[0] + main.q0_15_low * main.CLK32[1] + main.q1_15_high * main.CLK32[2] + main.q1_15_low * main.CLK32[3] + main.q2_15_high * main.CLK32[4] + main.q2_15_low * main.CLK32[5]] in main_byte2.latch $ [main_byte2.operation_id, main_byte2.BYTE2];
    1 $ [0, main.carry_low[0]] in main_byte2.latch $ [main_byte2.operation_id, main_byte2.BYTE2];
    1 $ [0, main.carry_low[1]] in main_byte2.latch $ [main_byte2.operation_id, main_byte2.BYTE2];
    1 $ [0, main.carry_low[2]] in main_byte2.latch $ [main_byte2.operation_id, main_byte2.BYTE2];
    1 $ [0, main.carry_high[0]] in main_byte2.latch $ [main_byte2.operation_id, main_byte2.BYTE2];
    1 $ [0, main.carry_high[1]] in main_byte2.latch $ [main_byte2.operation_id, main_byte2.BYTE2];
    1 $ [0, main.carry_high[2]] in main_byte2.latch $ [main_byte2.operation_id, main_byte2.BYTE2];
    col fixed _linker_first_step(i) { if i == 0 { 1 } else { 0 } };
    main._linker_first_step * (main.operation_id - 1) = 0;
namespace main_byte2(65536);
    col fixed BYTE2(i) { i & 65535 };
    col fixed latch = [1]*;
    col fixed operation_id = [0]*;
