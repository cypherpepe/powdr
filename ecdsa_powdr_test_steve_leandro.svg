<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="182" onload="init(evt)" viewBox="0 0 1200 182" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="182" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="165.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="165.00"> </text><svg id="frames" x="10" width="1180" total_samples="3118040"><g><title>_ZN118_$LT$k256_dot__dot_arithmetic_dot__dot_scalar_dot__dot_Scalar$u20$as$u20$core_dot__dot_ops_dot__dot_arith_dot__dot_Mul$LT$$RF$k256_dot__dot_arithmetic_dot__dot_scalar_dot__dot_Scalar$GT$$GT$3mul17h41f9fa6960cc6cc7E (534 samples, 0.02%)</title><rect x="0.3749%" y="101" width="0.0171%" height="15" fill="rgb(227,0,7)" fg:x="11688" fg:w="534"/><text x="0.6249%" y="111.50"></text></g><g><title>k256::arithmetic::scalar::Scalar::mul::h6a58daf39e568e30 (528 samples, 0.02%)</title><rect x="0.3750%" y="85" width="0.0169%" height="15" fill="rgb(217,0,24)" fg:x="11694" fg:w="528"/><text x="0.6250%" y="95.50"></text></g><g><title>_ZN122_$LT$k256_dot__dot_arithmetic_dot__dot_scalar_dot__dot_Scalar$u20$as$u20$elliptic_curve_dot__dot_ops_dot__dot_Reduce$LT$crypto_bigint_dot__dot_uint_dot__dot_Uint$LT$_$GT$$GT$$GT$6reduce17h358b0fdb4b894cecE (428 samples, 0.01%)</title><rect x="0.3920%" y="101" width="0.0137%" height="15" fill="rgb(221,193,54)" fg:x="12222" fg:w="428"/><text x="0.6420%" y="111.50"></text></g><g><title>__ecall_handler (81,810 samples, 2.62%)</title><rect x="1.0527%" y="53" width="2.6238%" height="15" fill="rgb(248,212,6)" fg:x="32823" fg:w="81810"/><text x="1.3027%" y="63.50">__..</text></g><g><title>k256::arithmetic::field::FieldElement::invert::h9d8c54c9e7a41729 (101,907 samples, 3.27%)</title><rect x="0.4099%" y="69" width="3.2683%" height="15" fill="rgb(208,68,35)" fg:x="12782" fg:w="101907"/><text x="0.6599%" y="79.50">k25..</text></g><g><title>__ecall_handler (606 samples, 0.02%)</title><rect x="3.6861%" y="53" width="0.0194%" height="15" fill="rgb(232,128,0)" fg:x="114935" fg:w="606"/><text x="3.9361%" y="63.50"></text></g><g><title>_ZN4k25610arithmetic10projective144_$LT$impl$u20$core_dot__dot_convert_dot__dot_From$LT$$RF$k256_dot__dot_arithmetic_dot__dot_projective_dot__dot_ProjectivePoint$GT$$u20$for$u20$k256_dot__dot_arithmetic_dot__dot_affine_dot__dot_AffinePoint$GT$4from17h396c6673ca457b7bE (102,905 samples, 3.30%)</title><rect x="0.4062%" y="101" width="3.3003%" height="15" fill="rgb(207,160,47)" fg:x="12664" fg:w="102905"/><text x="0.6562%" y="111.50">_ZN..</text></g><g><title>k256::arithmetic::projective::ProjectivePoint::to_affine::h56ef79e85322d8e2 (102,899 samples, 3.30%)</title><rect x="0.4063%" y="85" width="3.3001%" height="15" fill="rgb(228,23,34)" fg:x="12670" fg:w="102899"/><text x="0.6563%" y="95.50">k25..</text></g><g><title>k256::arithmetic::projective::ProjectivePoint::to_affine_internal::h057dee6ddf585d0c (880 samples, 0.03%)</title><rect x="3.6782%" y="69" width="0.0282%" height="15" fill="rgb(218,30,26)" fg:x="114689" fg:w="880"/><text x="3.9282%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (7,597 samples, 0.24%)</title><rect x="3.7116%" y="85" width="0.2436%" height="15" fill="rgb(220,122,19)" fg:x="115728" fg:w="7597"/><text x="3.9616%" y="95.50"></text></g><g><title>_ZN97_$LT$k256_dot__dot_arithmetic_dot__dot_projective_dot__dot_ProjectivePoint$u20$as$u20$subtle_dot__dot_ConditionallySelectable$GT$18conditional_select17ha8572738067e1e73E (531 samples, 0.02%)</title><rect x="4.5915%" y="69" width="0.0170%" height="15" fill="rgb(250,228,42)" fg:x="143166" fg:w="531"/><text x="4.8415%" y="79.50"></text></g><g><title>__ecall_handler (20,907 samples, 0.67%)</title><rect x="4.6086%" y="69" width="0.6705%" height="15" fill="rgb(240,193,28)" fg:x="143697" fg:w="20907"/><text x="4.8586%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (136,972 samples, 4.39%)</title><rect x="5.2791%" y="69" width="4.3929%" height="15" fill="rgb(216,20,37)" fg:x="164604" fg:w="136972"/><text x="5.5291%" y="79.50">compi..</text></g><g><title>k256::arithmetic::mul::Radix16Decomposition&lt;_&gt;::new::he566c17e238f8d7b (3,118 samples, 0.10%)</title><rect x="9.6720%" y="69" width="0.1000%" height="15" fill="rgb(206,188,39)" fg:x="301576" fg:w="3118"/><text x="9.9220%" y="79.50"></text></g><g><title>_ZN13crypto_bigint9ct_choice106_$LT$impl$u20$core_dot__dot_convert_dot__dot_From$LT$crypto_bigint_dot__dot_ct_choice_dot__dot_CtChoice$GT$$u20$for$u20$subtle_dot__dot_Choice$GT$4from17h4af9a10c998c0d98E (350 samples, 0.01%)</title><rect x="10.8882%" y="53" width="0.0112%" height="15" fill="rgb(217,207,13)" fg:x="339498" fg:w="350"/><text x="11.1382%" y="63.50"></text></g><g><title>__ecall_handler (14,726 samples, 0.47%)</title><rect x="10.8994%" y="53" width="0.4723%" height="15" fill="rgb(231,73,38)" fg:x="339848" fg:w="14726"/><text x="11.1494%" y="63.50"></text></g><g><title>k256::arithmetic::projective::ProjectivePoint::add::h6f7f15302a5fe947 (56,600 samples, 1.82%)</title><rect x="9.7720%" y="69" width="1.8152%" height="15" fill="rgb(225,20,46)" fg:x="304694" fg:w="56600"/><text x="10.0220%" y="79.50">k..</text></g><g><title>subtle::black_box::h7893a9e72daaa4ec (6,720 samples, 0.22%)</title><rect x="11.3717%" y="53" width="0.2155%" height="15" fill="rgb(210,31,41)" fg:x="354574" fg:w="6720"/><text x="11.6217%" y="63.50"></text></g><g><title>__ecall_handler (14,880 samples, 0.48%)</title><rect x="12.3742%" y="53" width="0.4772%" height="15" fill="rgb(221,200,47)" fg:x="385834" fg:w="14880"/><text x="12.6242%" y="63.50"></text></g><g><title>k256::arithmetic::projective::ProjectivePoint::double::ha3e4f1ade4b1c23f (44,852 samples, 1.44%)</title><rect x="11.5872%" y="69" width="1.4385%" height="15" fill="rgb(226,26,5)" fg:x="361294" fg:w="44852"/><text x="11.8372%" y="79.50"></text></g><g><title>subtle::black_box::h7893a9e72daaa4ec (5,432 samples, 0.17%)</title><rect x="12.8515%" y="53" width="0.1742%" height="15" fill="rgb(249,33,26)" fg:x="400714" fg:w="5432"/><text x="13.1015%" y="63.50"></text></g><g><title>k256::arithmetic::scalar::Scalar::add::h3d1fbd396f1da960 (438 samples, 0.01%)</title><rect x="13.0257%" y="69" width="0.0140%" height="15" fill="rgb(235,183,28)" fg:x="406146" fg:w="438"/><text x="13.2757%" y="79.50"></text></g><g><title>__ecall_handler (909 samples, 0.03%)</title><rect x="13.0600%" y="53" width="0.0292%" height="15" fill="rgb(221,5,38)" fg:x="407217" fg:w="909"/><text x="13.3100%" y="63.50"></text></g><g><title>k256::arithmetic::scalar::Scalar::mul::h6a58daf39e568e30 (1,584 samples, 0.05%)</title><rect x="13.0397%" y="69" width="0.0508%" height="15" fill="rgb(247,18,42)" fg:x="406584" fg:w="1584"/><text x="13.2897%" y="79.50"></text></g><g><title>k256::arithmetic::scalar::Scalar::add::h3d1fbd396f1da960 (438 samples, 0.01%)</title><rect x="13.1273%" y="53" width="0.0140%" height="15" fill="rgb(241,131,45)" fg:x="409314" fg:w="438"/><text x="13.3773%" y="63.50"></text></g><g><title>k256::arithmetic::scalar::wide::WideScalar::mul_shift_vartime::h8a26c5090746b101 (1,612 samples, 0.05%)</title><rect x="13.0905%" y="69" width="0.0517%" height="15" fill="rgb(249,31,29)" fg:x="408168" fg:w="1612"/><text x="13.3405%" y="79.50"></text></g><g><title>memcpy (440 samples, 0.01%)</title><rect x="13.1422%" y="69" width="0.0141%" height="15" fill="rgb(225,111,53)" fg:x="409780" fg:w="440"/><text x="13.3922%" y="79.50"></text></g><g><title>k256::arithmetic::mul::lincomb::h4ee292d96f8115aa (287,760 samples, 9.23%)</title><rect x="3.9580%" y="85" width="9.2289%" height="15" fill="rgb(238,160,17)" fg:x="123412" fg:w="287760"/><text x="4.2080%" y="95.50">k256::arithme..</text></g><g><title>subtle::black_box::h7893a9e72daaa4ec (952 samples, 0.03%)</title><rect x="13.1563%" y="69" width="0.0305%" height="15" fill="rgb(214,148,48)" fg:x="410220" fg:w="952"/><text x="13.4063%" y="79.50"></text></g><g><title>_ZN4k25610arithmetic3mul111_$LT$impl$u20$elliptic_curve_dot__dot_ops_dot__dot_MulByGenerator$u20$for$u20$k256_dot__dot_arithmetic_dot__dot_projective_dot__dot_ProjectivePoint$GT$16mul_by_generator17ha27f1ea458f43ba1E (295,627 samples, 9.48%)</title><rect x="3.7065%" y="101" width="9.4812%" height="15" fill="rgb(232,36,49)" fg:x="115569" fg:w="295627"/><text x="3.9565%" y="111.50">_ZN4k25610arit..</text></g><g><title>_ZN4k25610arithmetic6scalar202_$LT$impl$u20$core_dot__dot_convert_dot__dot_From$LT$k256_dot__dot_arithmetic_dot__dot_scalar_dot__dot_Scalar$GT$$u20$for$u20$generic_array_dot__dot_GenericArray$LT$u8$C$$LT$k256_dot__dot_Secp256k1$u20$as$u20$elliptic_curve_dot__dot_Curve$GT$_dot__dot_FieldBytesSize$GT$$GT$4from17h1b5bc206477b6d5cE (594 samples, 0.02%)</title><rect x="13.1876%" y="101" width="0.0191%" height="15" fill="rgb(209,103,24)" fg:x="411196" fg:w="594"/><text x="13.4376%" y="111.50"></text></g><g><title>_ZN4k25610arithmetic6scalar206_$LT$impl$u20$core_dot__dot_convert_dot__dot_From$LT$$RF$k256_dot__dot_arithmetic_dot__dot_scalar_dot__dot_Scalar$GT$$u20$for$u20$generic_array_dot__dot_GenericArray$LT$u8$C$$LT$k256_dot__dot_Secp256k1$u20$as$u20$elliptic_curve_dot__dot_Curve$GT$_dot__dot_FieldBytesSize$GT$$GT$4from17h3daff20584696e2dE (594 samples, 0.02%)</title><rect x="13.2067%" y="101" width="0.0191%" height="15" fill="rgb(229,88,8)" fg:x="411790" fg:w="594"/><text x="13.4567%" y="111.50"></text></g><g><title>_ZN97_$LT$k256_dot__dot_arithmetic_dot__dot_projective_dot__dot_ProjectivePoint$u20$as$u20$subtle_dot__dot_ConditionallySelectable$GT$18conditional_select17ha8572738067e1e73E (354 samples, 0.01%)</title><rect x="13.2874%" y="85" width="0.0114%" height="15" fill="rgb(213,181,19)" fg:x="414306" fg:w="354"/><text x="13.5374%" y="95.50"></text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (20,988 samples, 0.67%)</title><rect x="13.2987%" y="85" width="0.6731%" height="15" fill="rgb(254,191,54)" fg:x="414660" fg:w="20988"/><text x="13.5487%" y="95.50"></text></g><g><title>_ZN97_$LT$k256_dot__dot_arithmetic_dot__dot_projective_dot__dot_ProjectivePoint$u20$as$u20$subtle_dot__dot_ConditionallySelectable$GT$18conditional_select17ha8572738067e1e73E (2,124 samples, 0.07%)</title><rect x="16.3811%" y="69" width="0.0681%" height="15" fill="rgb(241,83,37)" fg:x="510770" fg:w="2124"/><text x="16.6311%" y="79.50"></text></g><g><title>__ecall_handler (83,628 samples, 2.68%)</title><rect x="16.4492%" y="69" width="2.6821%" height="15" fill="rgb(233,36,39)" fg:x="512894" fg:w="83628"/><text x="16.6992%" y="79.50">__..</text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (513,990 samples, 16.48%)</title><rect x="19.1313%" y="69" width="16.4844%" height="15" fill="rgb(226,3,54)" fg:x="596522" fg:w="513990"/><text x="19.3813%" y="79.50">compiler_builtins::mem::m..</text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (1,032 samples, 0.03%)</title><rect x="35.9823%" y="53" width="0.0331%" height="15" fill="rgb(245,192,40)" fg:x="1121944" fg:w="1032"/><text x="36.2323%" y="63.50"></text></g><g><title>k256::arithmetic::mul::Radix16Decomposition&lt;_&gt;::new::he566c17e238f8d7b (12,472 samples, 0.40%)</title><rect x="35.6157%" y="69" width="0.4000%" height="15" fill="rgb(238,167,29)" fg:x="1110512" fg:w="12472"/><text x="35.8657%" y="79.50"></text></g><g><title>_ZN13crypto_bigint9ct_choice106_$LT$impl$u20$core_dot__dot_convert_dot__dot_From$LT$crypto_bigint_dot__dot_ct_choice_dot__dot_CtChoice$GT$$u20$for$u20$subtle_dot__dot_Choice$GT$4from17h4af9a10c998c0d98E (1,508 samples, 0.05%)</title><rect x="40.4373%" y="53" width="0.0484%" height="15" fill="rgb(232,182,51)" fg:x="1260852" fg:w="1508"/><text x="40.6873%" y="63.50"></text></g><g><title>__ecall_handler (57,710 samples, 1.85%)</title><rect x="40.4857%" y="53" width="1.8508%" height="15" fill="rgb(231,60,39)" fg:x="1262360" fg:w="57710"/><text x="40.7357%" y="63.50">_..</text></g><g><title>k256::arithmetic::projective::ProjectivePoint::add::h6f7f15302a5fe947 (224,694 samples, 7.21%)</title><rect x="36.0157%" y="69" width="7.2063%" height="15" fill="rgb(208,69,12)" fg:x="1122984" fg:w="224694"/><text x="36.2657%" y="79.50">k256::arit..</text></g><g><title>subtle::black_box::h7893a9e72daaa4ec (27,608 samples, 0.89%)</title><rect x="42.3365%" y="53" width="0.8854%" height="15" fill="rgb(235,93,37)" fg:x="1320070" fg:w="27608"/><text x="42.5865%" y="63.50"></text></g><g><title>_ZN13crypto_bigint9ct_choice106_$LT$impl$u20$core_dot__dot_convert_dot__dot_From$LT$crypto_bigint_dot__dot_ct_choice_dot__dot_CtChoice$GT$$u20$for$u20$subtle_dot__dot_Choice$GT$4from17h4af9a10c998c0d98E (512 samples, 0.02%)</title><rect x="44.8065%" y="53" width="0.0164%" height="15" fill="rgb(213,116,39)" fg:x="1397086" fg:w="512"/><text x="45.0565%" y="63.50"></text></g><g><title>__ecall_handler (30,720 samples, 0.99%)</title><rect x="44.8230%" y="53" width="0.9852%" height="15" fill="rgb(222,207,29)" fg:x="1397598" fg:w="30720"/><text x="45.0730%" y="63.50"></text></g><g><title>k256::arithmetic::projective::ProjectivePoint::double::ha3e4f1ade4b1c23f (91,392 samples, 2.93%)</title><rect x="43.2220%" y="69" width="2.9311%" height="15" fill="rgb(206,96,30)" fg:x="1347678" fg:w="91392"/><text x="43.4720%" y="79.50">k2..</text></g><g><title>subtle::black_box::h7893a9e72daaa4ec (10,752 samples, 0.34%)</title><rect x="45.8082%" y="53" width="0.3448%" height="15" fill="rgb(218,138,4)" fg:x="1428318" fg:w="10752"/><text x="46.0582%" y="63.50"></text></g><g><title>k256::arithmetic::scalar::Scalar::add::h3d1fbd396f1da960 (1,752 samples, 0.06%)</title><rect x="46.1530%" y="69" width="0.0562%" height="15" fill="rgb(250,191,14)" fg:x="1439070" fg:w="1752"/><text x="46.4030%" y="79.50"></text></g><g><title>__ecall_handler (3,636 samples, 0.12%)</title><rect x="46.2904%" y="53" width="0.1166%" height="15" fill="rgb(239,60,40)" fg:x="1443354" fg:w="3636"/><text x="46.5404%" y="63.50"></text></g><g><title>k256::arithmetic::scalar::Scalar::mul::h6a58daf39e568e30 (6,336 samples, 0.20%)</title><rect x="46.2092%" y="69" width="0.2032%" height="15" fill="rgb(206,27,48)" fg:x="1440822" fg:w="6336"/><text x="46.4592%" y="79.50"></text></g><g><title>k256::arithmetic::scalar::Scalar::add::h3d1fbd396f1da960 (1,752 samples, 0.06%)</title><rect x="46.5594%" y="53" width="0.0562%" height="15" fill="rgb(225,35,8)" fg:x="1451742" fg:w="1752"/><text x="46.8094%" y="63.50"></text></g><g><title>k256::arithmetic::scalar::wide::WideScalar::mul_shift_vartime::h8a26c5090746b101 (6,448 samples, 0.21%)</title><rect x="46.4124%" y="69" width="0.2068%" height="15" fill="rgb(250,213,24)" fg:x="1447158" fg:w="6448"/><text x="46.6624%" y="79.50"></text></g><g><title>memcpy (1,490 samples, 0.05%)</title><rect x="46.6192%" y="69" width="0.0478%" height="15" fill="rgb(247,123,22)" fg:x="1453606" fg:w="1490"/><text x="46.8692%" y="79.50"></text></g><g><title>k256::arithmetic::mul::lincomb::h4ee292d96f8115aa (1,023,020 samples, 32.81%)</title><rect x="13.9794%" y="85" width="32.8097%" height="15" fill="rgb(231,138,38)" fg:x="435884" fg:w="1023020"/><text x="14.2294%" y="95.50">k256::arithmetic::mul::lincomb::h4ee292d96f8115aa</text></g><g><title>subtle::black_box::h7893a9e72daaa4ec (3,808 samples, 0.12%)</title><rect x="46.6670%" y="69" width="0.1221%" height="15" fill="rgb(231,145,46)" fg:x="1455096" fg:w="3808"/><text x="46.9170%" y="79.50"></text></g><g><title>__ecall_handler (163,620 samples, 5.25%)</title><rect x="48.0818%" y="53" width="5.2475%" height="15" fill="rgb(251,118,11)" fg:x="1499210" fg:w="163620"/><text x="48.3318%" y="63.50">__ecal..</text></g><g><title>k256::arithmetic::field::FieldElement::invert::h9d8c54c9e7a41729 (203,814 samples, 6.54%)</title><rect x="46.7963%" y="69" width="6.5366%" height="15" fill="rgb(217,147,25)" fg:x="1459128" fg:w="203814"/><text x="47.0463%" y="79.50">k256::ari..</text></g><g><title>__ecall_handler (1,212 samples, 0.04%)</title><rect x="53.3487%" y="53" width="0.0389%" height="15" fill="rgb(247,81,37)" fg:x="1663434" fg:w="1212"/><text x="53.5987%" y="63.50"></text></g><g><title>k256::arithmetic::projective::ProjectivePoint::to_affine::h56ef79e85322d8e2 (205,798 samples, 6.60%)</title><rect x="46.7891%" y="85" width="6.6002%" height="15" fill="rgb(209,12,38)" fg:x="1458904" fg:w="205798"/><text x="47.0391%" y="95.50">k256::ari..</text></g><g><title>k256::arithmetic::projective::ProjectivePoint::to_affine_internal::h057dee6ddf585d0c (1,760 samples, 0.06%)</title><rect x="53.3329%" y="69" width="0.0564%" height="15" fill="rgb(227,1,9)" fg:x="1662942" fg:w="1760"/><text x="53.5829%" y="79.50"></text></g><g><title>_ZN13crypto_bigint9ct_choice106_$LT$impl$u20$core_dot__dot_convert_dot__dot_From$LT$crypto_bigint_dot__dot_ct_choice_dot__dot_CtChoice$GT$$u20$for$u20$subtle_dot__dot_Choice$GT$4from17h4af9a10c998c0d98E (1,160 samples, 0.04%)</title><rect x="57.6343%" y="53" width="0.0372%" height="15" fill="rgb(248,47,43)" fg:x="1797062" fg:w="1160"/><text x="57.8843%" y="63.50"></text></g><g><title>__ecall_handler (175,740 samples, 5.64%)</title><rect x="57.6716%" y="53" width="5.6362%" height="15" fill="rgb(221,10,30)" fg:x="1798222" fg:w="175740"/><text x="57.9216%" y="63.50">__ecall..</text></g><g><title>k256::arithmetic::scalar::Scalar::mul::h6a58daf39e568e30 (306,240 samples, 9.82%)</title><rect x="53.7466%" y="69" width="9.8216%" height="15" fill="rgb(210,229,1)" fg:x="1675842" fg:w="306240"/><text x="53.9966%" y="79.50">k256::arithmet..</text></g><g><title>subtle::black_box::h7893a9e72daaa4ec (8,120 samples, 0.26%)</title><rect x="63.3078%" y="53" width="0.2604%" height="15" fill="rgb(222,148,37)" fg:x="1973962" fg:w="8120"/><text x="63.5578%" y="63.50"></text></g><g><title>k256::arithmetic::scalar::Scalar::invert::hd88e691f9b8afab8 (317,436 samples, 10.18%)</title><rect x="53.3894%" y="85" width="10.1806%" height="15" fill="rgb(234,67,33)" fg:x="1664702" fg:w="317436"/><text x="53.6394%" y="95.50">k256::arithmeti..</text></g><g><title>__ecall_handler (1,212 samples, 0.04%)</title><rect x="63.5971%" y="69" width="0.0389%" height="15" fill="rgb(247,98,35)" fg:x="1982982" fg:w="1212"/><text x="63.8471%" y="79.50"></text></g><g><title>k256::arithmetic::scalar::Scalar::mul::h6a58daf39e568e30 (2,112 samples, 0.07%)</title><rect x="63.5700%" y="85" width="0.0677%" height="15" fill="rgb(247,138,52)" fg:x="1982138" fg:w="2112"/><text x="63.8200%" y="95.50"></text></g><g><title>_ZN4k2565ecdsa121_$LT$impl$u20$ecdsa_dot__dot_hazmat_dot__dot_VerifyPrimitive$LT$k256_dot__dot_Secp256k1$GT$$u20$for$u20$k256_dot__dot_arithmetic_dot__dot_affine_dot__dot_AffinePoint$GT$16verify_prehashed17h065a5174bfb0cd89E (1,572,312 samples, 50.43%)</title><rect x="13.2257%" y="101" width="50.4263%" height="15" fill="rgb(213,79,30)" fg:x="412384" fg:w="1572312"/><text x="13.4757%" y="111.50">_ZN4k2565ecdsa121_$LT$impl$u20$ecdsa_dot__dot_hazmat_dot__dot_VerifyPrimitive$LT$k2..</text></g><g><title>subtle::black_box::h7893a9e72daaa4ec (392 samples, 0.01%)</title><rect x="63.6395%" y="85" width="0.0126%" height="15" fill="rgb(246,177,23)" fg:x="1984304" fg:w="392"/><text x="63.8895%" y="95.50"></text></g><g><title>_ZN13crypto_bigint9ct_choice106_$LT$impl$u20$core_dot__dot_convert_dot__dot_From$LT$crypto_bigint_dot__dot_ct_choice_dot__dot_CtChoice$GT$$u20$for$u20$subtle_dot__dot_Choice$GT$4from17h4af9a10c998c0d98E (580 samples, 0.02%)</title><rect x="65.7747%" y="53" width="0.0186%" height="15" fill="rgb(230,62,27)" fg:x="2050882" fg:w="580"/><text x="66.0247%" y="63.50"></text></g><g><title>__ecall_handler (87,870 samples, 2.82%)</title><rect x="65.7933%" y="53" width="2.8181%" height="15" fill="rgb(216,154,8)" fg:x="2051462" fg:w="87870"/><text x="66.0433%" y="63.50">__..</text></g><g><title>k256::arithmetic::scalar::Scalar::mul::h6a58daf39e568e30 (153,120 samples, 4.91%)</title><rect x="63.8309%" y="69" width="4.9108%" height="15" fill="rgb(244,35,45)" fg:x="1990272" fg:w="153120"/><text x="64.0809%" y="79.50">k256::..</text></g><g><title>subtle::black_box::h7893a9e72daaa4ec (4,060 samples, 0.13%)</title><rect x="68.6114%" y="53" width="0.1302%" height="15" fill="rgb(251,115,12)" fg:x="2139332" fg:w="4060"/><text x="68.8614%" y="63.50"></text></g><g><title>_ZN62_$LT$k256_dot__dot_arithmetic_dot__dot_scalar_dot__dot_Scalar$u20$as$u20$ff_dot__dot_Field$GT$6invert17h625c6f739303e76eE (158,724 samples, 5.09%)</title><rect x="63.6520%" y="101" width="5.0905%" height="15" fill="rgb(240,54,50)" fg:x="1984696" fg:w="158724"/><text x="63.9020%" y="111.50">_ZN62_..</text></g><g><title>k256::arithmetic::scalar::Scalar::invert::hd88e691f9b8afab8 (158,718 samples, 5.09%)</title><rect x="63.6522%" y="85" width="5.0903%" height="15" fill="rgb(233,84,52)" fg:x="1984702" fg:w="158718"/><text x="63.9022%" y="95.50">k256::..</text></g><g><title>_ZN74_$LT$k256_dot__dot_arithmetic_dot__dot_scalar_dot__dot_Scalar$u20$as$u20$core_dot__dot_ops_dot__dot_arith_dot__dot_Mul$GT$3mul17hd8c3fee617d1f571E (534 samples, 0.02%)</title><rect x="68.7596%" y="101" width="0.0171%" height="15" fill="rgb(207,117,47)" fg:x="2143953" fg:w="534"/><text x="69.0096%" y="111.50"></text></g><g><title>k256::arithmetic::scalar::Scalar::mul::h6a58daf39e568e30 (528 samples, 0.02%)</title><rect x="68.7598%" y="85" width="0.0169%" height="15" fill="rgb(249,43,39)" fg:x="2143959" fg:w="528"/><text x="69.0098%" y="95.50"></text></g><g><title>compiler_builtins::mem::memset::h05c59719a26c8b04 (355 samples, 0.01%)</title><rect x="68.8994%" y="69" width="0.0114%" height="15" fill="rgb(209,38,44)" fg:x="2148312" fg:w="355"/><text x="69.1494%" y="79.50"></text></g><g><title>_ZN129_$LT$digest_dot__dot_core_api_dot__dot_ct_variable_dot__dot_CtVariableCoreWrapper$LT$T$C$OutSize$C$O$GT$$u20$as$u20$digest_dot__dot_core_api_dot__dot_FixedOutputCore$GT$19finalize_fixed_core17h7be1889ad4bac69fE (25,165 samples, 0.81%)</title><rect x="68.8276%" y="85" width="0.8071%" height="15" fill="rgb(236,212,23)" fg:x="2146072" fg:w="25165"/><text x="69.0776%" y="95.50"></text></g><g><title>sha2::sha256::compress256::h430d9065f295ea76 (22,565 samples, 0.72%)</title><rect x="68.9110%" y="69" width="0.7237%" height="15" fill="rgb(242,79,21)" fg:x="2148672" fg:w="22565"/><text x="69.1610%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (1,120 samples, 0.04%)</title><rect x="69.6347%" y="85" width="0.0359%" height="15" fill="rgb(211,96,35)" fg:x="2171237" fg:w="1120"/><text x="69.8847%" y="95.50"></text></g><g><title>compiler_builtins::mem::memset::h05c59719a26c8b04 (730 samples, 0.02%)</title><rect x="69.6706%" y="85" width="0.0234%" height="15" fill="rgb(253,215,40)" fg:x="2172357" fg:w="730"/><text x="69.9206%" y="95.50"></text></g><g><title>_ZN78_$LT$hmac_dot__dot_simple_dot__dot_SimpleHmac$LT$D$GT$$u20$as$u20$digest_dot__dot_FixedOutputReset$GT$19finalize_into_reset17h1d602995a6f4a5a9E (96,320 samples, 3.09%)</title><rect x="68.7768%" y="101" width="3.0891%" height="15" fill="rgb(211,81,21)" fg:x="2144487" fg:w="96320"/><text x="69.0268%" y="111.50">_ZN..</text></g><g><title>sha2::sha256::compress256::h430d9065f295ea76 (67,695 samples, 2.17%)</title><rect x="69.6948%" y="85" width="2.1711%" height="15" fill="rgb(208,190,38)" fg:x="2173112" fg:w="67695"/><text x="69.9448%" y="95.50">s..</text></g><g><title>_ZN98_$LT$k256_dot__dot_arithmetic_dot__dot_affine_dot__dot_AffinePoint$u20$as$u20$elliptic_curve_dot__dot_point_dot__dot_AffineCoordinates$GT$1x17hfb571379306c5d39E (712 samples, 0.02%)</title><rect x="71.8683%" y="101" width="0.0228%" height="15" fill="rgb(235,213,38)" fg:x="2240881" fg:w="712"/><text x="72.1183%" y="111.50"></text></g><g><title>k256::arithmetic::field::FieldElement::to_bytes::hf42a257d7d9264dd (700 samples, 0.02%)</title><rect x="71.8686%" y="85" width="0.0225%" height="15" fill="rgb(237,122,38)" fg:x="2240893" fg:w="700"/><text x="72.1186%" y="95.50"></text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (6,279 samples, 0.20%)</title><rect x="71.8928%" y="101" width="0.2014%" height="15" fill="rgb(244,218,35)" fg:x="2241645" fg:w="6279"/><text x="72.1428%" y="111.50"></text></g><g><title>compiler_builtins::mem::memset::h05c59719a26c8b04 (1,052 samples, 0.03%)</title><rect x="72.0941%" y="101" width="0.0337%" height="15" fill="rgb(240,68,47)" fg:x="2247924" fg:w="1052"/><text x="72.3441%" y="111.50"></text></g><g><title>__ecall_handler (163,620 samples, 5.25%)</title><rect x="73.4309%" y="37" width="5.2475%" height="15" fill="rgb(210,16,53)" fg:x="2289606" fg:w="163620"/><text x="73.6809%" y="47.50">__ecal..</text></g><g><title>k256::arithmetic::field::FieldElement::invert::h9d8c54c9e7a41729 (203,814 samples, 6.54%)</title><rect x="72.1455%" y="53" width="6.5366%" height="15" fill="rgb(235,124,12)" fg:x="2249524" fg:w="203814"/><text x="72.3955%" y="63.50">k256::ari..</text></g><g><title>__ecall_handler (1,212 samples, 0.04%)</title><rect x="78.6978%" y="37" width="0.0389%" height="15" fill="rgb(224,169,11)" fg:x="2453830" fg:w="1212"/><text x="78.9478%" y="47.50"></text></g><g><title>_ZN4k25610arithmetic10projective144_$LT$impl$u20$core_dot__dot_convert_dot__dot_From$LT$$RF$k256_dot__dot_arithmetic_dot__dot_projective_dot__dot_ProjectivePoint$GT$$u20$for$u20$k256_dot__dot_arithmetic_dot__dot_affine_dot__dot_AffinePoint$GT$4from17h396c6673ca457b7bE (205,810 samples, 6.60%)</title><rect x="72.1379%" y="85" width="6.6006%" height="15" fill="rgb(250,166,2)" fg:x="2249288" fg:w="205810"/><text x="72.3879%" y="95.50">_ZN4k2561..</text></g><g><title>k256::arithmetic::projective::ProjectivePoint::to_affine::h56ef79e85322d8e2 (205,798 samples, 6.60%)</title><rect x="72.1383%" y="69" width="6.6002%" height="15" fill="rgb(242,216,29)" fg:x="2249300" fg:w="205798"/><text x="72.3883%" y="79.50">k256::ari..</text></g><g><title>k256::arithmetic::projective::ProjectivePoint::to_affine_internal::h057dee6ddf585d0c (1,760 samples, 0.06%)</title><rect x="78.6821%" y="53" width="0.0564%" height="15" fill="rgb(230,116,27)" fg:x="2453338" fg:w="1760"/><text x="78.9321%" y="63.50"></text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (15,194 samples, 0.49%)</title><rect x="78.7486%" y="69" width="0.4873%" height="15" fill="rgb(228,99,48)" fg:x="2455412" fg:w="15194"/><text x="78.9986%" y="79.50"></text></g><g><title>_ZN97_$LT$k256_dot__dot_arithmetic_dot__dot_projective_dot__dot_ProjectivePoint$u20$as$u20$subtle_dot__dot_ConditionallySelectable$GT$18conditional_select17ha8572738067e1e73E (1,062 samples, 0.03%)</title><rect x="80.5085%" y="53" width="0.0341%" height="15" fill="rgb(253,11,6)" fg:x="2510288" fg:w="1062"/><text x="80.7585%" y="63.50"></text></g><g><title>__ecall_handler (41,814 samples, 1.34%)</title><rect x="80.5426%" y="53" width="1.3410%" height="15" fill="rgb(247,143,39)" fg:x="2511350" fg:w="41814"/><text x="80.7926%" y="63.50"></text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (273,666 samples, 8.78%)</title><rect x="81.8836%" y="53" width="8.7769%" height="15" fill="rgb(236,97,10)" fg:x="2553164" fg:w="273666"/><text x="82.1336%" y="63.50">compiler_bui..</text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (516 samples, 0.02%)</title><rect x="90.8438%" y="37" width="0.0165%" height="15" fill="rgb(233,208,19)" fg:x="2832546" fg:w="516"/><text x="91.0938%" y="47.50"></text></g><g><title>k256::arithmetic::mul::Radix16Decomposition&lt;_&gt;::new::he566c17e238f8d7b (6,236 samples, 0.20%)</title><rect x="90.6605%" y="53" width="0.2000%" height="15" fill="rgb(216,164,2)" fg:x="2826830" fg:w="6236"/><text x="90.9105%" y="63.50"></text></g><g><title>_ZN13crypto_bigint9ct_choice106_$LT$impl$u20$core_dot__dot_convert_dot__dot_From$LT$crypto_bigint_dot__dot_ct_choice_dot__dot_CtChoice$GT$$u20$for$u20$subtle_dot__dot_Choice$GT$4from17h4af9a10c998c0d98E (684 samples, 0.02%)</title><rect x="93.1133%" y="37" width="0.0219%" height="15" fill="rgb(220,129,5)" fg:x="2903310" fg:w="684"/><text x="93.3633%" y="47.50"></text></g><g><title>__ecall_handler (29,850 samples, 0.96%)</title><rect x="93.1352%" y="37" width="0.9573%" height="15" fill="rgb(242,17,10)" fg:x="2903994" fg:w="29850"/><text x="93.3852%" y="47.50"></text></g><g><title>k256::arithmetic::projective::ProjectivePoint::add::h6f7f15302a5fe947 (114,162 samples, 3.66%)</title><rect x="90.8605%" y="53" width="3.6613%" height="15" fill="rgb(242,107,0)" fg:x="2833066" fg:w="114162"/><text x="91.1105%" y="63.50">k256..</text></g><g><title>subtle::black_box::h7893a9e72daaa4ec (13,384 samples, 0.43%)</title><rect x="94.0926%" y="37" width="0.4292%" height="15" fill="rgb(251,28,31)" fg:x="2933844" fg:w="13384"/><text x="94.3426%" y="47.50"></text></g><g><title>_ZN13crypto_bigint9ct_choice106_$LT$impl$u20$core_dot__dot_convert_dot__dot_From$LT$crypto_bigint_dot__dot_ct_choice_dot__dot_CtChoice$GT$$u20$for$u20$subtle_dot__dot_Choice$GT$4from17h4af9a10c998c0d98E (544 samples, 0.02%)</title><rect x="96.0784%" y="37" width="0.0174%" height="15" fill="rgb(233,223,10)" fg:x="2995764" fg:w="544"/><text x="96.3284%" y="47.50"></text></g><g><title>__ecall_handler (29,760 samples, 0.95%)</title><rect x="96.0959%" y="37" width="0.9544%" height="15" fill="rgb(215,21,27)" fg:x="2996308" fg:w="29760"/><text x="96.3459%" y="47.50"></text></g><g><title>k256::arithmetic::projective::ProjectivePoint::double::ha3e4f1ade4b1c23f (89,704 samples, 2.88%)</title><rect x="94.5218%" y="53" width="2.8769%" height="15" fill="rgb(232,23,21)" fg:x="2947228" fg:w="89704"/><text x="94.7718%" y="63.50">k2..</text></g><g><title>subtle::black_box::h7893a9e72daaa4ec (10,864 samples, 0.35%)</title><rect x="97.0503%" y="37" width="0.3484%" height="15" fill="rgb(244,5,23)" fg:x="3026068" fg:w="10864"/><text x="97.3003%" y="47.50"></text></g><g><title>k256::arithmetic::scalar::Scalar::add::h3d1fbd396f1da960 (876 samples, 0.03%)</title><rect x="97.3988%" y="53" width="0.0281%" height="15" fill="rgb(226,81,46)" fg:x="3036932" fg:w="876"/><text x="97.6488%" y="63.50"></text></g><g><title>__ecall_handler (1,818 samples, 0.06%)</title><rect x="97.4674%" y="37" width="0.0583%" height="15" fill="rgb(247,70,30)" fg:x="3039074" fg:w="1818"/><text x="97.7174%" y="47.50"></text></g><g><title>k256::arithmetic::scalar::Scalar::mul::h6a58daf39e568e30 (3,168 samples, 0.10%)</title><rect x="97.4268%" y="53" width="0.1016%" height="15" fill="rgb(212,68,19)" fg:x="3037808" fg:w="3168"/><text x="97.6768%" y="63.50"></text></g><g><title>k256::arithmetic::scalar::Scalar::add::h3d1fbd396f1da960 (876 samples, 0.03%)</title><rect x="97.6020%" y="37" width="0.0281%" height="15" fill="rgb(240,187,13)" fg:x="3043268" fg:w="876"/><text x="97.8520%" y="47.50"></text></g><g><title>k256::arithmetic::scalar::wide::WideScalar::mul_shift_vartime::h8a26c5090746b101 (3,224 samples, 0.10%)</title><rect x="97.5284%" y="53" width="0.1034%" height="15" fill="rgb(223,113,26)" fg:x="3040976" fg:w="3224"/><text x="97.7784%" y="63.50"></text></g><g><title>memcpy (878 samples, 0.03%)</title><rect x="97.6318%" y="53" width="0.0282%" height="15" fill="rgb(206,192,2)" fg:x="3044200" fg:w="878"/><text x="97.8818%" y="63.50"></text></g><g><title>k256::arithmetic::mul::lincomb::h4ee292d96f8115aa (576,202 samples, 18.48%)</title><rect x="79.2414%" y="69" width="18.4796%" height="15" fill="rgb(241,108,4)" fg:x="2470780" fg:w="576202"/><text x="79.4914%" y="79.50">k256::arithmetic::mul::lincom..</text></g><g><title>subtle::black_box::h7893a9e72daaa4ec (1,904 samples, 0.06%)</title><rect x="97.6600%" y="53" width="0.0611%" height="15" fill="rgb(247,173,49)" fg:x="3045078" fg:w="1904"/><text x="97.9100%" y="63.50"></text></g><g><title>_ZN4k25610arithmetic3mul141_$LT$impl$u20$core_dot__dot_ops_dot__dot_arith_dot__dot_Mul$LT$$RF$k256_dot__dot_arithmetic_dot__dot_scalar_dot__dot_Scalar$GT$$u20$for$u20$k256_dot__dot_arithmetic_dot__dot_projective_dot__dot_ProjectivePoint$GT$3mul17h200811475e370563E (591,932 samples, 18.98%)</title><rect x="78.7385%" y="85" width="18.9841%" height="15" fill="rgb(224,114,35)" fg:x="2455098" fg:w="591932"/><text x="78.9885%" y="95.50">_ZN4k25610arithmetic3mul141_$L..</text></g><g><title>_ZN4k256129_$LT$impl$u20$elliptic_curve_dot__dot_field_dot__dot_FieldBytesEncoding$LT$k256_dot__dot_Secp256k1$GT$$u20$for$u20$crypto_bigint_dot__dot_uint_dot__dot_Uint$LT$_$GT$$GT$18decode_field_bytes17hda17de8773d3a2a9E (322 samples, 0.01%)</title><rect x="97.7226%" y="85" width="0.0103%" height="15" fill="rgb(245,159,27)" fg:x="3047030" fg:w="322"/><text x="97.9726%" y="95.50"></text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (496 samples, 0.02%)</title><rect x="97.7329%" y="85" width="0.0159%" height="15" fill="rgb(245,172,44)" fg:x="3047352" fg:w="496"/><text x="97.9829%" y="95.50"></text></g><g><title>ecdsa::signing::SigningKey&lt;C&gt;::from_bytes::h7141862e5cfc9c05 (798,932 samples, 25.62%)</title><rect x="72.1279%" y="101" width="25.6229%" height="15" fill="rgb(236,23,11)" fg:x="2248976" fg:w="798932"/><text x="72.3779%" y="111.50">ecdsa::signing::SigningKey&lt;C&gt;::from_bytes..</text></g><g><title>_ZN4k256129_$LT$impl$u20$elliptic_curve_dot__dot_field_dot__dot_FieldBytesEncoding$LT$k256_dot__dot_Secp256k1$GT$$u20$for$u20$crypto_bigint_dot__dot_uint_dot__dot_Uint$LT$_$GT$$GT$18decode_field_bytes17hda17de8773d3a2a9E (322 samples, 0.01%)</title><rect x="97.7564%" y="85" width="0.0103%" height="15" fill="rgb(205,117,38)" fg:x="3048084" fg:w="322"/><text x="98.0064%" y="95.50"></text></g><g><title>elliptic_curve::scalar::primitive::ScalarPrimitive&lt;C&gt;::from_slice::hd1bfcb589fb456f3 (526 samples, 0.02%)</title><rect x="97.7508%" y="101" width="0.0169%" height="15" fill="rgb(237,72,25)" fg:x="3047908" fg:w="526"/><text x="98.0008%" y="111.50"></text></g><g><title>sha2::sha256::compress256::h430d9065f295ea76 (67,695 samples, 2.17%)</title><rect x="97.7791%" y="101" width="2.1711%" height="15" fill="rgb(244,70,9)" fg:x="3048791" fg:w="67695"/><text x="98.0291%" y="111.50">s..</text></g><g><title>all (3,118,040 samples, 100%)</title><rect x="0.0000%" y="133" width="100.0000%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="3118040"/><text x="0.2500%" y="143.50"></text></g><g><title>main (3,118,039 samples, 100.00%)</title><rect x="0.0000%" y="117" width="100.0000%" height="15" fill="rgb(235,36,10)" fg:x="1" fg:w="3118039"/><text x="0.2500%" y="127.50">main</text></g><g><title>subtle::black_box::h7893a9e72daaa4ec (1,554 samples, 0.05%)</title><rect x="99.9502%" y="101" width="0.0498%" height="15" fill="rgb(251,123,47)" fg:x="3116486" fg:w="1554"/><text x="100.2002%" y="111.50"></text></g></svg></svg>