namespace std::array;
    enum Slice<T> {
        S(T[], int, int),
    }
    let<T> find_index: T[], (T -> bool) -> std::prelude::Option<int> = |arr, f| std::array::find_map_enumerated(arr, |i, x| if f(x) { std::prelude::Option::Some(i) } else { std::prelude::Option::None });
    let<T1, T2> find_map: T1[], (T1 -> std::prelude::Option<T2>) -> std::prelude::Option<T2> = |arr, f| std::array::find_map_enumerated(arr, |_, x| f(x));
    let<T1, T2> find_map_enumerated: T1[], (int, T1 -> std::prelude::Option<T2>) -> std::prelude::Option<T2> = |arr, f| std::array::find_internal::find_map_enumerated(arr, 0, std::array::len(arr), f);
    let<T1, T2> fold: T1[], T2, (T2, T1 -> T2) -> T2 = |arr, initial, folder| std::utils::fold(std::array::len(arr), |i| arr[i], initial, folder);
    let<T> len: T[] -> int = [];
    let<T1, T2> map: T1[], (T1 -> T2) -> T2[] = |arr, f| std::array::new(std::array::len(arr), |i| f(arr[i]));
    let<T1, T2> map_enumerated: T1[], (int, T1 -> T2) -> T2[] = |arr, f| std::array::new(std::array::len(arr), |i| f(i, arr[i]));
    let<T> new: int, (int -> T) -> T[] = |length, f| std::utils::fold(length, f, [], |acc, e| acc + [e]);
    let<T: FromLiteral + Mul> product: T[] -> T = |arr| std::array::fold(arr, 1, |a, b| a * b);
    let<T> set_element: T[], int, T -> T[] = |arr, i, x| {
        let _ = std::check::assert(i < std::array::len(arr), || "Index out of bounds");
        std::array::map_enumerated(arr, |j, y| if i == j { x } else { y })
    };
    let<T> slice_pop: std::array::Slice<T> -> (std::array::Slice<T>, std::prelude::Option<T>) = |s| match s {
        std::array::Slice::S(_, _, 0) => (s, std::prelude::Option::None),
        std::array::Slice::S(arr, start, l) => (std::array::Slice::S(arr, start, l - 1), std::prelude::Option::Some(arr[start + l - 1])),
    };
    let<T> sort: T[], (T, T -> bool) -> T[] = |arr, lt| std::array::internal::sort(std::array::to_slice(arr), lt);
    let<T> split_slice_half: std::array::Slice<T> -> (std::array::Slice<T>, std::array::Slice<T>) = |s| match s {
        std::array::Slice::S(arr, start, l) => {
            let half_len = l / 2;
            (std::array::Slice::S(arr, start, half_len), std::array::Slice::S(arr, start + half_len, l - half_len))
        },
    };
    let<T> sub_array: T[], int, int -> T[] = |arr, start, l| std::array::new(l, |i| arr[start + i]);
    let<T: Add + FromLiteral> sum: T[] -> T = |arr| std::array::fold(arr, 0, |a, b| a + b);
    let<T> to_array: std::array::Slice<T> -> T[] = |s| match s {
        std::array::Slice::S(arr, start, l) => if start == 0 && l == std::array::len(arr) { arr } else { std::array::new(l, |i| arr[start + i]) },
    };
    let<T> to_slice: T[] -> std::array::Slice<T> = |x| std::array::Slice::S(x, 0, std::array::len(x));
    let<T1, T2, T3> zip: T1[], T2[], (T1, T2 -> T3) -> T3[] = |array1, array2, fn| std::array::new(std::array::len(array1), |i| fn(array1[i], array2[i]));
namespace std::array::find_internal;
    let<T1, T2> find_map_enumerated: T1[], int, int, (int, T1 -> std::prelude::Option<T2>) -> std::prelude::Option<T2> = |arr, i, l, f| if i >= l { std::prelude::Option::None } else { match f(i, arr[i]) {
        std::prelude::Option::Some(x) => std::prelude::Option::Some(x),
        std::prelude::Option::None => std::array::find_internal::find_map_enumerated(arr, i + 1, l, f),
    } };
namespace std::array::internal;
    let<T> merge: std::array::Slice<T>, std::array::Slice<T>, (T, T -> bool) -> T[] = |left, right, lt| match (std::array::slice_pop(left), std::array::slice_pop(right)) {
        ((_, std::prelude::Option::None), _) => std::array::to_array(right),
        (_, (_, std::prelude::Option::None)) => std::array::to_array(left),
        ((l_short, std::prelude::Option::Some(l_last)), (r_short, std::prelude::Option::Some(r_last))) => if lt(l_last, r_last) { std::array::internal::merge(left, r_short, lt) + [r_last] } else { std::array::internal::merge(l_short, right, lt) + [l_last] },
    };
    let<T> sort: std::array::Slice<T>, (T, T -> bool) -> T[] = |slice, lt| match slice {
        std::array::Slice::S(_, _, 0) => [],
        std::array::Slice::S(_, _, 1) => std::array::to_array(slice),
        s => {
            let (left, right) = std::array::split_slice_half(s);
            let left_sorted = std::array::to_slice(std::array::internal::sort(left, lt));
            let right_sorted = std::array::to_slice(std::array::internal::sort(right, lt));
            std::array::internal::merge(left_sorted, right_sorted, lt)
        },
    };
namespace std::btree;
    enum BTree<K, V> {
        Inner((K, V)[], std::btree::BTree<K, V>[]),
        Leaf((K, V)[]),
    }
    enum CmpResult {
        Less,
        Equal,
        Greater,
    }
    let<K, V> get: std::btree::BTree<K, V>, K, (K, K -> std::btree::CmpResult) -> std::prelude::Option<V> = std::btree::internal::get::<K, V>;
    let<K, V> insert: std::btree::BTree<K, V>, (K, V), (K, K -> std::btree::CmpResult) -> std::btree::BTree<K, V> = |b_tree, (k, v), cmp| match std::btree::internal::insert(b_tree, (k, v), cmp) {
        std::btree::internal::InsertResult::Split(item, left, right) => std::btree::BTree::Inner([item], [left, right]),
        std::btree::internal::InsertResult::Updated(t) => t,
    };
    let max_items = 5;
    let<K, V> new: -> std::btree::BTree<K, V> = || std::btree::BTree::Leaf([]);
namespace std::btree::internal;
    enum InsertResult<K, V> {
        Split((K, V), std::btree::BTree<K, V>, std::btree::BTree<K, V>),
        Updated(std::btree::BTree<K, V>),
    }
    enum NodeSearchResult {
        InNode(int),
        InChild(int),
    }
    let<T> array_insert_at: T[], int, T -> T[] = |arr, i, x| {
        let (left, right) = std::btree::internal::array_split(arr, i);
        left + [x] + right
    };
    let<T> array_split: T[], int -> (T[], T[]) = |arr, l| {
        let left = std::array::sub_array(arr, 0, l);
        let right = std::array::sub_array(arr, l, std::array::len(arr) - l);
        (left, right)
    };
    let<T> array_split_pivot: T[], int -> (T[], T, T[]) = |arr, i| {
        let left = std::array::sub_array(arr, 0, i);
        let right = std::array::sub_array(arr, i + 1, std::array::len(arr) - i - 1);
        (left, arr[i], right)
    };
    let<K, V> get: std::btree::BTree<K, V>, K, (K, K -> std::btree::CmpResult) -> std::prelude::Option<V> = |b_tree, k, cmp| match b_tree {
        std::btree::BTree::Inner(items, children) => match std::btree::internal::search_in_node(items, k, cmp) {
            std::btree::internal::NodeSearchResult::InNode(i) => std::prelude::Option::Some(std::btree::internal::value_of_item(items[i])),
            std::btree::internal::NodeSearchResult::InChild(i) => std::btree::internal::get(children[i], k, cmp),
        },
        std::btree::BTree::Leaf(items) => std::array::find_map(items, |(key, value)| match cmp(k, key) {
            std::btree::CmpResult::Equal => std::prelude::Option::Some(value),
            _ => std::prelude::Option::None,
        }),
    };
    let<K, V> insert: std::btree::BTree<K, V>, (K, V), (K, K -> std::btree::CmpResult) -> std::btree::internal::InsertResult<K, V> = |b_tree, (k, v), cmp| match b_tree {
        std::btree::BTree::Leaf(items) => std::btree::internal::insert_into_leaf(items, (k, v), cmp),
        std::btree::BTree::Inner(items, children) => match std::btree::internal::search_in_node(items, k, cmp) {
            std::btree::internal::NodeSearchResult::InNode(i) => std::btree::internal::InsertResult::Updated(std::btree::BTree::Inner(std::array::set_element(items, i, (k, v)), children)),
            std::btree::internal::NodeSearchResult::InChild(i) => match std::btree::internal::insert(children[i], (k, v), cmp) {
                std::btree::internal::InsertResult::Updated(child) => std::btree::internal::InsertResult::Updated(std::btree::BTree::Inner(items, std::array::set_element(children, i, child))),
                std::btree::internal::InsertResult::Split((k1, v1), left, right) => std::btree::internal::insert_into_inner(items, children, (k1, v1), i, left, right),
            },
        },
    };
    let<K, V> insert_into_inner: (K, V)[], std::btree::BTree<K, V>[], (K, V), int, std::btree::BTree<K, V>, std::btree::BTree<K, V> -> std::btree::internal::InsertResult<K, V> = |items, children, (k, v), i, left, right| {
        let new_items = std::btree::internal::array_insert_at(items, i, (k, v));
        let (children_left, _, children_right) = std::btree::internal::array_split_pivot(children, i);
        let new_children = children_left + [left, right] + children_right;
        if std::array::len(new_items) <= std::btree::max_items { std::btree::internal::InsertResult::Updated(std::btree::BTree::Inner(new_items, new_children)) } else { std::btree::internal::split_inner(new_items, new_children) }
    };
    let<K, V> insert_into_leaf: (K, V)[], (K, V), (K, K -> std::btree::CmpResult) -> std::btree::internal::InsertResult<K, V> = |items, (k, v), cmp| {
        let new_items = std::btree::internal::items_insert(items, (k, v), cmp);
        if std::array::len(new_items) <= std::btree::max_items { std::btree::internal::InsertResult::Updated(std::btree::BTree::Leaf(new_items)) } else { std::btree::internal::split_leaf(new_items) }
    };
    let<K, V> items_insert: (K, V)[], (K, V), (K, K -> std::btree::CmpResult) -> (K, V)[] = |items, (k, v), cmp| {
        let (new_items, ins) = std::array::fold(items, ([], std::prelude::false), |(acc, inserted), (key, value)| if inserted { (acc + [(key, value)], inserted) } else { match cmp(k, key) {
            std::btree::CmpResult::Less => (acc + [(k, v), (key, value)], std::prelude::true),
            std::btree::CmpResult::Equal => (acc + [(k, v)], std::prelude::true),
            std::btree::CmpResult::Greater => (acc + [(key, value)], std::prelude::false),
        } });
        if ins { new_items } else { new_items + [(k, v)] }
    };
    let one: int = 1;
    let<K1, V, K2> search_in_node: (K1, V)[], K2, (K2, K1 -> std::btree::CmpResult) -> std::btree::internal::NodeSearchResult = |items, k, cmp| {
        let r = std::array::find_map_enumerated(items, |i, (key, _)| match cmp(k, key) {
            std::btree::CmpResult::Less => std::prelude::Option::Some(std::btree::internal::NodeSearchResult::InChild(i)),
            std::btree::CmpResult::Equal => std::prelude::Option::Some(std::btree::internal::NodeSearchResult::InNode(i)),
            std::btree::CmpResult::Greater => std::prelude::Option::None,
        });
        std::utils::unwrap_or_else(r, || std::btree::internal::NodeSearchResult::InChild(std::array::len(items)))
    };
    let<K, V> split_inner: (K, V)[], std::btree::BTree<K, V>[] -> std::btree::internal::InsertResult<K, V> = |items, children| {
        let split = (std::array::len(items) - 1) / 2;
        let (left_items, push_up, right_items) = std::btree::internal::array_split_pivot(items, split);
        let (left_children, right_children) = std::btree::internal::array_split(children, split + 1);
        std::btree::internal::InsertResult::Split(push_up, std::btree::BTree::Inner(left_items, left_children), std::btree::BTree::Inner(right_items, right_children))
    };
    let<K, V> split_leaf: (K, V)[] -> std::btree::internal::InsertResult<K, V> = |items| {
        let split = (std::array::len(items) - 1) / 2;
        let (left, center, right) = std::btree::internal::array_split_pivot(items, split);
        std::btree::internal::InsertResult::Split(center, std::btree::BTree::Leaf(left), std::btree::BTree::Leaf(right))
    };
    let<K, V> value_of_item: (K, V) -> V = |(_, value)| value;
namespace std::check;
    let assert: bool, (-> string) -> () = |condition, reason| if !condition { std::check::panic(reason()) } else { () };
    let panic: string -> ! = [];
namespace std::convert;
    let expr = [];
    let fe = [];
    let int = [];
namespace std::debug;
    let<T: ToString> print: T -> () = [];
    let<T: ToString> println: T -> () = |msg| {
        let _ = std::debug::print(msg);
        std::debug::print("\n")
    };
namespace std::field;
    let BABYBEAR_PRIME: int = 2013265921;
    let BN254_PRIME: int = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    let GOLDILOCKS_PRIME: int = 18446744069414584321;
    enum KnownField {
        Goldilocks,
        BN254,
        BabyBear,
    }
    let known_field: -> std::prelude::Option<std::field::KnownField> = || if std::field::modulus() == std::field::GOLDILOCKS_PRIME { std::prelude::Option::Some(std::field::KnownField::Goldilocks) } else { if std::field::modulus() == std::field::BN254_PRIME { std::prelude::Option::Some(std::field::KnownField::BN254) } else { if std::field::modulus() == std::field::BABYBEAR_PRIME { std::prelude::Option::Some(std::field::KnownField::BabyBear) } else { std::prelude::Option::None } } };
    let modulus: -> int = [];
    let require_known_field: std::field::KnownField, (-> string) -> () = |f, err| match (f, std::field::known_field()) {
        (std::field::KnownField::Goldilocks, std::prelude::Option::Some(std::field::KnownField::Goldilocks)) => (),
        (std::field::KnownField::BN254, std::prelude::Option::Some(std::field::KnownField::BN254)) => (),
        (std::field::KnownField::BabyBear, std::prelude::Option::Some(std::field::KnownField::BabyBear)) => (),
        _ => std::check::panic(err()),
    };
namespace std::math::ff;
    let add = |x, y, modulus| std::math::ff::reduce(x + y, modulus);
    let div = |x, y, modulus| std::math::ff::mul(x, std::math::ff::inverse(y, modulus), modulus);
    let extended_gcd = |a, b| if b == 0 { if a == 1 { (1, 0) } else { std::check::panic("Inputs are not co-prime, inverse does not exist.") } } else {
        let (r1, r2) = std::math::ff::extended_gcd(b, a % b);
        (r2, r1 - a / b * r2)
    };
    let inv_field: fe -> fe = |x| std::convert::fe(std::math::ff::inverse(std::convert::int(x), std::field::modulus()));
    let inverse = |x, modulus| if x <= 0 || x >= modulus { if x == 0 { std::check::panic("Tried to compute the inverse of zero.") } else { std::check::panic("Tried to compute the inverse of a negative number or a number outside the field.") } } else {
        let (r, _) = std::math::ff::extended_gcd(x, modulus);
        std::math::ff::reduce(r, modulus)
    };
    let mul = |x, y, modulus| std::math::ff::reduce(x * y, modulus);
    let reduce = |x, modulus| if x < 0 { (modulus - -x % modulus) % modulus } else { x % modulus };
    let sub = |x, y, modulus| std::math::ff::reduce(x - y, modulus);
namespace std::math::fp2;
    enum Fp2<T> {
        Fp2(T, T),
    }
    let<T: Add> add_ext: std::math::fp2::Fp2<T>, std::math::fp2::Fp2<T> -> std::math::fp2::Fp2<T> = |a, b| match (a, b) {
        (std::math::fp2::Fp2::Fp2(a0, a1), std::math::fp2::Fp2::Fp2(b0, b1)) => std::math::fp2::Fp2::Fp2(a0 + b0, a1 + b1),
    };
    let constrain_eq_ext: std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr> -> std::prelude::Constr[] = |a, b| match (a, b) {
        (std::math::fp2::Fp2::Fp2(a0, a1), std::math::fp2::Fp2::Fp2(b0, b1)) => [a0 = b0, a1 = b1],
    };
    let eq_ext: std::math::fp2::Fp2<fe>, std::math::fp2::Fp2<fe> -> bool = |a, b| match (a, b) {
        (std::math::fp2::Fp2::Fp2(a0, a1), std::math::fp2::Fp2::Fp2(b0, b1)) => a0 == b0 && a1 == b1,
    };
    let eval_ext: std::math::fp2::Fp2<expr> -> std::math::fp2::Fp2<fe> = query |a| match a {
        std::math::fp2::Fp2::Fp2(a0, a1) => std::math::fp2::Fp2::Fp2(std::prover::eval(a0), std::prover::eval(a1)),
    };
    let expr_ext: std::math::fp2::Fp2<fe> -> std::math::fp2::Fp2<expr> = |a| match a {
        std::math::fp2::Fp2::Fp2(a0, a1) => std::math::fp2::Fp2::Fp2(std::convert::expr(a0), std::convert::expr(a1)),
    };
    let fp2_from_array = |arr| { if std::math::fp2::is_extension(arr) { std::math::fp2::Fp2::Fp2(arr[0], arr[1]) } else {
        let _ = std::check::assert(!std::math::fp2::needs_extension(), || "The field is too small and needs to move to the extension field. Pass two elements instead!");
        std::math::fp2::from_base(arr[0])
    } };
    let<T: FromLiteral> from_base: T -> std::math::fp2::Fp2<T> = |x| std::math::fp2::Fp2::Fp2(x, 0);
    let inv_ext: std::math::fp2::Fp2<fe> -> std::math::fp2::Fp2<fe> = |a| match a {
        std::math::fp2::Fp2::Fp2(a0, a1) => {
            let factor = std::math::ff::inv_field(7 * a1 * a1 - a0 * a0);
            std::math::fp2::Fp2::Fp2(-a0 * factor, a1 * factor)
        },
    };
    let is_extension = |arr| match std::array::len(arr) {
        1 => std::prelude::false,
        2 => std::prelude::true,
        _ => std::check::panic("Expected 1 or 2 accumulator columns!"),
    };
    let<T: Add + FromLiteral + Mul> mul_ext: std::math::fp2::Fp2<T>, std::math::fp2::Fp2<T> -> std::math::fp2::Fp2<T> = |a, b| match (a, b) {
        (std::math::fp2::Fp2::Fp2(a0, a1), std::math::fp2::Fp2::Fp2(b0, b1)) => std::math::fp2::Fp2::Fp2(a0 * b0 + 7 * a1 * b1, a1 * b0 + a0 * b1),
    };
    let needs_extension: -> bool = || match std::field::known_field() {
        std::prelude::Option::Some(std::field::KnownField::Goldilocks) => std::prelude::true,
        std::prelude::Option::Some(std::field::KnownField::BN254) => std::prelude::false,
        None => std::check::panic("The permutation/lookup argument is not implemented for the current field!"),
    };
    let next_ext: std::math::fp2::Fp2<expr> -> std::math::fp2::Fp2<expr> = |a| match a {
        std::math::fp2::Fp2::Fp2(a0, a1) => std::math::fp2::Fp2::Fp2(a0', a1'),
    };
    let<T: Sub> sub_ext: std::math::fp2::Fp2<T>, std::math::fp2::Fp2<T> -> std::math::fp2::Fp2<T> = |a, b| match (a, b) {
        (std::math::fp2::Fp2::Fp2(a0, a1), std::math::fp2::Fp2::Fp2(b0, b1)) => std::math::fp2::Fp2::Fp2(a0 - b0, a1 - b1),
    };
    let<T> unpack_ext: std::math::fp2::Fp2<T> -> (T, T) = |a| match a {
        std::math::fp2::Fp2::Fp2(a0, a1) => (a0, a1),
    };
    let<T> unpack_ext_array: std::math::fp2::Fp2<T> -> T[] = |a| match a {
        std::math::fp2::Fp2::Fp2(a0, a1) => [a0, a1],
    };
namespace std::math::fp2::test;
    let add = || {
        let test_add = |a, b, c| std::check::assert(std::math::fp2::eq_ext(std::math::fp2::add_ext(a, b), c), || "Wrong addition result");
        let _ = test_add(std::math::fp2::from_base(0), std::math::fp2::from_base(0), std::math::fp2::from_base(0));
        let _ = test_add(std::math::fp2::Fp2::Fp2(123, 1234), std::math::fp2::from_base(0), std::math::fp2::Fp2::Fp2(123, 1234));
        let _ = test_add(std::math::fp2::from_base(0), std::math::fp2::Fp2::Fp2(123, 1234), std::math::fp2::Fp2::Fp2(123, 1234));
        let _ = test_add(std::math::fp2::Fp2::Fp2(123, 1234), std::math::fp2::Fp2::Fp2(567, 5678), std::math::fp2::Fp2::Fp2(690, 6912));
        test_add(std::math::fp2::Fp2::Fp2(-1, -1), std::math::fp2::Fp2::Fp2(3, 4), std::math::fp2::Fp2::Fp2(2, 3))
    };
    let inverse = || {
        let test_elements = [std::math::fp2::from_base(1), std::math::fp2::Fp2::Fp2(123, 1234), std::math::fp2::Fp2::Fp2(-1, 500)];
        std::array::map(test_elements, |x| {
            let mul_with_inverse = std::math::fp2::mul_ext(x, std::math::fp2::inv_ext(x));
            std::check::assert(std::math::fp2::eq_ext(mul_with_inverse, std::math::fp2::from_base(1)), || "Should be 1")
        })
    };
    let mul = || {
        let test_mul = |a, b, c| std::check::assert(std::math::fp2::eq_ext(std::math::fp2::mul_ext(a, b), c), || "Wrong multiplication result");
        let _ = test_mul(std::math::fp2::from_base(1), std::math::fp2::from_base(1), std::math::fp2::from_base(1));
        let _ = test_mul(std::math::fp2::Fp2::Fp2(123, 1234), std::math::fp2::from_base(1), std::math::fp2::Fp2::Fp2(123, 1234));
        let _ = test_mul(std::math::fp2::from_base(1), std::math::fp2::Fp2::Fp2(123, 1234), std::math::fp2::Fp2::Fp2(123, 1234));
        let _ = test_mul(std::math::fp2::Fp2::Fp2(123, 1234), std::math::fp2::from_base(0), std::math::fp2::from_base(0));
        let _ = test_mul(std::math::fp2::from_base(0), std::math::fp2::Fp2::Fp2(123, 1234), std::math::fp2::from_base(0));
        let _ = test_mul(std::math::fp2::Fp2::Fp2(123, 1234), std::math::fp2::Fp2::Fp2(567, 5678), std::math::fp2::Fp2::Fp2(49116305, 1398072));
        test_mul(std::math::fp2::Fp2::Fp2(-1, -2), std::math::fp2::Fp2::Fp2(-3, 4), std::math::fp2::Fp2::Fp2(3 - 7 * 8, 6 - 4))
    };
    let sub = || {
        let test_sub = |a, b, c| std::check::assert(std::math::fp2::eq_ext(std::math::fp2::sub_ext(a, b), c), || "Wrong subtraction result");
        let _ = test_sub(std::math::fp2::from_base(0), std::math::fp2::from_base(0), std::math::fp2::from_base(0));
        let _ = test_sub(std::math::fp2::Fp2::Fp2(123, 1234), std::math::fp2::from_base(0), std::math::fp2::Fp2::Fp2(123, 1234));
        let _ = test_sub(std::math::fp2::Fp2::Fp2(123, 1234), std::math::fp2::Fp2::Fp2(567, 5678), std::math::fp2::Fp2::Fp2(123 - 567, 1234 - 5678));
        test_sub(std::math::fp2::Fp2::Fp2(-1, -1), std::math::fp2::Fp2::Fp2(4294967296, 1), std::math::fp2::Fp2::Fp2(-4294967296 - 1, -2))
    };
namespace std::math::fp4;
    enum Fp4<T> {
        Fp4(T, T, T, T),
    }
    let<T: Add> add_ext: std::math::fp4::Fp4<T>, std::math::fp4::Fp4<T> -> std::math::fp4::Fp4<T> = |a, b| match (a, b) {
        (std::math::fp4::Fp4::Fp4(a0, a1, a2, a3), std::math::fp4::Fp4::Fp4(b0, b1, b2, b3)) => std::math::fp4::Fp4::Fp4(a0 + b0, a1 + b1, a2 + b2, a3 + b3),
    };
    let constrain_eq_ext: std::math::fp4::Fp4<expr>, std::math::fp4::Fp4<expr> -> std::prelude::Constr[] = |a, b| match (a, b) {
        (std::math::fp4::Fp4::Fp4(a0, a1, a2, a3), std::math::fp4::Fp4::Fp4(b0, b1, b2, b3)) => [a0 = b0, a1 = b1, a2 = b2, a3 = b3],
    };
    let eq_ext: std::math::fp4::Fp4<fe>, std::math::fp4::Fp4<fe> -> bool = |a, b| match (a, b) {
        (std::math::fp4::Fp4::Fp4(a0, a1, a2, a3), std::math::fp4::Fp4::Fp4(b0, b1, b2, b3)) => a0 == b0 && a1 == b1 && a2 == b2 && a3 == b3,
    };
    let eval_ext: std::math::fp4::Fp4<expr> -> std::math::fp4::Fp4<fe> = query |a| match a {
        std::math::fp4::Fp4::Fp4(a0, a1, a2, a3) => std::math::fp4::Fp4::Fp4(std::prover::eval(a0), std::prover::eval(a1), std::prover::eval(a2), std::prover::eval(a3)),
    };
    let expr_ext: std::math::fp4::Fp4<fe> -> std::math::fp4::Fp4<expr> = |a| match a {
        std::math::fp4::Fp4::Fp4(a0, a1, a2, a3) => std::math::fp4::Fp4::Fp4(std::convert::expr(a0), std::convert::expr(a1), std::convert::expr(a2), std::convert::expr(a3)),
    };
    let<T: FromLiteral> from_base: T -> std::math::fp4::Fp4<T> = |x| std::math::fp4::Fp4::Fp4(x, 0, 0, 0);
    let inv_ext: std::math::fp4::Fp4<fe> -> std::math::fp4::Fp4<fe> = |a| match a {
        std::math::fp4::Fp4::Fp4(a0, a1, a2, a3) => {
            let b0 = a0 * a0 - 11 * (a1 * (a3 + a3) - a2 * a2);
            let b2 = a0 * (a2 + a2) - a1 * a1 - 11 * (a3 * a3);
            let c = b0 * b0 - 11 * b2 * b2;
            let ic = std::math::ff::inv_field(c);
            let b_0 = b0 * ic;
            let b_2 = b2 * ic;
            std::math::fp4::Fp4::Fp4(a0 * b_0 - 11 * a2 * b_2, -1 * a1 * b_0 + 11 * a3 * b_2, -1 * a0 * b_2 + a2 * b_0, a1 * b_2 - a3 * b_0)
        },
    };
    let<T: Add + FromLiteral + Mul> mul_ext: std::math::fp4::Fp4<T>, std::math::fp4::Fp4<T> -> std::math::fp4::Fp4<T> = |a, b| match (a, b) {
        (std::math::fp4::Fp4::Fp4(a0, a1, a2, a3), std::math::fp4::Fp4::Fp4(b0, b1, b2, b3)) => std::math::fp4::Fp4::Fp4(a0 * b0 + 11 * (a1 * b3 + a2 * b2 + a3 * b1), a0 * b1 + a1 * b0 + 11 * (a2 * b3 + a3 * b2), a0 * b2 + a1 * b1 + a2 * b0 + 11 * (a3 * b3), a0 * b3 + a1 * b2 + a2 * b1 + a3 * b0),
    };
    let next_ext: std::math::fp4::Fp4<expr> -> std::math::fp4::Fp4<expr> = |a| match a {
        std::math::fp4::Fp4::Fp4(a0, a1, a2, a3) => std::math::fp4::Fp4::Fp4(a0', a1', a2', a3'),
    };
    let<T: Sub> sub_ext: std::math::fp4::Fp4<T>, std::math::fp4::Fp4<T> -> std::math::fp4::Fp4<T> = |a, b| match (a, b) {
        (std::math::fp4::Fp4::Fp4(a0, a1, a2, a3), std::math::fp4::Fp4::Fp4(b0, b1, b2, b3)) => std::math::fp4::Fp4::Fp4(a0 - b0, a1 - b1, a2 - b2, a3 - b3),
    };
    let<T> unpack_ext: std::math::fp4::Fp4<T> -> (T, T, T, T) = |a| match a {
        std::math::fp4::Fp4::Fp4(a0, a1, a2, a3) => (a0, a1, a2, a3),
    };
    let<T> unpack_ext_array: std::math::fp4::Fp4<T> -> T[] = |a| match a {
        std::math::fp4::Fp4::Fp4(a0, a1, a2, a3) => [a0, a1, a2, a3],
    };
namespace std::math::fp4::test;
    let add = || {
        let test_add = |a, b, c| std::check::assert(std::math::fp4::eq_ext(std::math::fp4::add_ext(a, b), c), || "Wrong addition result");
        let _ = test_add(std::math::fp4::from_base(0), std::math::fp4::from_base(0), std::math::fp4::from_base(0));
        let _ = test_add(std::math::fp4::Fp4::Fp4(123, 1234, 1, 2), std::math::fp4::from_base(0), std::math::fp4::Fp4::Fp4(123, 1234, 1, 2));
        let _ = test_add(std::math::fp4::from_base(0), std::math::fp4::Fp4::Fp4(123, 1234, 123, 1334), std::math::fp4::Fp4::Fp4(123, 1234, 123, 1334));
        let _ = test_add(std::math::fp4::Fp4::Fp4(123, 1234, 123, 122), std::math::fp4::Fp4::Fp4(567, 5678, 250, 678), std::math::fp4::Fp4::Fp4(690, 6912, 373, 800));
        test_add(std::math::fp4::Fp4::Fp4(-1, -1, -1, -1), std::math::fp4::Fp4::Fp4(3, 4, 5, 6), std::math::fp4::Fp4::Fp4(2, 3, 4, 5));
        test_add(std::math::fp4::Fp4::Fp4(-11, -11, -11, -11), std::math::fp4::Fp4::Fp4(0, 0, 0, 0), std::math::fp4::Fp4::Fp4(-11, -11, -11, -11));
        test_add(std::math::fp4::Fp4::Fp4(-1, 0, 0, 0), std::math::fp4::Fp4::Fp4(1, 0, 0, 0), std::math::fp4::from_base(0));
    };
    let inverse = || {
        let test_elements = [std::math::fp4::from_base(1), std::math::fp4::Fp4::Fp4(123, 1234, 1, 2), std::math::fp4::Fp4::Fp4(-1, 500, 3, 5)];
        std::array::map(test_elements, |x| {
            let mul_with_inverse = std::math::fp4::mul_ext(x, std::math::fp4::inv_ext(x));
            std::check::assert(std::math::fp4::eq_ext(mul_with_inverse, std::math::fp4::from_base(1)), || "Should be 1")
        })
    };
    let mul = || {
        let test_mul = |a, b, c| std::check::assert(std::math::fp4::eq_ext(std::math::fp4::mul_ext(a, b), c), || "Wrong multiplication result");
        let _ = test_mul(std::math::fp4::from_base(1), std::math::fp4::from_base(1), std::math::fp4::from_base(1));
        let _ = test_mul(std::math::fp4::Fp4::Fp4(123, 1234, 280, 400), std::math::fp4::from_base(1), std::math::fp4::Fp4::Fp4(123, 1234, 280, 400));
        let _ = test_mul(std::math::fp4::from_base(1), std::math::fp4::Fp4::Fp4(123, 1234, 12, 15), std::math::fp4::Fp4::Fp4(123, 1234, 12, 15));
        let _ = test_mul(std::math::fp4::Fp4::Fp4(123, 1234, 234, 500), std::math::fp4::from_base(0), std::math::fp4::from_base(0));
        let _ = test_mul(std::math::fp4::from_base(0), std::math::fp4::Fp4::Fp4(123, 1234, 33, 200), std::math::fp4::from_base(0));
        test_mul(std::math::fp4::Fp4::Fp4(1, 2, 3, 4), std::math::fp4::Fp4::Fp4(5, 6, 7, 8), std::math::fp4::Fp4::Fp4(676, 588, 386, 60));
        test_mul(std::math::fp4::Fp4::Fp4(-1, -2, -3, -4), std::math::fp4::Fp4::Fp4(-3, 4, 4, 5), std::math::fp4::Fp4::Fp4(-415, -339, -223, -13));
    };
    let sub = || {
        let test_sub = |a, b, c| std::check::assert(std::math::fp4::eq_ext(std::math::fp4::sub_ext(a, b), c), || "Wrong subtraction result");
        let _ = test_sub(std::math::fp4::from_base(0), std::math::fp4::from_base(0), std::math::fp4::from_base(0));
        let _ = test_sub(std::math::fp4::Fp4::Fp4(123, 1234, 124, 1235), std::math::fp4::from_base(0), std::math::fp4::Fp4::Fp4(123, 1234, 124, 1235));
        let _ = test_sub(std::math::fp4::Fp4::Fp4(123, 1234, 248, 5000), std::math::fp4::Fp4::Fp4(567, 5678, 300, 2380), std::math::fp4::Fp4::Fp4(123 - 567, 1234 - 5678, 248 - 300, 5000 - 2380));
        test_sub(std::math::fp4::Fp4::Fp4(-1, -1, 0, 0), std::math::fp4::Fp4::Fp4(2013265920, 1, 0, 0), std::math::fp4::Fp4::Fp4(-2013265920 - 1, -2, 0, 0))
    };
namespace std::prelude;
    enum Constr {
        Identity(expr, expr),
        Lookup((std::prelude::Option<expr>, std::prelude::Option<expr>), (expr, expr)[]),
        Permutation((std::prelude::Option<expr>, std::prelude::Option<expr>), (expr, expr)[]),
        Connection((expr, expr)[]),
    }
    enum Option<T> {
        None,
        Some(T),
    }
    enum Query {
        Input(int),
        Output(int, int),
        Hint(fe),
        DataIdentifier(int, int),
        None,
    }
    let challenge: int, int -> expr = [];
    let false: bool = !std::prelude::true;
    let set_hint: expr, (int -> std::prelude::Query) -> () = [];
    let true: bool = "" == "";
namespace std::protocols::bus;
    let bus_interaction: expr, expr, expr[], expr, expr[], std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr> -> std::prelude::Constr[] = |is_first, id, tuple, multiplicity, acc, alpha, beta| {
        let folded = std::math::fp2::sub_ext(beta, std::protocols::fingerprint::fingerprint_with_id(id, tuple, alpha));
        let folded_next = std::math::fp2::next_ext(folded);
        let m_ext = std::math::fp2::from_base(multiplicity);
        let m_ext_next = std::math::fp2::next_ext(m_ext);
        let acc_ext = std::math::fp2::fp2_from_array(acc);
        let next_acc = std::math::fp2::next_ext(acc_ext);
        let is_first_next = std::math::fp2::from_base(is_first');
        let update_expr = std::math::fp2::sub_ext(std::math::fp2::mul_ext(folded_next, std::math::fp2::sub_ext(next_acc, std::math::fp2::mul_ext(acc_ext, std::math::fp2::sub_ext(std::math::fp2::from_base(1), is_first_next)))), m_ext_next);
        std::math::fp2::constrain_eq_ext(update_expr, std::math::fp2::from_base(0))
    };
    let bus_receive: expr, expr, expr[], expr, expr[], std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr> -> std::prelude::Constr[] = |is_first, id, tuple, multiplicity, acc, alpha, beta| { std::protocols::bus::bus_interaction(is_first, id, tuple, -1 * multiplicity, acc, alpha, beta) };
    let bus_send: expr, expr, expr[], expr, expr[], std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr> -> std::prelude::Constr[] = |is_first, id, tuple, multiplicity, acc, alpha, beta| { std::protocols::bus::bus_interaction(is_first, id, tuple, multiplicity, acc, alpha, beta) };
    let compute_next_z_receive: expr, expr, expr[], expr, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr> -> fe[] = query |is_first, id, tuple, multiplicity, acc, alpha, beta| std::protocols::bus::compute_next_z_send(is_first, id, tuple, -multiplicity, acc, alpha, beta);
    let compute_next_z_send: expr, expr, expr[], expr, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr> -> fe[] = query |is_first, id, tuple, multiplicity, acc, alpha, beta| {
        let folded = std::math::fp2::sub_ext(beta, std::protocols::fingerprint::fingerprint_with_id(id, tuple, alpha));
        let folded_next = std::math::fp2::next_ext(folded);
        let m_ext = std::math::fp2::from_base(multiplicity);
        let m_ext_next = std::math::fp2::next_ext(m_ext);
        let is_first_next = std::prover::eval(is_first');
        let current_acc = if is_first_next == 1 { std::math::fp2::from_base(0) } else { std::math::fp2::eval_ext(acc) };
        let res = std::math::fp2::add_ext(current_acc, std::math::fp2::mul_ext(std::math::fp2::eval_ext(m_ext_next), std::math::fp2::inv_ext(std::math::fp2::eval_ext(folded_next))));
        std::math::fp2::unpack_ext_array(res)
    };
namespace std::protocols::fingerprint;
    let<T: Add + FromLiteral + Mul> fingerprint: T[], std::math::fp2::Fp2<T> -> std::math::fp2::Fp2<T> = |expr_array, alpha| std::array::fold(expr_array, std::math::fp2::from_base(0), |sum_acc, el| std::math::fp2::add_ext(std::math::fp2::mul_ext(alpha, sum_acc), std::math::fp2::from_base(el)));
    let<T: Add + FromLiteral + Mul> fingerprint_with_id: T, T[], std::math::fp2::Fp2<T> -> std::math::fp2::Fp2<T> = |id, expr_array, alpha| std::protocols::fingerprint::fingerprint([id] + expr_array, alpha);
namespace std::protocols::lookup;
    let compute_next_z: std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr, expr -> fe[] = query |acc, alpha, beta, lookup_constraint, multiplicities| {
        let (lhs_selector, lhs, rhs_selector, rhs) = std::protocols::lookup::unpack_lookup_constraint(lookup_constraint);
        let lhs_denom = std::math::fp2::sub_ext(beta, std::protocols::fingerprint::fingerprint(lhs, alpha));
        let rhs_denom = std::math::fp2::sub_ext(beta, std::protocols::fingerprint::fingerprint(rhs, alpha));
        let m_ext = std::math::fp2::from_base(multiplicities);
        let res = std::math::fp2::add_ext(std::math::fp2::eval_ext(acc), std::math::fp2::sub_ext(std::math::fp2::mul_ext(std::math::fp2::inv_ext(std::math::fp2::eval_ext(lhs_denom)), std::math::fp2::eval_ext(std::math::fp2::from_base(lhs_selector))), std::math::fp2::mul_ext(std::math::fp2::mul_ext(std::math::fp2::eval_ext(m_ext), std::math::fp2::inv_ext(std::math::fp2::eval_ext(rhs_denom))), std::math::fp2::eval_ext(std::math::fp2::from_base(rhs_selector)))));
        std::math::fp2::unpack_ext_array(res)
    };
    let lookup: expr, expr[], std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr, expr -> std::prelude::Constr[] = |is_first, acc, alpha, beta, lookup_constraint, multiplicities| {
        let (lhs_selector, lhs, rhs_selector, rhs) = std::protocols::lookup::unpack_lookup_constraint(lookup_constraint);
        let lhs_denom = std::math::fp2::sub_ext(beta, std::protocols::fingerprint::fingerprint(lhs, alpha));
        let rhs_denom = std::math::fp2::sub_ext(beta, std::protocols::fingerprint::fingerprint(rhs, alpha));
        let m_ext = std::math::fp2::from_base(multiplicities);
        let acc_ext = std::math::fp2::fp2_from_array(acc);
        let next_acc = std::math::fp2::next_ext(acc_ext);
        let update_expr = std::math::fp2::sub_ext(std::math::fp2::add_ext(std::math::fp2::mul_ext(std::math::fp2::mul_ext(lhs_denom, rhs_denom), std::math::fp2::sub_ext(next_acc, acc_ext)), std::math::fp2::mul_ext(std::math::fp2::mul_ext(m_ext, std::math::fp2::from_base(rhs_selector)), lhs_denom)), std::math::fp2::mul_ext(std::math::fp2::from_base(lhs_selector), rhs_denom));
        let (acc_1, acc_2) = std::math::fp2::unpack_ext(acc_ext);
        [is_first * acc_1 = 0, is_first * acc_2 = 0] + std::math::fp2::constrain_eq_ext(update_expr, std::math::fp2::from_base(0))
    };
    let unpack_lookup_constraint: std::prelude::Constr -> (expr, expr[], expr, expr[]) = |lookup_constraint| match lookup_constraint {
        std::prelude::Constr::Lookup((lhs_selector, rhs_selector), values) => (std::utils::unwrap_or_else(lhs_selector, || 1), std::array::map(values, |(lhs, _)| lhs), std::utils::unwrap_or_else(rhs_selector, || 1), std::array::map(values, |(_, rhs)| rhs)),
        _ => std::check::panic("Expected lookup constraint"),
    };
namespace std::protocols::lookup_via_bus;
    let compute_next_z_receive_lookup: expr, expr, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr, expr -> fe[] = query |is_first, id, acc, alpha, beta, lookup_constraint, multiplicities| {
        let (lhs_selector, lhs, rhs_selector, rhs) = std::protocols::lookup::unpack_lookup_constraint(lookup_constraint);
        std::protocols::bus::compute_next_z_receive(is_first, id, rhs, rhs_selector * multiplicities, acc, alpha, beta)
    };
    let compute_next_z_send_lookup: expr, expr, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr -> fe[] = query |is_first, id, acc, alpha, beta, lookup_constraint| {
        let (lhs_selector, lhs, rhs_selector, rhs) = std::protocols::lookup::unpack_lookup_constraint(lookup_constraint);
        std::protocols::bus::compute_next_z_send(is_first, id, lhs, lhs_selector, acc, alpha, beta)
    };
    let lookup: expr, expr, expr[], expr[], std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr, expr -> std::prelude::Constr[] = |is_first, id, acc_lhs, acc_rhs, alpha, beta, lookup_constraint, multiplicities| {
        let (lhs_selector, lhs, rhs_selector, rhs) = std::protocols::lookup::unpack_lookup_constraint(lookup_constraint);
        std::protocols::bus::bus_send(is_first, id, lhs, lhs_selector, acc_lhs, alpha, beta) + std::protocols::bus::bus_receive(is_first, id, rhs, rhs_selector * multiplicities, acc_rhs, alpha, beta)
    };
namespace std::protocols::permutation;
    let compute_next_z: std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr -> fe[] = query |acc, alpha, beta, permutation_constraint| {
        let (lhs_selector, lhs, rhs_selector, rhs) = std::protocols::permutation::unpack_permutation_constraint(permutation_constraint);
        let lhs_folded = std::protocols::permutation::selected_or_one(lhs_selector, std::math::fp2::sub_ext(beta, std::protocols::fingerprint::fingerprint(lhs, alpha)));
        let rhs_folded = std::protocols::permutation::selected_or_one(rhs_selector, std::math::fp2::sub_ext(beta, std::protocols::fingerprint::fingerprint(rhs, alpha)));
        let res = std::math::fp2::mul_ext(std::math::fp2::eval_ext(std::math::fp2::mul_ext(acc, lhs_folded)), std::math::fp2::inv_ext(std::math::fp2::eval_ext(rhs_folded)));
        std::math::fp2::unpack_ext_array(res)
    };
    let permutation: expr, expr[], std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr -> std::prelude::Constr[] = |is_first, acc, alpha, beta, permutation_constraint| {
        let (lhs_selector, lhs, rhs_selector, rhs) = std::protocols::permutation::unpack_permutation_constraint(permutation_constraint);
        let lhs_folded = std::protocols::permutation::selected_or_one(lhs_selector, std::math::fp2::sub_ext(beta, std::protocols::fingerprint::fingerprint(lhs, alpha)));
        let rhs_folded = std::protocols::permutation::selected_or_one(rhs_selector, std::math::fp2::sub_ext(beta, std::protocols::fingerprint::fingerprint(rhs, alpha)));
        let acc_ext = std::math::fp2::fp2_from_array(acc);
        let next_acc = std::math::fp2::next_ext(acc_ext);
        let update_expr = std::math::fp2::sub_ext(std::math::fp2::mul_ext(rhs_folded, next_acc), std::math::fp2::mul_ext(lhs_folded, acc_ext));
        let (acc_1, acc_2) = std::math::fp2::unpack_ext(acc_ext);
        [is_first * (acc_1 - 1) = 0, is_first * acc_2 = 0] + std::math::fp2::constrain_eq_ext(update_expr, std::math::fp2::from_base(0))
    };
    let<T: Add + FromLiteral + Mul + Sub> selected_or_one: T, std::math::fp2::Fp2<T> -> std::math::fp2::Fp2<T> = |selector, value| std::math::fp2::add_ext(std::math::fp2::mul_ext(std::math::fp2::from_base(selector), std::math::fp2::sub_ext(value, std::math::fp2::from_base(1))), std::math::fp2::from_base(1));
    let unpack_permutation_constraint: std::prelude::Constr -> (expr, expr[], expr, expr[]) = |permutation_constraint| match permutation_constraint {
        std::prelude::Constr::Permutation((lhs_selector, rhs_selector), values) => (std::utils::unwrap_or_else(lhs_selector, || 1), std::array::map(values, |(lhs, _)| lhs), std::utils::unwrap_or_else(rhs_selector, || 1), std::array::map(values, |(_, rhs)| rhs)),
        _ => std::check::panic("Expected permutation constraint"),
    };
namespace std::protocols::permutation_via_bus;
    let compute_next_z_receive_permutation: expr, expr, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr -> fe[] = query |is_first, id, acc, alpha, beta, permutation_constraint| {
        let (lhs_selector, lhs, rhs_selector, rhs) = std::protocols::permutation::unpack_permutation_constraint(permutation_constraint);
        std::protocols::bus::compute_next_z_receive(is_first, id, rhs, rhs_selector, acc, alpha, beta)
    };
    let compute_next_z_send_permutation: expr, expr, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr -> fe[] = query |is_first, id, acc, alpha, beta, permutation_constraint| {
        let (lhs_selector, lhs, rhs_selector, rhs) = std::protocols::permutation::unpack_permutation_constraint(permutation_constraint);
        std::protocols::bus::compute_next_z_send(is_first, id, lhs, lhs_selector, acc, alpha, beta)
    };
    let permutation: expr, expr, expr[], expr[], std::math::fp2::Fp2<expr>, std::math::fp2::Fp2<expr>, std::prelude::Constr -> std::prelude::Constr[] = |is_first, id, acc_lhs, acc_rhs, alpha, beta, permutation_constraint| {
        let (lhs_selector, lhs, rhs_selector, rhs) = std::protocols::permutation::unpack_permutation_constraint(permutation_constraint);
        std::protocols::bus::bus_send(is_first, id, lhs, lhs_selector, acc_lhs, alpha, beta) + std::protocols::bus::bus_receive(is_first, id, rhs, rhs_selector, acc_rhs, alpha, beta)
    };
namespace std::prover;
    let challenge: int, int -> expr = constr |st, id| std::prelude::challenge(st, id);
    let degree: -> int = [];
    let eval: expr -> fe = [];
    let max_degree: -> int = [];
    let min_degree: -> int = [];
    let provide_value: expr, int, fe -> () = [];
    let require_max_degree: int -> () = |m| std::check::assert(std::prover::degree() <= m, || "Degree too large.");
    let require_min_degree: int -> () = |m| std::check::assert(std::prover::degree() >= m, || "Degree too small.");
    let try_eval: expr -> std::prelude::Option<fe> = [];
namespace std::utils;
    let cross_product: int[] -> (int -> int)[] = |sizes| std::utils::cross_product_internal(1, 0, sizes);
    let cross_product_internal: int, int, int[] -> (int -> int)[] = |cycle_len, pos, sizes| if pos >= std::array::len(sizes) { [] } else { [|i| i / cycle_len % sizes[pos]] + std::utils::cross_product_internal(cycle_len * sizes[pos], pos + 1, sizes) };
    let<T1, T2> fold: int, (int -> T1), T2, (T2, T1 -> T2) -> T2 = |length, f, initial, folder| if length <= 0 { initial } else { folder(std::utils::fold(length - 1, f, initial, folder), f(length - 1)) };
    let force_bool: expr -> std::prelude::Constr = |c| c * (1 - c) = 0;
    let is_zero: expr -> expr = constr |x| {
        let x_is_zero;
        std::utils::force_bool(x_is_zero);
        let x_inv;
        x_is_zero = 1 - x * x_inv;
        x_is_zero * x = 0;
        x_is_zero
    };
    let<T: Ord> max: T, T -> T = |a, b| if a < b { b } else { a };
    let<T: Ord> min: T, T -> T = |a, b| if a < b { a } else { b };
    let new_bool: -> expr = constr || {
        let x;
        std::utils::force_bool(x);
        x
    };
    let<T: Add + FromLiteral> sum: int, (int -> T) -> T = |length, f| std::utils::fold(length, f, 0, |acc, e| acc + e);
    let unchanged_until: expr, expr -> std::prelude::Constr = |c, latch| (c' - c) * (1 - latch) = 0;
    let<T> unwrap_or_else: std::prelude::Option<T>, (-> T) -> T = |o, f| match o {
        std::prelude::Option::None => f(),
        std::prelude::Option::Some(x) => x,
    };
namespace std::well_known;
    let is_first: int -> int = |i| if i == 0 { 1 } else { 0 };
namespace main(32);
    std::array::map(preimage, |i| first_step * i = 0);
    pol commit operation_id;
    let NUM_ROUNDS: int = 24;
    pol commit export;
    pol commit preimage[5 * 5 * 4];
    pol commit a[5 * 5 * 4];
    pol commit c[5 * 64];
    pol commit c_prime[5 * 64];
    pol commit a_prime[5 * 5 * 64];
    pol commit a_prime_prime[5 * 5 * 4];
    pol commit a_prime_prime_0_0_bits[64];
    pol commit a_prime_prime_prime_0_0_limbs[4];
    let step_flags: col[NUM_ROUNDS] = std::array::new(NUM_ROUNDS, |i| (|row| if row % NUM_ROUNDS == i { 1 } else { 0 }));
    let first_step: expr = step_flags[0];
    let final_step: expr = step_flags[NUM_ROUNDS - 1];
    let not_final_step = 1 - final_step;
    std::array::zip(preimage, a, |p_i, a_i| first_step * (p_i - a_i) = 0);
    std::utils::force_bool(export);
    not_final_step * export = 0;
    std::array::new(100, |i| not_final_step * (preimage[i] - preimage[i]') = 0);
    std::array::map(c, |i| std::utils::force_bool(i));
    let xor: expr, expr -> expr = |a, b| a + b - 2 * a * b;
    let xor3: expr, expr, expr -> expr = |a, b, c| a + b + c - 2 * (a * b + b * c + c * a) + 4 * a * b * c;
    std::array::new(320, |i| {
        let x = i / 64;
        let z = i % 64;
        xor3(c[i], c[(x + 4) % 5 * 64 + z], c[(x + 1) % 5 * 64 + (z + 63) % 64]) - c_prime[i] = 0
    });
    std::array::map(a_prime, |i| std::utils::force_bool(i));
    std::array::new(100, |i| {
        let y = i / 20;
        let x = i / 4 % 5;
        let limb = i % 4;
        let get_bit: int -> expr = |z| xor3(a_prime[y * 320 + x * 64 + z], c[x * 64 + z], c_prime[x * 64 + z]);
        let computed_limb: expr = std::utils::fold(16, |z| get_bit((limb + 1) * 16 - 1 - z), 0, |acc, e| acc * 2 + e);
        computed_limb - a[i] = 0
    });
    std::array::new(320, |i| {
        let x = i / 64;
        let z = i % 64;
        let sum = std::utils::sum(5, |y| a_prime[y * 320 + i]);
        let diff = sum - c_prime[i];
        diff * (diff - 2) * (diff - 4) = 0
    });
    let andn: expr, expr -> expr = |a, b| (1 - a) * b;
    std::array::new(100, |i| {
        let y = i / 20;
        let x = i / 4 % 5;
        let limb = i % 4;
        let get_bit: int -> expr = |z| { xor(b(x, y, z), andn(b((x + 1) % 5, y, z), b((x + 2) % 5, y, z))) };
        let computed_limb: expr = std::utils::fold(16, |z| get_bit((limb + 1) * 16 - 1 - z), 0, |acc, e| acc * 2 + e);
        computed_limb - a_prime_prime[i] = 0
    });
    let b: int, int, int -> expr = |x, y, z| {
        let a: int = (x + 3 * y) % 5;
        let rot: int = R[a * 5 + x];
        a_prime[x * 320 + a * 64 + (z + 64 - rot) % 64]
    };
    std::array::map(a_prime_prime_0_0_bits, |i| std::utils::force_bool(i));
    std::array::new(4, |limb| {
        let computed_a_prime_prime_0_0_limb = std::utils::fold(16, |z| a_prime_prime_0_0_bits[(limb + 1) * 16 - 1 - z], 0, |acc, e| acc * 2 + e);
        computed_a_prime_prime_0_0_limb - a_prime_prime[limb] = 0
    });
    let get_xored_bit: int -> expr = |i| xor(a_prime_prime_0_0_bits[i], std::utils::sum(NUM_ROUNDS, |r| std::convert::expr(RC_BITS[r * 64 + i]) * step_flags[r]));
    std::array::new(4, |limb| {
        let computed_a_prime_prime_prime_0_0_limb = std::utils::fold(16, |z| get_xored_bit((limb + 1) * 16 - 1 - z), 0, |acc, e| acc * 2 + e);
        computed_a_prime_prime_prime_0_0_limb - a_prime_prime_prime_0_0_limbs[limb] = 0
    });
    std::array::new(100, |i| {
        let x = i / 20;
        let y = i / 4 % 5;
        let limb = i % 4;
        not_final_step * (a_prime_prime_prime(y, x, limb) - a[i]') = 0
    });
    let a_prime_prime_prime: int, int, int -> expr = |y, x, limb| if y == 0 && x == 0 { a_prime_prime_prime_0_0_limbs[limb] } else { a_prime_prime[y * 20 + x * 4 + limb] };
    let R: int[] = [0, 36, 3, 41, 18, 1, 44, 10, 45, 2, 62, 6, 43, 15, 61, 28, 55, 25, 21, 56, 27, 20, 39, 8, 14];
    let RC: int[] = [1, 32898, 9223372036854808714, 9223372039002292224, 32907, 2147483649, 9223372039002292353, 9223372036854808585, 138, 136, 2147516425, 2147483658, 2147516555, 9223372036854775947, 9223372036854808713, 9223372036854808579, 9223372036854808578, 9223372036854775936, 32778, 9223372039002259466, 9223372039002292353, 9223372036854808704, 2147483649, 9223372039002292232];
    let RC_BITS: int[] = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];
    let input_limb: int -> expr = |i| preimage[i];
    let output_limb: int -> expr = |i| {
        let y = i / 20;
        let x = i / 4 % 5;
        let limb = i % 4;
        a_prime_prime_prime(y, x, limb)
    };
    let query_c: int, int, int -> int = query |x, limb, bit_in_limb| std::utils::fold(5, |y| std::convert::int(std::prover::eval(a[y * 20 + x * 4 + limb])) >> bit_in_limb & 1, 0, |acc, e| acc ^ e);
    query |row| {
        let _ = std::array::new(320, |i| {
            let x = i / 64;
            let z = i % 64;
            let limb = z / 16;
            let bit_in_limb = z % 16;
            std::prover::provide_value(c[i], row, std::convert::fe(query_c(x, limb, bit_in_limb)));
        });
    };
    let query_c_prime: int, int -> int = query |x, z| std::convert::int(std::prover::eval(c[x * 64 + z])) ^ std::convert::int(std::prover::eval(c[(x + 4) % 5 * 64 + z])) ^ std::convert::int(std::prover::eval(c[(x + 1) % 5 * 64 + (z + 63) % 64]));
    query |row| {
        let _ = std::array::new(320, |i| {
            let x = i / 64;
            let z = i % 64;
            std::prover::provide_value(c_prime[i], row, std::convert::fe(query_c_prime(x, z)));
        });
    };
    let query_a_prime: int, int, int, int, int -> int = query |x, y, z, limb, bit_in_limb| std::convert::int(std::prover::eval(a[y * 20 + x * 4 + limb])) >> bit_in_limb & 1 ^ std::convert::int(std::prover::eval(c[x * 64 + z])) ^ std::convert::int(std::prover::eval(c_prime[x * 64 + z]));
    query |row| {
        let _ = std::array::new(1600, |i| {
            let y = i / 320;
            let x = i / 64 % 5;
            let z = i % 64;
            let limb = z / 16;
            let bit_in_limb = z % 16;
            std::prover::provide_value(a_prime[i], row, std::convert::fe(query_a_prime(x, y, z, limb, bit_in_limb)));
        });
    };
    let query_a_prime_prime: int, int, int -> int = query |x, y, limb| std::utils::fold(16, |z| std::convert::int(std::prover::eval(b(x, y, (limb + 1) * 16 - 1 - z))) ^ std::convert::int(std::prover::eval(andn(b((x + 1) % 5, y, (limb + 1) * 16 - 1 - z), b((x + 2) % 5, y, (limb + 1) * 16 - 1 - z)))), 0, |acc, e| acc * 2 + e);
    query |row| {
        let _ = std::array::new(100, |i| {
            let y = i / 20;
            let x = i / 4 % 5;
            let limb = i % 4;
            std::prover::provide_value(a_prime_prime[i], row, std::convert::fe(query_a_prime_prime(x, y, limb)));
        });
    };
    let query_a_prime_prime_0_0_bits: int, int -> int = query |limb, bit_in_limb| std::convert::int(std::prover::eval(a_prime_prime[limb])) >> bit_in_limb & 1;
    query |row| {
        let _ = std::array::new(64, |i| {
            let limb = i / 16;
            let bit_in_limb = i % 16;
            std::prover::provide_value(a_prime_prime_0_0_bits[i], row, std::convert::fe(query_a_prime_prime_0_0_bits(limb, bit_in_limb)));
        });
    };
    let query_a_prime_prime_prime_0_0_limbs: int -> int = query |limb| std::convert::int(std::prover::eval(a_prime_prime[limb])) ^ std::convert::int(std::prover::eval(std::utils::sum(NUM_ROUNDS, |r| std::convert::expr(RC[r]) * step_flags[r]))) >> limb * 16 & 65535;
    query |row| {
        let _ = std::array::new(4, |limb| {
            std::prover::provide_value(a_prime_prime_prime_0_0_limbs[limb], row, std::convert::fe(query_a_prime_prime_prime_0_0_limbs(limb)));
        });
    };
    pol commit sel[0];
    std::array::map(sel, std::utils::force_bool);
