<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="182" onload="init(evt)" viewBox="0 0 1200 182" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="182" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="165.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="165.00"> </text><svg id="frames" x="10" width="1180" total_samples="17580066"><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (18,768 samples, 0.11%)</title><rect x="0.0912%" y="53" width="0.1068%" height="15" fill="rgb(227,0,7)" fg:x="16026" fg:w="18768"/><text x="0.3412%" y="63.50"></text></g><g><title>k256::arithmetic::field::FieldElement::square::hf795919592da1a50 (181,305 samples, 1.03%)</title><rect x="0.1979%" y="53" width="1.0313%" height="15" fill="rgb(217,0,24)" fg:x="34794" fg:w="181305"/><text x="0.4479%" y="63.50"></text></g><g><title>k256::arithmetic::field::field_10x26::FieldElement10x26::mul::he143c14f609709fd (15,690 samples, 0.09%)</title><rect x="1.2292%" y="53" width="0.0892%" height="15" fill="rgb(221,193,54)" fg:x="216099" fg:w="15690"/><text x="1.4792%" y="63.50"></text></g><g><title>k256::arithmetic::field::FieldElement::invert::hb5df490e18b89fd1 (218,422 samples, 1.24%)</title><rect x="0.0777%" y="69" width="1.2424%" height="15" fill="rgb(248,212,6)" fg:x="13667" fg:w="218422"/><text x="0.3277%" y="79.50"></text></g><g><title>k256::arithmetic::field::field_10x26::FieldElement10x26::mul::he143c14f609709fd (2,092 samples, 0.01%)</title><rect x="1.3202%" y="69" width="0.0119%" height="15" fill="rgb(208,68,35)" fg:x="232089" fg:w="2092"/><text x="1.5702%" y="79.50"></text></g><g><title>_ZN4k25610arithmetic10projective144_$LT$impl$u20$core_dot__dot_convert_dot__dot_From$LT$$RF$k256_dot__dot_arithmetic_dot__dot_projective_dot__dot_ProjectivePoint$GT$$u20$for$u20$k256_dot__dot_arithmetic_dot__dot_affine_dot__dot_AffinePoint$GT$4from17h136615602926b805E (221,314 samples, 1.26%)</title><rect x="0.0755%" y="101" width="1.2589%" height="15" fill="rgb(232,128,0)" fg:x="13276" fg:w="221314"/><text x="0.3255%" y="111.50"></text></g><g><title>k256::arithmetic::projective::ProjectivePoint::to_affine::ha5d8e8f02167e153 (221,308 samples, 1.26%)</title><rect x="0.0756%" y="85" width="1.2589%" height="15" fill="rgb(207,160,47)" fg:x="13282" fg:w="221308"/><text x="0.3256%" y="95.50"></text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (7,939 samples, 0.05%)</title><rect x="1.3352%" y="85" width="0.0452%" height="15" fill="rgb(228,23,34)" fg:x="234729" fg:w="7939"/><text x="1.5852%" y="95.50"></text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (50,230 samples, 0.29%)</title><rect x="1.4064%" y="69" width="0.2857%" height="15" fill="rgb(218,30,26)" fg:x="247250" fg:w="50230"/><text x="1.6564%" y="79.50"></text></g><g><title>_ZN97_$LT$k256_dot__dot_arithmetic_dot__dot_projective_dot__dot_ProjectivePoint$u20$as$u20$subtle_dot__dot_ConditionallySelectable$GT$18conditional_select17h0819e1315c7fc935E (133,650 samples, 0.76%)</title><rect x="1.7927%" y="53" width="0.7602%" height="15" fill="rgb(220,122,19)" fg:x="315158" fg:w="133650"/><text x="2.0427%" y="63.50"></text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (120,648 samples, 0.69%)</title><rect x="2.5529%" y="53" width="0.6863%" height="15" fill="rgb(250,228,42)" fg:x="448808" fg:w="120648"/><text x="2.8029%" y="63.50"></text></g><g><title>k256::arithmetic::mul::LookupTable::select::h1868eb34e15f6592 (280,038 samples, 1.59%)</title><rect x="1.6981%" y="69" width="1.5929%" height="15" fill="rgb(240,193,28)" fg:x="298526" fg:w="280038"/><text x="1.9481%" y="79.50"></text></g><g><title>subtle::black_box::h7893a9e72daaa4ec (8,316 samples, 0.05%)</title><rect x="3.2437%" y="53" width="0.0473%" height="15" fill="rgb(216,20,37)" fg:x="570248" fg:w="8316"/><text x="3.4937%" y="63.50"></text></g><g><title>k256::arithmetic::mul::Radix16Decomposition&lt;_&gt;::new::h605e9ff30906d0ae (3,118 samples, 0.02%)</title><rect x="3.2910%" y="69" width="0.0177%" height="15" fill="rgb(206,188,39)" fg:x="578564" fg:w="3118"/><text x="3.5410%" y="79.50"></text></g><g><title>k256::arithmetic::projective::ProjectivePoint::add::h9f157c03a4c43564 (1,114,480 samples, 6.34%)</title><rect x="3.3088%" y="69" width="6.3395%" height="15" fill="rgb(217,207,13)" fg:x="581682" fg:w="1114480"/><text x="3.5588%" y="79.50">k256::ar..</text></g><g><title>k256::arithmetic::field::field_10x26::FieldElement10x26::mul::he143c14f609709fd (1,004,160 samples, 5.71%)</title><rect x="3.9363%" y="53" width="5.7119%" height="15" fill="rgb(231,73,38)" fg:x="692002" fg:w="1004160"/><text x="4.1863%" y="63.50">k256::a..</text></g><g><title>k256::arithmetic::field::FieldElement::square::hf795919592da1a50 (182,016 samples, 1.04%)</title><rect x="10.0443%" y="53" width="1.0354%" height="15" fill="rgb(225,20,46)" fg:x="1765794" fg:w="182016"/><text x="10.2943%" y="63.50"></text></g><g><title>k256::arithmetic::projective::ProjectivePoint::double::hd01d83eb498f4b57 (1,054,976 samples, 6.00%)</title><rect x="9.6482%" y="69" width="6.0010%" height="15" fill="rgb(210,31,41)" fg:x="1696162" fg:w="1054976"/><text x="9.8982%" y="79.50">k256::ar..</text></g><g><title>k256::arithmetic::field::field_10x26::FieldElement10x26::mul::he143c14f609709fd (803,328 samples, 4.57%)</title><rect x="11.0797%" y="53" width="4.5695%" height="15" fill="rgb(221,200,47)" fg:x="1947810" fg:w="803328"/><text x="11.3297%" y="63.50">k256:..</text></g><g><title>k256::arithmetic::scalar::Scalar::mul::h17e933d8c974605a (3,762 samples, 0.02%)</title><rect x="15.6517%" y="69" width="0.0214%" height="15" fill="rgb(226,26,5)" fg:x="2751576" fg:w="3762"/><text x="15.9017%" y="79.50"></text></g><g><title>k256::arithmetic::scalar::wide::WideScalar::reduce_impl::h60d1fdfb7127c16f (2,088 samples, 0.01%)</title><rect x="15.6612%" y="53" width="0.0119%" height="15" fill="rgb(249,33,26)" fg:x="2753250" fg:w="2088"/><text x="15.9112%" y="63.50"></text></g><g><title>k256::arithmetic::mul::lincomb::hf3794a72a6c89d20 (2,514,525 samples, 14.30%)</title><rect x="1.3809%" y="85" width="14.3033%" height="15" fill="rgb(235,183,28)" fg:x="242755" fg:w="2514525"/><text x="1.6309%" y="95.50">k256::arithmetic::mul:..</text></g><g><title>_ZN4k25610arithmetic3mul111_$LT$impl$u20$elliptic_curve_dot__dot_ops_dot__dot_MulByGenerator$u20$for$u20$k256_dot__dot_arithmetic_dot__dot_projective_dot__dot_ProjectivePoint$GT$16mul_by_generator17h58d7f2e86bc96aabE (2,522,712 samples, 14.35%)</title><rect x="1.3344%" y="101" width="14.3498%" height="15" fill="rgb(221,5,38)" fg:x="234590" fg:w="2522712"/><text x="1.5844%" y="111.50">_ZN4k25610arithmetic3m..</text></g><g><title>_ZN80_$LT$k256_dot__dot_arithmetic_dot__dot_scalar_dot__dot_Scalar$u20$as$u20$elliptic_curve_dot__dot_ops_dot__dot_Invert$GT$14invert_vartime17hd4d6ea55166457b0E (408,266 samples, 2.32%)</title><rect x="15.7030%" y="85" width="2.3223%" height="15" fill="rgb(247,18,42)" fg:x="2760606" fg:w="408266"/><text x="15.9530%" y="95.50">_..</text></g><g><title>subtle::black_box::h7893a9e72daaa4ec (55,216 samples, 0.31%)</title><rect x="17.7113%" y="69" width="0.3141%" height="15" fill="rgb(241,131,45)" fg:x="3113656" fg:w="55216"/><text x="17.9613%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (21,886 samples, 0.12%)</title><rect x="18.0279%" y="85" width="0.1245%" height="15" fill="rgb(249,31,29)" fg:x="3169322" fg:w="21886"/><text x="18.2779%" y="95.50"></text></g><g><title>_ZN97_$LT$k256_dot__dot_arithmetic_dot__dot_projective_dot__dot_ProjectivePoint$u20$as$u20$subtle_dot__dot_ConditionallySelectable$GT$18conditional_select17h0819e1315c7fc935E (1,800 samples, 0.01%)</title><rect x="18.2303%" y="69" width="0.0102%" height="15" fill="rgb(225,111,53)" fg:x="3204890" fg:w="1800"/><text x="18.4803%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (160,612 samples, 0.91%)</title><rect x="18.2405%" y="69" width="0.9136%" height="15" fill="rgb(238,160,17)" fg:x="3206690" fg:w="160612"/><text x="18.4905%" y="79.50"></text></g><g><title>k256::arithmetic::field::field_10x26::FieldElement10x26::mul::he143c14f609709fd (4,184 samples, 0.02%)</title><rect x="19.1541%" y="69" width="0.0238%" height="15" fill="rgb(214,148,48)" fg:x="3367302" fg:w="4184"/><text x="19.4041%" y="79.50"></text></g><g><title>_ZN97_$LT$k256_dot__dot_arithmetic_dot__dot_projective_dot__dot_ProjectivePoint$u20$as$u20$subtle_dot__dot_ConditionallySelectable$GT$18conditional_select17h0819e1315c7fc935E (534,600 samples, 3.04%)</title><rect x="19.5563%" y="53" width="3.0409%" height="15" fill="rgb(232,36,49)" fg:x="3438014" fg:w="534600"/><text x="19.8063%" y="63.50">_ZN..</text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (482,592 samples, 2.75%)</title><rect x="22.5973%" y="53" width="2.7451%" height="15" fill="rgb(209,103,24)" fg:x="3972614" fg:w="482592"/><text x="22.8473%" y="63.50">co..</text></g><g><title>memcpy (3,168 samples, 0.02%)</title><rect x="25.3424%" y="53" width="0.0180%" height="15" fill="rgb(229,88,8)" fg:x="4455206" fg:w="3168"/><text x="25.5924%" y="63.50"></text></g><g><title>k256::arithmetic::mul::LookupTable::select::h1868eb34e15f6592 (1,120,152 samples, 6.37%)</title><rect x="19.1779%" y="69" width="6.3717%" height="15" fill="rgb(213,181,19)" fg:x="3371486" fg:w="1120152"/><text x="19.4279%" y="79.50">k256::ar..</text></g><g><title>subtle::black_box::h7893a9e72daaa4ec (33,264 samples, 0.19%)</title><rect x="25.3604%" y="53" width="0.1892%" height="15" fill="rgb(254,191,54)" fg:x="4458374" fg:w="33264"/><text x="25.6104%" y="63.50"></text></g><g><title>k256::arithmetic::mul::Radix16Decomposition&lt;_&gt;::new::h605e9ff30906d0ae (12,472 samples, 0.07%)</title><rect x="25.5496%" y="69" width="0.0709%" height="15" fill="rgb(241,83,37)" fg:x="4491638" fg:w="12472"/><text x="25.7996%" y="79.50"></text></g><g><title>k256::arithmetic::projective::ProjectivePoint::add::h9f157c03a4c43564 (4,457,920 samples, 25.36%)</title><rect x="25.6206%" y="69" width="25.3578%" height="15" fill="rgb(233,36,39)" fg:x="4504110" fg:w="4457920"/><text x="25.8706%" y="79.50">k256::arithmetic::projective::Projective..</text></g><g><title>k256::arithmetic::field::field_10x26::FieldElement10x26::mul::he143c14f609709fd (4,016,640 samples, 22.85%)</title><rect x="28.1307%" y="53" width="22.8477%" height="15" fill="rgb(226,3,54)" fg:x="4945390" fg:w="4016640"/><text x="28.3807%" y="63.50">k256::arithmetic::field::field_10x26..</text></g><g><title>k256::arithmetic::field::FieldElement::square::hf795919592da1a50 (364,032 samples, 2.07%)</title><rect x="51.7705%" y="53" width="2.0707%" height="15" fill="rgb(245,192,40)" fg:x="9101294" fg:w="364032"/><text x="52.0205%" y="63.50">k..</text></g><g><title>k256::arithmetic::projective::ProjectivePoint::double::hd01d83eb498f4b57 (2,109,952 samples, 12.00%)</title><rect x="50.9784%" y="69" width="12.0020%" height="15" fill="rgb(238,167,29)" fg:x="8962030" fg:w="2109952"/><text x="51.2284%" y="79.50">k256::arithmetic::..</text></g><g><title>k256::arithmetic::field::field_10x26::FieldElement10x26::mul::he143c14f609709fd (1,606,656 samples, 9.14%)</title><rect x="53.8412%" y="53" width="9.1391%" height="15" fill="rgb(232,182,51)" fg:x="9465326" fg:w="1606656"/><text x="54.0912%" y="63.50">k256::arithme..</text></g><g><title>k256::arithmetic::scalar::Scalar::mul::h17e933d8c974605a (15,048 samples, 0.09%)</title><rect x="62.9903%" y="69" width="0.0856%" height="15" fill="rgb(231,60,39)" fg:x="11073734" fg:w="15048"/><text x="63.2403%" y="79.50"></text></g><g><title>k256::arithmetic::scalar::wide::WideScalar::reduce_impl::h60d1fdfb7127c16f (8,352 samples, 0.05%)</title><rect x="63.0284%" y="53" width="0.0475%" height="15" fill="rgb(208,69,12)" fg:x="11080430" fg:w="8352"/><text x="63.2784%" y="63.50"></text></g><g><title>k256::arithmetic::scalar::wide::WideScalar::mul_shift_vartime::hdaea4f39ddc4ad4a (6,448 samples, 0.04%)</title><rect x="63.0759%" y="69" width="0.0367%" height="15" fill="rgb(235,93,37)" fg:x="11088782" fg:w="6448"/><text x="63.3259%" y="79.50"></text></g><g><title>k256::arithmetic::mul::lincomb::hf3794a72a6c89d20 (7,904,438 samples, 44.96%)</title><rect x="18.1561%" y="85" width="44.9625%" height="15" fill="rgb(213,116,39)" fg:x="3191852" fg:w="7904438"/><text x="18.4061%" y="95.50">k256::arithmetic::mul::lincomb::hf3794a72a6c89d20</text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (37,536 samples, 0.21%)</title><rect x="63.1498%" y="53" width="0.2135%" height="15" fill="rgb(222,207,29)" fg:x="11101778" fg:w="37536"/><text x="63.3998%" y="63.50"></text></g><g><title>k256::arithmetic::field::FieldElement::square::hf795919592da1a50 (362,610 samples, 2.06%)</title><rect x="63.3633%" y="53" width="2.0626%" height="15" fill="rgb(206,96,30)" fg:x="11139314" fg:w="362610"/><text x="63.6133%" y="63.50">k..</text></g><g><title>k256::arithmetic::field::field_10x26::FieldElement10x26::mul::he143c14f609709fd (31,380 samples, 0.18%)</title><rect x="65.4259%" y="53" width="0.1785%" height="15" fill="rgb(218,138,4)" fg:x="11501924" fg:w="31380"/><text x="65.6759%" y="63.50"></text></g><g><title>k256::arithmetic::field::FieldElement::invert::hb5df490e18b89fd1 (436,844 samples, 2.48%)</title><rect x="63.1230%" y="69" width="2.4849%" height="15" fill="rgb(250,191,14)" fg:x="11097060" fg:w="436844"/><text x="63.3730%" y="79.50">k2..</text></g><g><title>k256::arithmetic::field::field_10x26::FieldElement10x26::mul::he143c14f609709fd (4,184 samples, 0.02%)</title><rect x="65.6079%" y="69" width="0.0238%" height="15" fill="rgb(239,60,40)" fg:x="11533904" fg:w="4184"/><text x="65.8579%" y="79.50"></text></g><g><title>k256::arithmetic::projective::ProjectivePoint::to_affine::ha5d8e8f02167e153 (442,616 samples, 2.52%)</title><rect x="63.1186%" y="85" width="2.5177%" height="15" fill="rgb(206,27,48)" fg:x="11096290" fg:w="442616"/><text x="63.3686%" y="95.50">k2..</text></g><g><title>k256::arithmetic::scalar::Scalar::mul::h17e933d8c974605a (5,016 samples, 0.03%)</title><rect x="65.6363%" y="85" width="0.0285%" height="15" fill="rgb(225,35,8)" fg:x="11538906" fg:w="5016"/><text x="65.8863%" y="95.50"></text></g><g><title>k256::arithmetic::scalar::wide::WideScalar::reduce_impl::h60d1fdfb7127c16f (2,784 samples, 0.02%)</title><rect x="65.6490%" y="69" width="0.0158%" height="15" fill="rgb(250,213,24)" fg:x="11541138" fg:w="2784"/><text x="65.8990%" y="79.50"></text></g><g><title>_ZN4k2565ecdsa121_$LT$impl$u20$ecdsa_dot__dot_hazmat_dot__dot_VerifyPrimitive$LT$k256_dot__dot_Secp256k1$GT$$u20$for$u20$k256_dot__dot_arithmetic_dot__dot_affine_dot__dot_AffinePoint$GT$16verify_prehashed17hf26b4f31283dfa84E (8,785,852 samples, 49.98%)</title><rect x="15.6910%" y="101" width="49.9762%" height="15" fill="rgb(247,123,22)" fg:x="2758490" fg:w="8785852"/><text x="15.9410%" y="111.50">_ZN4k2565ecdsa121_$LT$impl$u20$ecdsa_dot__dot_hazmat_dot__dot_VerifyPrimitive$LT$k..</text></g><g><title>k256::arithmetic::scalar::Scalar::mul::h17e933d8c974605a (363,660 samples, 2.07%)</title><rect x="65.6989%" y="69" width="2.0686%" height="15" fill="rgb(231,138,38)" fg:x="11549918" fg:w="363660"/><text x="65.9489%" y="79.50">k..</text></g><g><title>k256::arithmetic::scalar::wide::WideScalar::reduce_impl::h60d1fdfb7127c16f (201,840 samples, 1.15%)</title><rect x="66.6194%" y="53" width="1.1481%" height="15" fill="rgb(231,145,46)" fg:x="11711738" fg:w="201840"/><text x="66.8694%" y="63.50"></text></g><g><title>subtle::black_box::h7893a9e72daaa4ec (16,240 samples, 0.09%)</title><rect x="67.6752%" y="37" width="0.0924%" height="15" fill="rgb(251,118,11)" fg:x="11897338" fg:w="16240"/><text x="67.9252%" y="47.50"></text></g><g><title>_ZN62_$LT$k256_dot__dot_arithmetic_dot__dot_scalar_dot__dot_Scalar$u20$as$u20$ff_dot__dot_Field$GT$6invert17h614538eb03a00664E (369,264 samples, 2.10%)</title><rect x="65.6672%" y="101" width="2.1005%" height="15" fill="rgb(217,147,25)" fg:x="11544342" fg:w="369264"/><text x="65.9172%" y="111.50">_..</text></g><g><title>k256::arithmetic::scalar::Scalar::invert::h7c7a27ca9595ae91 (369,258 samples, 2.10%)</title><rect x="65.6673%" y="85" width="2.1004%" height="15" fill="rgb(247,81,37)" fg:x="11544348" fg:w="369258"/><text x="65.9173%" y="95.50">k..</text></g><g><title>_ZN129_$LT$digest_dot__dot_core_api_dot__dot_ct_variable_dot__dot_CtVariableCoreWrapper$LT$T$C$OutSize$C$O$GT$$u20$as$u20$digest_dot__dot_core_api_dot__dot_FixedOutputCore$GT$19finalize_fixed_core17h2e88d500ee19f204E (25,165 samples, 0.14%)</title><rect x="67.7876%" y="85" width="0.1431%" height="15" fill="rgb(209,12,38)" fg:x="11917098" fg:w="25165"/><text x="68.0376%" y="95.50"></text></g><g><title>sha2::sha256::compress256::h430d9065f295ea76 (22,565 samples, 0.13%)</title><rect x="67.8024%" y="69" width="0.1284%" height="15" fill="rgb(227,1,9)" fg:x="11919698" fg:w="22565"/><text x="68.0524%" y="79.50"></text></g><g><title>_ZN78_$LT$hmac_dot__dot_simple_dot__dot_SimpleHmac$LT$D$GT$$u20$as$u20$digest_dot__dot_FixedOutputReset$GT$19finalize_into_reset17h87bfaca27f1e3eefE (96,320 samples, 0.55%)</title><rect x="67.7785%" y="101" width="0.5479%" height="15" fill="rgb(248,47,43)" fg:x="11915513" fg:w="96320"/><text x="68.0285%" y="111.50"></text></g><g><title>sha2::sha256::compress256::h430d9065f295ea76 (67,695 samples, 0.39%)</title><rect x="67.9414%" y="85" width="0.3851%" height="15" fill="rgb(221,10,30)" fg:x="11944138" fg:w="67695"/><text x="68.1914%" y="95.50"></text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (6,359 samples, 0.04%)</title><rect x="68.3342%" y="101" width="0.0362%" height="15" fill="rgb(210,229,1)" fg:x="12013205" fg:w="6359"/><text x="68.5842%" y="111.50"></text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (37,536 samples, 0.21%)</title><rect x="68.4095%" y="37" width="0.2135%" height="15" fill="rgb(222,148,37)" fg:x="12026428" fg:w="37536"/><text x="68.6595%" y="47.50"></text></g><g><title>k256::arithmetic::field::FieldElement::square::hf795919592da1a50 (362,610 samples, 2.06%)</title><rect x="68.6230%" y="37" width="2.0626%" height="15" fill="rgb(234,67,33)" fg:x="12063964" fg:w="362610"/><text x="68.8730%" y="47.50">k..</text></g><g><title>k256::arithmetic::field::field_10x26::FieldElement10x26::mul::he143c14f609709fd (31,380 samples, 0.18%)</title><rect x="70.6856%" y="37" width="0.1785%" height="15" fill="rgb(247,98,35)" fg:x="12426574" fg:w="31380"/><text x="70.9356%" y="47.50"></text></g><g><title>k256::arithmetic::field::FieldElement::invert::hb5df490e18b89fd1 (436,844 samples, 2.48%)</title><rect x="68.3826%" y="53" width="2.4849%" height="15" fill="rgb(247,138,52)" fg:x="12021710" fg:w="436844"/><text x="68.6326%" y="63.50">k2..</text></g><g><title>k256::arithmetic::field::field_10x26::FieldElement10x26::mul::he143c14f609709fd (4,184 samples, 0.02%)</title><rect x="70.8675%" y="53" width="0.0238%" height="15" fill="rgb(213,79,30)" fg:x="12458554" fg:w="4184"/><text x="71.1175%" y="63.50"></text></g><g><title>_ZN4k25610arithmetic10projective144_$LT$impl$u20$core_dot__dot_convert_dot__dot_From$LT$$RF$k256_dot__dot_arithmetic_dot__dot_projective_dot__dot_ProjectivePoint$GT$$u20$for$u20$k256_dot__dot_arithmetic_dot__dot_affine_dot__dot_AffinePoint$GT$4from17h136615602926b805E (442,628 samples, 2.52%)</title><rect x="68.3782%" y="85" width="2.5178%" height="15" fill="rgb(246,177,23)" fg:x="12020928" fg:w="442628"/><text x="68.6282%" y="95.50">_Z..</text></g><g><title>k256::arithmetic::projective::ProjectivePoint::to_affine::ha5d8e8f02167e153 (442,616 samples, 2.52%)</title><rect x="68.3782%" y="69" width="2.5177%" height="15" fill="rgb(230,62,27)" fg:x="12020940" fg:w="442616"/><text x="68.6282%" y="79.50">k2..</text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (15,878 samples, 0.09%)</title><rect x="70.8975%" y="69" width="0.0903%" height="15" fill="rgb(216,154,8)" fg:x="12463830" fg:w="15878"/><text x="71.1475%" y="79.50"></text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (100,460 samples, 0.57%)</title><rect x="71.0400%" y="53" width="0.5714%" height="15" fill="rgb(244,35,45)" fg:x="12488872" fg:w="100460"/><text x="71.2900%" y="63.50"></text></g><g><title>k256::arithmetic::field::field_10x26::FieldElement10x26::mul::he143c14f609709fd (2,092 samples, 0.01%)</title><rect x="71.6114%" y="53" width="0.0119%" height="15" fill="rgb(251,115,12)" fg:x="12589332" fg:w="2092"/><text x="71.8614%" y="63.50"></text></g><g><title>_ZN97_$LT$k256_dot__dot_arithmetic_dot__dot_projective_dot__dot_ProjectivePoint$u20$as$u20$subtle_dot__dot_ConditionallySelectable$GT$18conditional_select17h0819e1315c7fc935E (267,300 samples, 1.52%)</title><rect x="71.8125%" y="37" width="1.5205%" height="15" fill="rgb(240,54,50)" fg:x="12624688" fg:w="267300"/><text x="72.0625%" y="47.50"></text></g><g><title>compiler_builtins::mem::memcpy::h4f580c75a449fac1 (241,296 samples, 1.37%)</title><rect x="73.3330%" y="37" width="1.3726%" height="15" fill="rgb(233,84,52)" fg:x="12891988" fg:w="241296"/><text x="73.5830%" y="47.50"></text></g><g><title>k256::arithmetic::mul::LookupTable::select::h1868eb34e15f6592 (560,076 samples, 3.19%)</title><rect x="71.6233%" y="53" width="3.1859%" height="15" fill="rgb(207,117,47)" fg:x="12591424" fg:w="560076"/><text x="71.8733%" y="63.50">k25..</text></g><g><title>subtle::black_box::h7893a9e72daaa4ec (16,632 samples, 0.09%)</title><rect x="74.7146%" y="37" width="0.0946%" height="15" fill="rgb(249,43,39)" fg:x="13134868" fg:w="16632"/><text x="74.9646%" y="47.50"></text></g><g><title>k256::arithmetic::mul::Radix16Decomposition&lt;_&gt;::new::h605e9ff30906d0ae (6,236 samples, 0.04%)</title><rect x="74.8092%" y="53" width="0.0355%" height="15" fill="rgb(209,38,44)" fg:x="13151500" fg:w="6236"/><text x="75.0592%" y="63.50"></text></g><g><title>k256::arithmetic::projective::ProjectivePoint::add::h9f157c03a4c43564 (2,228,960 samples, 12.68%)</title><rect x="74.8446%" y="53" width="12.6789%" height="15" fill="rgb(236,212,23)" fg:x="13157736" fg:w="2228960"/><text x="75.0946%" y="63.50">k256::arithmetic::p..</text></g><g><title>k256::arithmetic::field::field_10x26::FieldElement10x26::mul::he143c14f609709fd (2,008,320 samples, 11.42%)</title><rect x="76.0997%" y="37" width="11.4238%" height="15" fill="rgb(242,79,21)" fg:x="13378376" fg:w="2008320"/><text x="76.3497%" y="47.50">k256::arithmetic:..</text></g><g><title>k256::arithmetic::field::FieldElement::square::hf795919592da1a50 (364,032 samples, 2.07%)</title><rect x="88.3157%" y="37" width="2.0707%" height="15" fill="rgb(211,96,35)" fg:x="15525960" fg:w="364032"/><text x="88.5657%" y="47.50">k..</text></g><g><title>k256::arithmetic::projective::ProjectivePoint::double::hd01d83eb498f4b57 (2,109,952 samples, 12.00%)</title><rect x="87.5235%" y="53" width="12.0020%" height="15" fill="rgb(253,215,40)" fg:x="15386696" fg:w="2109952"/><text x="87.7735%" y="63.50">k256::arithmetic::..</text></g><g><title>k256::arithmetic::field::field_10x26::FieldElement10x26::mul::he143c14f609709fd (1,606,656 samples, 9.14%)</title><rect x="90.3864%" y="37" width="9.1391%" height="15" fill="rgb(211,81,21)" fg:x="15889992" fg:w="1606656"/><text x="90.6364%" y="47.50">k256::arithme..</text></g><g><title>k256::arithmetic::scalar::Scalar::mul::h17e933d8c974605a (7,524 samples, 0.04%)</title><rect x="99.5305%" y="53" width="0.0428%" height="15" fill="rgb(208,190,38)" fg:x="17497524" fg:w="7524"/><text x="99.7805%" y="63.50"></text></g><g><title>k256::arithmetic::scalar::wide::WideScalar::reduce_impl::h60d1fdfb7127c16f (4,176 samples, 0.02%)</title><rect x="99.5495%" y="37" width="0.0238%" height="15" fill="rgb(235,213,38)" fg:x="17500872" fg:w="4176"/><text x="99.7995%" y="47.50"></text></g><g><title>k256::arithmetic::scalar::wide::WideScalar::mul_shift_vartime::hdaea4f39ddc4ad4a (3,224 samples, 0.02%)</title><rect x="99.5733%" y="53" width="0.0183%" height="15" fill="rgb(237,122,38)" fg:x="17505048" fg:w="3224"/><text x="99.8233%" y="63.50"></text></g><g><title>k256::arithmetic::mul::lincomb::hf3794a72a6c89d20 (5,029,050 samples, 28.61%)</title><rect x="70.9888%" y="69" width="28.6065%" height="15" fill="rgb(244,218,35)" fg:x="12479882" fg:w="5029050"/><text x="71.2388%" y="79.50">k256::arithmetic::mul::lincomb::hf3794a72a6c89..</text></g><g><title>_ZN4k25610arithmetic3mul141_$LT$impl$u20$core_dot__dot_ops_dot__dot_arith_dot__dot_Mul$LT$$RF$k256_dot__dot_arithmetic_dot__dot_scalar_dot__dot_Scalar$GT$$u20$for$u20$k256_dot__dot_arithmetic_dot__dot_projective_dot__dot_ProjectivePoint$GT$3mul17h8aa610fec9e59f2cE (5,045,420 samples, 28.70%)</title><rect x="70.8960%" y="85" width="28.6997%" height="15" fill="rgb(240,68,47)" fg:x="12463556" fg:w="5045420"/><text x="71.1460%" y="95.50">_ZN4k25610arithmetic3mul141_$LT$impl$u20$core_..</text></g><g><title>ecdsa::signing::SigningKey&lt;C&gt;::from_bytes::hc2bc3eb21081f510 (5,489,318 samples, 31.22%)</title><rect x="68.3764%" y="101" width="31.2247%" height="15" fill="rgb(210,16,53)" fg:x="12020616" fg:w="5489318"/><text x="68.6264%" y="111.50">ecdsa::signing::SigningKey&lt;C&gt;::from_bytes::hc2bc3e..</text></g><g><title>sha2::sha256::compress256::h430d9065f295ea76 (67,695 samples, 0.39%)</title><rect x="99.6061%" y="101" width="0.3851%" height="15" fill="rgb(235,124,12)" fg:x="17510817" fg:w="67695"/><text x="99.8561%" y="111.50"></text></g><g><title>all (17,580,066 samples, 100%)</title><rect x="0.0000%" y="133" width="100.0000%" height="15" fill="rgb(224,169,11)" fg:x="0" fg:w="17580066"/><text x="0.2500%" y="143.50"></text></g><g><title>main (17,580,065 samples, 100.00%)</title><rect x="0.0000%" y="117" width="100.0000%" height="15" fill="rgb(250,166,2)" fg:x="1" fg:w="17580065"/><text x="0.2500%" y="127.50">main</text></g></svg></svg>